!function(){$(function(){$.each($(".anchor"),function(){new e($(this))}),$.each($(".partners"),function(){new a($(this))}),$.each($(".catalog"),function(){new a($(this))}),$.each($(".promo__slider"),function(){new a($(this))}),$.each($(".sub-menu"),function(){new a($(this))}),$.each($(".mobile-menu"),function(){new t($(this))}),$.each($(".blog__sort"),function(){new s($(this))}),$.each($(".head-shot"),function(){new r($(this))}),$.each($(".hiring__item"),function(){new n($(this))}),$.each($(".rates__item-swiper"),function(){new a($(this))}),$.each($(".place-order__form"),function(){new i($(this))}),$.each($(".place-order__sign"),function(){new o($(this))})});var e=function(e){var n=e,t=$("html, body"),i=function(){n.on({click:function(){return $(".menu").hasClass("mobile")&&$(".menu-btn").trigger("click"),t.animate({scrollTop:$($.attr(this,"href")).offset().top},600),$(".menu")[0].obj.destroy(),!1}})},o=function(){i()};o()},n=function(e){var n=e,t=n.find(".hiring__btn"),i=n.find(".hiring__form"),o=n.find(".hiring__item-hide"),a=($("html, body"),function(){t.on({click:function(){return o.addClass("hide"),i.addClass("visible"),!1}})}),s=function(){a()};s()},t=function(e){var n=e,t=$(".mobile-menu-btn"),i=function(){o()},o=function(){t.on("click",function(){$(this).hasClass("close")?s():a()})},a=function(){t.addClass("close"),n.addClass("visible")},s=function(){t.removeClass("close"),n.removeClass("visible")};i()},i=function(e){var n=e,t=$(".place-order__steps"),i=t.find(".place-order__steps-item"),o=t.find("div > span"),a=n.find(".place-order__form-wrap"),s=n.find(".place-order__form-item"),r=s.find("input"),c=s.find("input[type=checkbox]"),d=s.find("select"),u=s.find("input[type=file]"),l=s.find("[data-required]"),f=s.find(".place-order__form-next"),p=s.find(".place-order__form-num"),h=p.find(".plus"),v=p.find(".minus"),m=function(){_(),k()},_=function(){a.css("height",s.filter(".active").outerHeight())},w=function(e){var n=e,t=n.next(".place-order__form-item");n.removeClass("active"),t.addClass("active");for(var a=0;a<=t.index();a++)i.eq(a).addClass("active");o.css("width",100*(t.index()+1)/4+"%"),_()},g=function(e){var n=e,t=n.find("[data-required]");t.each(function(){var e=$(this);""!==e.val()&&"0"!==e.val()&&e.is(":checked")||(e.addClass("not-touched"),e.parents(".websters-select").addClass("not-touched"),x(n,e))})},C=function(e){e.addClass("not-valid"),e.parents(".websters-select").addClass("not-valid"),e.removeClass("valid")},b=function(e){e.removeClass("not-valid"),e.parents(".websters-select").removeClass("not-valid"),e.addClass("valid")},y=function(e){var n=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return n.test(e)},x=function(e,n){var t=$(this),i=n.attr("type"),o=n[0].tagName;return("email"!==i&&"text"!==i&&"number"!==i||""!==n.val())&&("email"!==i||y(n.val()))?"number"===i&&n.val()<=0?(C(n),!1):"select"==o.toLocaleLowerCase()&&0===n.val()?(C(n),!1):(b(n),void(0===r.filter(".not-valid").length&&w(t))):(C(n),!1)},k=function(){n.on("submit",function(){}),r.on({focus:function(){$(this).removeClass("not-touched")},focusout:function(){var e=$(this),n=e.parents(".place-order__form-item");x(n,e)},keyup:function(){var e=$(this),n=e.parents(".place-order__form-item");x(n,e)}}),l.on({focusout:function(){var e=0;l.each(function(){var n=$(this);n.val().length>0&&(e+=1)}),0===e&&l.removeClass("not-valid")}}),d.on("change",function(){var e=$(this),n=e.parents(".websters-select");e.removeClass("not-valid not-touched"),n.removeClass("not-valid not-touched")}),c.on("change",function(){var e=$(this),n=e.parents(".websters-select");e.removeClass("not-valid not-touched"),n.removeClass("not-valid not-touched")}),f.on("click",function(){var e=$(this),t=e.parents(".place-order__form-item");return 0!=t.find("[data-required]").val()&&""!=t.find("[data-required]").val()||g(t),r.hasClass("not-touched")||r.hasClass("not-valid")||d.hasClass("not-valid")?(n.find(".not-touched:first").focus(),n.find(".not-valid:first").focus()):w(t),!1}),h.on("click",function(){var e=$(this),n=e.parents(".place-order__form-fieldset"),t=n.find("input[type=number]"),i=+t.val();return t.val(i+1),t.removeClass("not-valid"),!1}),v.on("click",function(){var e=$(this),n=e.parents(".place-order__form-fieldset"),t=n.find("input[type=number]"),i=+t.val();return i>0&&(t.val(i-1),t.removeClass("not-valid")),!1}),u.on("change",function(){var e=$(this),n=e.next("span");n.text(e.val())})};m()},o=function(e){var n,t=this,i=e,o=i.find(".place-order__sign-area"),a=i.find("span"),s=$(window),r=function(){o.signature("destroy")},c=function(){s.on({resize:function(){r(),u()}}),o.on({click:function(){a.remove()},mouseleave:function(){o.signature("isEmpty")?(o.addClass("contact__sign-area-red"),$(".sign_val").val("")):(n=o.signature("toSVG"),o.removeClass("contact__sign-area-red"),$(".sign_val").val(n))}})},d=function(){i[0].obj=t,c(),u()},u=function(){o.signature({thickness:1,color:"#b7b7b7"})};d()},a=function(e){var n,t,i,o,a,s=e,r=s.find(".partners__swiper"),c=s.find(".sub-menu__swiper"),d=s.find(".catalog__swiper"),u=s.find(".promo__swiper"),l=s.find(".rates__swiper"),f=s.find(".partners__swiper-prev"),p=s.find(".catalog__swiper-prev"),h=s.find(".promo__swiper-prev"),v=s.find(".rates__swiper-prev"),m=s.find(".partners__swiper-next"),_=s.find(".catalog__swiper-next"),w=s.find(".promo__swiper-next"),g=s.find(".rates__swiper-next"),C=$(window),b=function(){n=new Swiper(r,{autoplay:1e4,speed:500,effect:"slide",slidesPerView:"auto",loop:!0,loopedSlides:20,spaceBetween:80,nextButton:m,prevButton:f}),t=new Swiper(d,{autoplay:1e4,speed:500,effect:"slide",slidesPerView:3,loop:!0,nextButton:_,prevButton:p,breakpoints:{767:{slidesPerView:1},1199:{slidesPerView:2}}}),o=new Swiper(u,{autoplay:1e4,speed:500,effect:"slide",slidesPerView:1,loop:!0,nextButton:w,prevButton:h}),a=new Swiper(l,{autoplay:!1,speed:500,effect:"slide",slidesPerView:"auto",loop:!1,nextButton:g,prevButton:v}),i=new Swiper(c,{autoplay:!1,speed:500,effect:"slide",slidesPerView:"auto",simulateTouch:!1,onSlideChangeStart:function(){s.removeClass("start"),c[0].swiper.slideTo(i.find(".active").index(),200,!1)},onSlideChangeEnd:function(){s.removeClass("end")},onReachBeginning:function(){s.addClass("start"),s.removeClass("end"),setTimeout(function(){s.addClass("start")},300)},onReachEnd:function(){s.addClass("end"),setTimeout(function(){s.removeClass("start")},300)}})},y=function(){C.outerWidth()<=767&&b(),C.on({resize:function(){C.outerWidth()>=767?x():b()}})},x=function(){c[0].swiper.destroy(!1,!0)},k=function(){y(),b()};k()},s=function(e){var n=e,t=$(".site"),i=$(window),o=function(){a()},a=function(){t.on("click",function(e){n.hasClass("open")&&0==$(e.target).closest(n).length&&s()}),n.on("click",function(){var e=$(this);e.hasClass("open")&&i.width()<1200?s():i.width()<1200&&r()})},s=function(){n.removeClass("open")},r=function(){n.addClass("open")};o()},r=function(e){var n=e,t=$("body"),i=t.data("action"),o=n.find(".head-shot__command-more"),a=n.find(".preloader"),s=n.find(".head-shot__command-wrap"),r=n.find(".head-shot__command-cover"),c=!0,d=new XMLHttpRequest,u=function(){h(),m()},l=function(e){var t,i=e.has_items,o=e.items;$.each(o,function(){var e=this;t=$('<div class="head-shot__command-item new"><img src="'+e.dummy+'" alt="'+e.title+'"/></div>'),s.append(t)});var a=s.find(".new");setTimeout(function(){f(i,a)},550),n.attr("data-loaded-group",+n.attr("data-loaded-group")+1)},f=function(e,n){var t=500;c&&(t=1),r.animate({height:s.outerHeight()},{duration:t,complete:function(){r.css("height",""),n.each(function(e){p($(this),e)}),0==e&&v()}}),c&&setTimeout(function(){c=!1},500)},p=function(e,n){var t=100;c&&(t=1),setTimeout(function(){e.removeClass("new")},n*t)},h=function(){var e=i;a.addClass("active"),d.abort(),d=$.ajax({url:e,data:{action:"gallery",type:"headshot",page:n.attr("data-loaded-group")},dataType:"json",timeout:2e4,type:"GET",success:function(e){r.height(r.height()),l(e)},error:function(e){"abort"!=e.statusText&&alert("Error!")}})},v=function(){o.css("opacity",0),setTimeout(function(){o.css("padding",0),o.animate({height:0},{duration:500,complete:function(){o.remove()}})},300)},m=function(){o.on("click",function(){return h(),!1})};u()}}();
!function(){"use strict";$(function(){$.each($(".media-gallery"),function(){new i($(this))})});var i=function(i){var e=i,n=$("body"),a=e.find(".media-gallery__wrap"),d=$('<div class="media-gallery__sizer"></div>'),s=e.find(".media-gallery__switcher"),o=s.find("button"),r=e.find(".media-gallery__cover"),l=e.find(".preloader"),c=e.find(".media-gallery__more"),u=n.data("action"),p=($(window),!1),f=!0,h=!0,v=new XMLHttpRequest,m=function(){o.on("click",function(){var i=$(this),t=i.data("type");return o.removeClass("active"),i.addClass("active"),e.attr("data-loaded-group",0),k(t),h=!0,!1}),c.on({click:function(){return k(),h=!1,!1}}),e.on("click",".media-gallery__item",function(){return t($(this),$(this).index()-1),h=!0,!1})},w=function(i){0!==e.attr("data-loaded-group")&&p&&g();var t,n=i.has_items,s=i.items;h&&a.html(d),$.each(s,function(){var i=this;t=$('<div class="media-gallery__item new '+i.type+'" title="'+this.title+'" data-href="'+i.dummy__big+'"><img src="'+i.dummy+'" alt="'+i.type+'" /></div>'),1==i.video&&t.addClass("media-gallery__item_video"),a.append(t)});var o=a.find(".new");setTimeout(function(){_(n,o)},550),setTimeout(function(){b()},500),e.attr("data-loaded-group",+e.attr("data-loaded-group")+1)},g=function(){a.isotope("destroy"),p=!1},_=function(i,t){var e=500;f&&(e=1),r.animate({height:a.outerHeight()},{duration:e,complete:function(){r.css("height",""),t.each(function(i){y($(this),i)}),0==i?T():i>0&&C()}}),f&&setTimeout(function(){f=!1},500)},y=function(i,t){var e=100;f&&(e=1),setTimeout(function(){i.removeClass("new")},t*e)},b=function(){var i=".media-gallery__item";p=!0,a.isotope({itemSelector:i,percentPosition:!0,masonry:{columnWidth:".media-gallery__sizer"}}),l.removeClass("active")},C=function(){c.removeClass("hide")},T=function(){c.addClass("hide")},k=function(){var i=u;l.addClass("active"),v.abort(),v=$.ajax({url:i,data:{action:"gallery",page:e.attr("data-loaded-group"),type:o.filter(".active").data("type")},dataType:"json",timeout:2e4,type:"GET",success:function(i){r.height(r.height()),w(i)},error:function(i){"abort"!=i.statusText&&alert("Error!")}})},x=function(){k(),m()};x()},t=function(i,t){var e=this,n=i,a=$("body"),d=n.parent(),s=n.parents(".media-gallery"),o=$("html"),r=$(window),l=d.find(".media-gallery__item"),c=null,u=null,p=null,f=null,h=null,v=null,m=null,w=null,g=null,_=function(){r.on({resize:function(){P()}}),u.parent().on({click:function(){T()}}),u.on({click:function(i){i.stopPropagation()}}),p.on({click:function(){return T(),!1}})},y=function(){s.attr("data-loaded-type");c=$('<div class="swiper-popup">                                    <div class="swiper-container">                                        <div class="swiper-wrapper"></div>                                        <div class="swiper-pagination"></div>                                        <div class="swiper-button-next"></div>                                        <div class="swiper-button-prev"></div>                                    </div>                                </div>'),f=c.find(".swiper-wrapper"),h=c.find(".swiper-container"),v=c.find(".swiper-pagination"),m=c.find(".swiper-button-next"),w=c.find(".swiper-button-prev")},b=function(){var i=c.find(".swiper-slide-active"),t=i.find("[data-src]").data("src"),e=$('<iframe src="'+t+'"> frameborder="0" allowfullscreen></iframe>');$(".swiper-slide-active").find(".swiper-popup__video").prepend(e)},C=function(){y(),k(),z(),g.slideTo(t,0),c.addClass("active"),S(),g.onResize()},T=function(){c.removeClass("active"),setTimeout(function(){o.css({overflow:"",paddingRight:""}),c.remove()},300)},k=function(){$.each(l,function(){var i=null,t=null,e=null;$(this).hasClass("media-gallery__item_video")?(e='<i class="fa fa-spinner fa-spin"></i>',i='<div class="swiper-popup__video"/>',t='data-src="'+$(this).data("href")+'"'):(e="",i='<img src="'+$(this).data("href")+'">',t="");var n=$('<div class="swiper-slide">                                        <div class="swiper-popup__inner" '+t+'>                                            <a href="#" class="swiper-popup__close"></a>                                            '+e+"                                            "+i+'                                            <span class="swiper-slide__title">'+$(this).attr("title")+"</span>                                        </div>                                    </div>");f.append(n),n.find("img").on({load:function(){$(this).attr("data-width",this.width),$(this).attr("data-height",this.height),j(this.width,this.height,$(this))}})}),a.append(c),u=c.find(".swiper-popup__inner"),p=c.find(".swiper-popup__close")},x=function(){var i=document.createElement("div"),t=null;return document.body.appendChild(i),t=i.offsetWidth-i.clientWidth,document.body.removeChild(i),t},z=function(){g=new Swiper(h,{pagination:v,nextButton:m,prevButton:w,slidesPerView:1,paginationClickable:!0,onSlideChangeEnd:function(){R(),$(".swiper-slide-active").find("[data-src]").length&&b()}})},E=function(){C(),_(),n[0].obj=e},R=function(){var i=c.find(".swiper-slide"),t=i.find(".swiper-popup__video iframe");t.remove()},j=function(i,t,e){var n=0;n=c.width()/i>c.height()/t?c.height()/t:c.width()/i,n>=1?e.css({width:.85*i,height:.85*t}):e.css({width:n*i*.85,height:n*t*.85})},P=function(){$.each(f.find("img"),function(){j($(this).data("width"),$(this).data("height"),$(this))})},S=function(){o.css({overflow:"hidden",paddingRight:x()})};E()}}();
!function(){"use strict";$(function(){$(".validation-form").length&&new t($(".validation-form"))});var t=function(t){var n=this,a=t,o=a.find("#contact-us__note"),i=a.find("input, textarea"),s=a.find("[data-required]"),e=function(){u(),a[0].obj=n},l=function(){s.each(function(){var t=$(this);""===t.val()&&(t.addClass("not-touched"),f(t))})},u=function(){s.on({focus:function(){$(this).removeClass("not-touched")},focusout:function(){var t=$(this);f(t)},keyup:function(){var t=$(this);f(t)}}),i.on({focusout:function(){var t=0;i.each(function(){var n=$(this);n.val().length>0&&(t+=1)}),0===t&&(i.removeClass("not-valid"),o.removeClass("visible"))}}),a.on({submit:function(){return l(),0!==s.filter(".not-valid").length&&o.addClass("visible"),!s.hasClass("not-touched")&&!s.hasClass("not-valid")||(a.find(".not-touched:first").focus(),a.find(".not-valid:first").focus(),!1)}})},v=function(t){t.addClass("not-valid"),t.removeClass("valid")},c=function(t){t.removeClass("not-valid"),t.addClass("valid")},r=function(t){var n=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return n.test(t)},f=function(t){var n=t.attr("type"),a=t[0].tagName;return("email"!==n&&"text"!==n||""!==t.val())&&("email"!==n||r(t.val()))?"textarea"==a.toLocaleLowerCase()&&(""===t.val()||t.val().length<80)?(v(t),!1):(c(t),void(0===s.filter(".not-valid").length&&o.removeClass("visible"))):(v(t),!1)};n.checkValid=function(){var t=!0;return s.each(function(){$(this).removeClass("not-touched"),$(this).hasClass("not-valid")&&(t=!1)}),t},e()}}();
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,i,n=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,l=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),d=$('<span class="websters-select__item"></span>'),p=$('<div class="websters-select"></div>'),r=$(window),f=$("body"),u=!1,h=function(){var e="";o.css({opacity:0}),o.wrap(p),p=o.parent(),p.append('<div class="websters-select__arrow"></div>'),o.before(d),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),d.text(e)},v=function(){u=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),p.removeClass("websters-select_opened")},b=function(){o[0].obj=n,h(),g(),w()},w=function(){o.on("change",function(){d.text($(this).find("option:selected").text())}),1!=s||l||(p.on({click:function(e){e.stopPropagation(),u?v():m()}}),r.on({click:function(){u&&v()}}))},g=function(){!s||l?y():1==s&&_()},_=function(){p.addClass("websters-select_custom")},y=function(){p.addClass("websters-select_mobile")},m=function(){var e=$("select"),n=$("<ul></ul>"),s=(r.scrollTop(),p.offset()),l=0,d=o.find("option:selected").index(),h=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),u&&t.remove(),u=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+h+'"></div>'),o.find("option").each(function(e){var t=$(this);e==d?n.append('<li class="active">'+t.text()+"</li>"):n.append("<li>"+t.text()+"</li>")}),t.append(n),f.append(t),p.addClass("websters-select_opened"),t.css({width:p.outerWidth(),left:s.left,top:s.top+p.outerHeight()}),l=t.outerHeight(),l>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),i=t.niceScroll({horizrailenabled:!1})),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),v()}})};n.checkOpened=function(){return u},n.close=function(){v()},b()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5pbmRleC5qcyIsImpxdWVyeS5tZWRpYS1nYWxsZXJ5LmpzIiwianF1ZXJ5LmZvcm0udmFsaWRhdG9yLmpzIiwianF1ZXJ5LndlYnN0ZXJzLXNlbGVjdC5qcyJdLCJuYW1lcyI6WyIkIiwiZWFjaCIsIkFuY2hvciIsInRoaXMiLCJTbGlkZXJzIiwiTWVudSIsIlNvcnQiLCJIZWFkU2hvdExvYWRlciIsIkhpcmluZyIsIlBsYWNlT3JkZXJGb3JtIiwiQ29udGFjdFNpZ24iLCJvYmoiLCJfb2JqIiwiX3dpbmRvdyIsIl9vbkV2ZW50cyIsIm9uIiwiY2xpY2siLCJoYXNDbGFzcyIsInRyaWdnZXIiLCJhbmltYXRlIiwic2Nyb2xsVG9wIiwiYXR0ciIsIm9mZnNldCIsInRvcCIsImRlc3Ryb3kiLCJfY29uc3RydWN0IiwiX2J0biIsImZpbmQiLCJfZm9ydW0iLCJfaGlkZUNvbnRlbnQiLCJhZGRDbGFzcyIsIl9jb25zdHJ1Y3RvciIsIl9jbG9zZU1lbnUiLCJfb3Blbk1lbnUiLCJyZW1vdmVDbGFzcyIsIl9zdGVwc1dyYXAiLCJfc3RlcHNJdGVtIiwiX3N0ZXBzTGluZSIsIl9mb3JtV3JhcCIsIl9mb3JtSXRlbUJsb2NrIiwiX2ZpZWxkcyIsIl9jaGVja2JveCIsIl9zZWxlY3QiLCJfZmlsZSIsIl9pbnB1dHMiLCJfY2hhbmdlTnVtYmVyIiwiX2NoYW5nZU51bWJlclBsdXMiLCJfY2hhbmdlTnVtYmVyTWludXMiLCJfc2V0SGVpZ2h0IiwiY3NzIiwiZmlsdGVyIiwib3V0ZXJIZWlnaHQiLCJfbmV4dFN0ZXAiLCJjdXJGb3JtIiwiY3VyRm9ybUl0ZW1CbG9jayIsIm5leHRGb3JtSXRlbUJsb2NrIiwibmV4dCIsImkiLCJpbmRleCIsImVxIiwiX2FkZE5vdFRvdWNoZWRDbGFzcyIsImZvcm0iLCJmaWVsZHMiLCJjdXJJdGVtIiwidmFsIiwiaXMiLCJwYXJlbnRzIiwiX3ZhbGlkYXRlRmllbGQiLCJfbWFrZU5vdFZhbGlkIiwiZmllbGQiLCJfbWFrZVZhbGlkIiwiX3ZhbGlkYXRlRW1haWwiLCJlbWFpbCIsInJlIiwidGVzdCIsInR5cGUiLCJ0YWdOYW1lIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJsZW5ndGgiLCJmb2N1cyIsImZvY3Vzb3V0Iiwia2V5dXAiLCJsZXR0ZXJDb3VudGVyIiwiY3VyU2VsZWN0IiwiY3VyUGFyZW50IiwiY3VyQnRuIiwiY3VySW5wdXQiLCJjdXJOdW0iLCJjdXJFbGVtIiwiY3VyVGV4dCIsInRleHQiLCJfcmVzdWx0IiwiX3NlbGYiLCJfYXJlYSIsIl9ub3RlIiwid2luZG93IiwiX2Rlc3Ryb3lTaWduYXR1cmUiLCJzaWduYXR1cmUiLCJyZXNpemUiLCJfaW5pdFNpZ25hdHVyZSIsInJlbW92ZSIsIm1vdXNlbGVhdmUiLCJfaW5pdCIsInRoaWNrbmVzcyIsImNvbG9yIiwiX3BhcnRuZXJzIiwiX2NhdGFsb2ciLCJfc3ViTWVudSIsIl9wcm9tbyIsIl9yYXRlcyIsIl9wYXJ0bmVyc1NsaWRlciIsIl9zdWJNZW51U2xpZGVyIiwiX2NhdGFsb2dTbGlkZXIiLCJfcHJvbW9TbGlkZXIiLCJfcmF0ZXNTbGlkZXIiLCJfcGFydG5lcnNQcmV2IiwiX2NhdGFsb2dQcmV2IiwiX3Byb21vUHJldiIsIl9yYXRlc1ByZXYiLCJfcGFydG5lcnNOZXh0IiwiX2NhdGFsb2dOZXh0IiwiX3Byb21vTmV4dCIsIl9yYXRlc05leHQiLCJfaW5pdFNsaWRlciIsIlN3aXBlciIsImF1dG9wbGF5Iiwic3BlZWQiLCJlZmZlY3QiLCJzbGlkZXNQZXJWaWV3IiwibG9vcCIsImxvb3BlZFNsaWRlcyIsInNwYWNlQmV0d2VlbiIsIm5leHRCdXR0b24iLCJwcmV2QnV0dG9uIiwiYnJlYWtwb2ludHMiLCI3NjciLCIxMTk5Iiwic2ltdWxhdGVUb3VjaCIsIm9uU2xpZGVDaGFuZ2VTdGFydCIsInN3aXBlciIsInNsaWRlVG8iLCJvblNsaWRlQ2hhbmdlRW5kIiwib25SZWFjaEJlZ2lubmluZyIsInNldFRpbWVvdXQiLCJvblJlYWNoRW5kIiwiX29uRXZlbnQiLCJvdXRlcldpZHRoIiwiX2Rlc3Ryb3lTbGlkZXIiLCJfc2l0ZSIsImUiLCJ0YXJnZXQiLCJjbG9zZXN0IiwiX2Nsb3NlTGFuZ3VhZ2UiLCJ3aWR0aCIsIl9vcGVuTGFuZ3VhZ2UiLCJfYm9keSIsIl9maWxlTGluayIsImRhdGEiLCJfYnRuTW9yZSIsIl9wcmVsb2FkZXIiLCJfd3JhcHBlciIsIl9jb3ZlciIsIl9maXJzdEdyb3VwIiwiX3JlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsIl9sb2FkTmV3SXRlbXMiLCJfYWRkR2FsbGVyeUNvbnRlbnQiLCJtc2ciLCJuZXdCbG9jayIsImhhc0l0ZW1zIiwiaGFzX2l0ZW1zIiwiZ2V0SXRlbXMiLCJpdGVtcyIsImR1bW15IiwidGl0bGUiLCJhcHBlbmQiLCJuZXdJdGVtcyIsIl9oZWlnaHRBbmltYXRpb24iLCJkdXJhdGlvbiIsImhlaWdodCIsImNvbXBsZXRlIiwiX3Nob3dOZXdJdGVtcyIsIl9yZW1vdmVCdG5Nb3JlIiwiaXRlbSIsImRlbGF5IiwicGF0aCIsImFib3J0IiwiYWpheCIsInVybCIsImFjdGlvbiIsInBhZ2UiLCJkYXRhVHlwZSIsInRpbWVvdXQiLCJzdWNjZXNzIiwiZXJyb3IiLCJzdGF0dXNUZXh0IiwiYWxlcnQiLCJNZWRpYUdhbGxlcnkiLCJfc2l6ZXIiLCJfc3dpdGNoZXIiLCJfc3dpdGNoQnRuIiwiX2lzR2FsbGVyeSIsIl9maWx0ZXJGbGFnIiwiY3VyVHlwZSIsIlN3aXBlclBvcHVwIiwiX2Rlc3Ryb3lHYWxsZXJ5IiwiaHRtbCIsImR1bW15X19iaWciLCJ2aWRlbyIsIl9pbml0R2FsbGVyeSIsImlzb3RvcGUiLCJfc2hvd0J0bk1vcmUiLCJ3cmFwSXRlbSIsIml0ZW1TZWxlY3RvciIsInBlcmNlbnRQb3NpdGlvbiIsIm1hc29ucnkiLCJjb2x1bW5XaWR0aCIsInBhcmVudCIsIl9nYWxsZXJ5V3JhcCIsIl9odG1sIiwiX2xpbmtzIiwiX3BvcHVwIiwiX3BvcHVwSW5uZXIiLCJfcG9wdXBDbG9zZSIsIl9zd2lwZXJXcmFwcGVyIiwiX3N3aXBlckNvbnRhaW5lciIsIl9zd2lwZXJQYWdpbmF0aW9uIiwiX3N3aXBlckJ0bk5leHQiLCJfc3dpcGVyQnRuUHJldiIsIl9zd2lwZXIiLCJfYWRkRXZlbnRzIiwiX3NldFBpY3R1cmVTaXplV2hlblJlc2l6ZSIsIl9jbG9zZVBvcHVwIiwiZXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJfYWRkaW5nVmFyaWFibGVzIiwiX2FkZFZpZGVvIiwiYWN0aXZlU2xpZGUiLCJzcmMiLCJpbm5lckNvbnRlbnQiLCJwcmVwZW5kIiwiX2J1aWxkUG9wdXAiLCJfY29udGVudEZpbGxpbmciLCJfaW5pdFN3aXBlciIsIl9zZXRTdHlsZXMiLCJvblJlc2l6ZSIsIm92ZXJmbG93IiwicGFkZGluZ1JpZ2h0IiwiZGF0YVNSQyIsInByZWxvYWRlciIsIm5ld0l0ZW0iLCJsb2FkIiwiX3NldFBpY3R1cmVTaXplIiwiX2dldFNjcm9sbFdpZHRoIiwic2Nyb2xsRGl2IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2Nyb2xsYmFyV2lkdGgiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJvZmZzZXRXaWR0aCIsImNsaWVudFdpZHRoIiwicmVtb3ZlQ2hpbGQiLCJwYWdpbmF0aW9uIiwicGFnaW5hdGlvbkNsaWNrYWJsZSIsIl9yZW1vdmVWaWRlbyIsInZpZGVvRnJhbWUiLCJwaWNXaWR0aCIsInBpY0hlaWdodCIsInBpYyIsImsiLCJGb3JtVmFsaWRhdG9yIiwic3VibWl0IiwiY2hlY2tWYWxpZCIsInZhbGlkIiwiV2Vic3RlcnNTZWxlY3QiLCJvcHRpb25UeXBlIiwic2hvd1R5cGUiLCJwYXJhbXMiLCJfc2Nyb2xsIiwiX29wdGlvblR5cGUiLCJfc2hvd1R5cGUiLCJfdmlzaWJsZSIsInZpc2libGUiLCJfZGV2aWNlIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiX3RleHQiLCJfd3JhcCIsIl9vcGVuZWQiLCJfYWRkV3JhcCIsIm9wYWNpdHkiLCJ3cmFwIiwiYmVmb3JlIiwiX2hpZGVQb3B1cCIsInN0b3AiLCJzbGlkZVVwIiwiZmFkZU91dCIsImRpc3BsYXkiLCJfc2VsZWN0Vmlld1R5cGUiLCJfc2hvd1BvcHVwIiwiX3NldE1vYmlsZVZpZXciLCJfc2V0Q3VzdG9tMSIsInNlbGVjdHMiLCJsaXN0IiwibWF4SGVpZ2h0IiwiY3VySW5kZXgiLCJpZCIsIk1hdGgiLCJyb3VuZCIsInJhbmRvbSIsImNoZWNrT3BlbmVkIiwiY2xvc2UiLCJsZWZ0IiwibmljZVNjcm9sbCIsImhvcml6cmFpbGVuYWJsZWQiLCJzbGlkZURvd24iXSwibWFwcGluZ3MiOiJDQUFBLFdBRUlBLEVBQUcsV0FFQ0EsRUFBRUMsS0FBTUQsRUFBRyxXQUFhLFdBQ3BCLEdBQUlFLEdBQVNGLEVBQUdHLFNBR3BCSCxFQUFFQyxLQUFNRCxFQUFHLGFBQWUsV0FDdEIsR0FBSUksR0FBVUosRUFBR0csU0FHckJILEVBQUVDLEtBQU1ELEVBQUcsWUFBYyxXQUNyQixHQUFJSSxHQUFVSixFQUFHRyxTQUdyQkgsRUFBRUMsS0FBTUQsRUFBRyxrQkFBb0IsV0FDM0IsR0FBSUksR0FBVUosRUFBR0csU0FHckJILEVBQUVDLEtBQU1ELEVBQUcsYUFBZSxXQUN0QixHQUFJSSxHQUFVSixFQUFHRyxTQUdyQkgsRUFBRUMsS0FBTUQsRUFBRyxnQkFBa0IsV0FDekIsR0FBSUssR0FBT0wsRUFBR0csU0FHbEJILEVBQUVDLEtBQU1ELEVBQUcsZUFBaUIsV0FDeEIsR0FBSU0sR0FBTU4sRUFBR0csU0FHakJILEVBQUVDLEtBQU1ELEVBQUcsY0FBZ0IsV0FDdkIsR0FBSU8sR0FBZ0JQLEVBQUdHLFNBRzNCSCxFQUFFQyxLQUFNRCxFQUFHLGlCQUFtQixXQUMxQixHQUFJUSxHQUFRUixFQUFHRyxTQUduQkgsRUFBRUMsS0FBTUQsRUFBRyx1QkFBeUIsV0FDaEMsR0FBSUksR0FBU0osRUFBR0csU0FHcEJILEVBQUVDLEtBQU1ELEVBQUcsc0JBQXdCLFdBQy9CLEdBQUlTLEdBQWdCVCxFQUFHRyxTQUczQkgsRUFBRUMsS0FBTUQsRUFBRSxzQkFBdUIsV0FFN0IsR0FBSVUsR0FBYVYs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WUFBYyxXQUNoQixNQUFPdEIsSUFFWHJNLEVBQU00TixNQUFRLFdBQ1psQixLQUlGdlEiLCJmaWxlIjoiaW5kZXgubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKCBmdW5jdGlvbigpe1xyXG5cclxuICAgICQoIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICQuZWFjaCggJCggJy5hbmNob3InICksIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBuZXcgQW5jaG9yICggJCggdGhpcyApICk7XHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAkLmVhY2goICQoICcucGFydG5lcnMnICksIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBuZXcgU2xpZGVycyAoICQoIHRoaXMgKSApO1xyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgJC5lYWNoKCAkKCAnLmNhdGFsb2cnICksIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBuZXcgU2xpZGVycyAoICQoIHRoaXMgKSApO1xyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgJC5lYWNoKCAkKCAnLnByb21vX19zbGlkZXInICksIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBuZXcgU2xpZGVycyAoICQoIHRoaXMgKSApO1xyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgJC5lYWNoKCAkKCAnLnN1Yi1tZW51JyApLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgbmV3IFNsaWRlcnMgKCAkKCB0aGlzICkgKTtcclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICQuZWFjaCggJCggJy5tb2JpbGUtbWVudScgKSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIG5ldyBNZW51ICggJCggdGhpcyApICk7XHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAkLmVhY2goICQoICcuYmxvZ19fc29ydCcgKSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBuZXcgU29ydCggJCggdGhpcyApICk7XHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAkLmVhY2goICQoICcuaGVhZC1zaG90JyApLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIG5ldyBIZWFkU2hvdExvYWRlciggJCggdGhpcyApICk7XHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAkLmVhY2goICQoICcuaGlyaW5nX19pdGVtJyApLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIG5ldyBIaXJpbmcoICQoIHRoaXMgKSApO1xyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgJC5lYWNoKCAkKCAnLnJhdGVzX19pdGVtLXN3aXBlcicgKSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBuZXcgU2xpZGVycyggJCggdGhpcyApICk7XHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAkLmVhY2goICQoICcucGxhY2Utb3JkZXJfX2Zvcm0nICksIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbmV3IFBsYWNlT3JkZXJGb3JtKCAkKCB0aGlzICkgKTtcclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICQuZWFjaCggJCgnLnBsYWNlLW9yZGVyX19zaWduJyksIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIG5ldyBDb250YWN0U2lnbiggJCh0aGlzKSApO1xyXG5cclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgfSApO1xyXG5cclxuICAgIHZhciBBbmNob3IgPSBmdW5jdGlvbiAoIG9iaiApIHtcclxuICAgICAgICB2YXIgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX3dpbmRvdyA9ICQoICdodG1sLCBib2R5JyApO1xyXG5cclxuICAgICAgICB2YXIgX29uRXZlbnRzID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX29iai5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJCgnLm1lbnUnKS5oYXNDbGFzcyggJ21vYmlsZScgKSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIFwiLm1lbnUtYnRuXCIgKS50cmlnZ2VyKCAnY2xpY2snICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF93aW5kb3cuYW5pbWF0ZSgge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wOiAkKCAkLmF0dHIodGhpcywgJ2hyZWYnKSApLm9mZnNldCgpLnRvcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCA2MDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCAnLm1lbnUnIClbMF0ub2JqLmRlc3Ryb3koKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfY29uc3RydWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBfb25FdmVudHMoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgX2NvbnN0cnVjdCgpXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBIaXJpbmcgPSBmdW5jdGlvbiAoIG9iaiApIHtcclxuICAgICAgICB2YXIgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX2J0biA9IF9vYmouZmluZCggJy5oaXJpbmdfX2J0bicgKSxcclxuICAgICAgICAgICAgX2ZvcnVtID0gX29iai5maW5kKCAnLmhpcmluZ19fZm9ybScgKSxcclxuICAgICAgICAgICAgX2hpZGVDb250ZW50ID0gX29iai5maW5kKCAnLmhpcmluZ19faXRlbS1oaWRlJyApLFxyXG4gICAgICAgICAgICBfd2luZG93ID0gJCggJ2h0bWwsIGJvZHknICk7XHJcblxyXG4gICAgICAgIHZhciBfb25FdmVudHMgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfYnRuLm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2hpZGVDb250ZW50LmFkZENsYXNzKCAnaGlkZScgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2ZvcnVtLmFkZENsYXNzKCAndmlzaWJsZScgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfY29uc3RydWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBfb25FdmVudHMoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgX2NvbnN0cnVjdCgpXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBNZW51ID0gZnVuY3Rpb24oIG9iaiApe1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxyXG4gICAgICAgICAgICBfYnRuID0gJCggJy5tb2JpbGUtbWVudS1idG4nICk7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcbiAgICAgICAgdmFyIF9jb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBfb25FdmVudHMoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX29uRXZlbnRzID0gZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICBfYnRuLm9uKCAnY2xpY2snLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCAkKCB0aGlzKS5oYXNDbGFzcyggJ2Nsb3NlJyApICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jbG9zZU1lbnUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfb3Blbk1lbnUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX29wZW5NZW51ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIF9idG4uYWRkQ2xhc3MoICdjbG9zZScgKTtcclxuICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoICd2aXNpYmxlJyApO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfY2xvc2VNZW51ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIF9idG4ucmVtb3ZlQ2xhc3MoICdjbG9zZScgKTtcclxuICAgICAgICAgICAgICAgIF9vYmoucmVtb3ZlQ2xhc3MoICd2aXNpYmxlJyApO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXHJcblxyXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcclxuXHJcbiAgICAgICAgX2NvbnN0cnVjdG9yKCk7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgUGxhY2VPcmRlckZvcm0gPSBmdW5jdGlvbiggb2JqICl7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9vYmogPSBvYmosXHJcbiAgICAgICAgICAgIF9zdGVwc1dyYXAgPSAkKCAnLnBsYWNlLW9yZGVyX19zdGVwcycgKSxcclxuICAgICAgICAgICAgX3N0ZXBzSXRlbSA9IF9zdGVwc1dyYXAuZmluZCggJy5wbGFjZS1vcmRlcl9fc3RlcHMtaXRlbScgKSxcclxuICAgICAgICAgICAgX3N0ZXBzTGluZSA9IF9zdGVwc1dyYXAuZmluZCggJ2RpdiA+IHNwYW4nICksXHJcbiAgICAgICAgICAgIF9mb3JtV3JhcCA9IF9vYmouZmluZCggJy5wbGFjZS1vcmRlcl9fZm9ybS13cmFwJyApLFxyXG4gICAgICAgICAgICBfZm9ybUl0ZW1CbG9jayA9IF9vYmouZmluZCggJy5wbGFjZS1vcmRlcl9fZm9ybS1pdGVtJyApLFxyXG4gICAgICAgICAgICBfZmllbGRzID0gX2Zvcm1JdGVtQmxvY2suZmluZCggJ2lucHV0JyApLFxyXG4gICAgICAgICAgICBfY2hlY2tib3ggPSBfZm9ybUl0ZW1CbG9jay5maW5kKCAnaW5wdXRbdHlwZT1jaGVja2JveF0nICksXHJcbiAgICAgICAgICAgIF9zZWxlY3QgPSBfZm9ybUl0ZW1CbG9jay5maW5kKCAnc2VsZWN0JyApLFxyXG4gICAgICAgICAgICBfZmlsZSA9IF9mb3JtSXRlbUJsb2NrLmZpbmQoICdpbnB1dFt0eXBlPWZpbGVdJyApLFxyXG4gICAgICAgICAgICBfaW5wdXRzID0gX2Zvcm1JdGVtQmxvY2suZmluZCggJ1tkYXRhLXJlcXVpcmVkXScgKSxcclxuICAgICAgICAgICAgX2J0biA9IF9mb3JtSXRlbUJsb2NrLmZpbmQoICcucGxhY2Utb3JkZXJfX2Zvcm0tbmV4dCcgKSxcclxuICAgICAgICAgICAgX2NoYW5nZU51bWJlciA9IF9mb3JtSXRlbUJsb2NrLmZpbmQoICcucGxhY2Utb3JkZXJfX2Zvcm0tbnVtJyApLFxyXG4gICAgICAgICAgICBfY2hhbmdlTnVtYmVyUGx1cyA9IF9jaGFuZ2VOdW1iZXIuZmluZCggJy5wbHVzJyApLFxyXG4gICAgICAgICAgICBfY2hhbmdlTnVtYmVyTWludXMgPSBfY2hhbmdlTnVtYmVyLmZpbmQoICcubWludXMnICk7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcbiAgICAgICAgdmFyIF9jb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBfc2V0SGVpZ2h0KCk7XHJcbiAgICAgICAgICAgICAgICBfb25FdmVudHMoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3NldEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfZm9ybVdyYXAuY3NzKCAnaGVpZ2h0JywgX2Zvcm1JdGVtQmxvY2suZmlsdGVyKCAnLmFjdGl2ZScgKS5vdXRlckhlaWdodCgpIClcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9uZXh0U3RlcCA9IGZ1bmN0aW9uICggY3VyRm9ybSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgY3VyRm9ybUl0ZW1CbG9jayA9IGN1ckZvcm0sXHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dEZvcm1JdGVtQmxvY2sgPSBjdXJGb3JtSXRlbUJsb2NrLm5leHQoICcucGxhY2Utb3JkZXJfX2Zvcm0taXRlbScgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjdXJGb3JtSXRlbUJsb2NrLnJlbW92ZUNsYXNzKCAnYWN0aXZlJyApO1xyXG4gICAgICAgICAgICAgICAgbmV4dEZvcm1JdGVtQmxvY2suYWRkQ2xhc3MoICdhY3RpdmUnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDw9IG5leHRGb3JtSXRlbUJsb2NrLmluZGV4KCk7IGkrKyApe1xyXG4gICAgICAgICAgICAgICAgICAgIF9zdGVwc0l0ZW0uZXEoaSkuYWRkQ2xhc3MoICdhY3RpdmUnICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgX3N0ZXBzTGluZS5jc3MoICd3aWR0aCcsICggbmV4dEZvcm1JdGVtQmxvY2suaW5kZXgoKSArIDEgKSAqIDEwMCAvIDQgKyclJyApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9zZXRIZWlnaHQoKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9hZGROb3RUb3VjaGVkQ2xhc3MgPSBmdW5jdGlvbiAoIGZvcm0gKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGN1ckZvcm1JdGVtQmxvY2sgPSBmb3JtLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkcyA9IGN1ckZvcm1JdGVtQmxvY2suZmluZCggJ1tkYXRhLXJlcXVpcmVkXScgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmaWVsZHMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIGN1ckl0ZW0udmFsKCkgPT09ICcnIHx8IGN1ckl0ZW0udmFsKCkgPT09ICcwJyB8fCAhY3VySXRlbS5pcyggJzpjaGVja2VkJyApICl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJJdGVtLmFkZENsYXNzKCAnbm90LXRvdWNoZWQnICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckl0ZW0ucGFyZW50cyggJy53ZWJzdGVycy1zZWxlY3QnICkuYWRkQ2xhc3MoICdub3QtdG91Y2hlZCcgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF92YWxpZGF0ZUZpZWxkKCBjdXJGb3JtSXRlbUJsb2NrLCBjdXJJdGVtICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfbWFrZU5vdFZhbGlkID0gZnVuY3Rpb24gKCBmaWVsZCApIHtcclxuICAgICAgICAgICAgICAgIGZpZWxkLmFkZENsYXNzKCAnbm90LXZhbGlkJyApO1xyXG4gICAgICAgICAgICAgICAgZmllbGQucGFyZW50cyggJy53ZWJzdGVycy1zZWxlY3QnICkuYWRkQ2xhc3MoICdub3QtdmFsaWQnICk7XHJcbiAgICAgICAgICAgICAgICBmaWVsZC5yZW1vdmVDbGFzcyggJ3ZhbGlkJyApO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfbWFrZVZhbGlkID0gZnVuY3Rpb24gKCBmaWVsZCApIHtcclxuICAgICAgICAgICAgICAgIGZpZWxkLnJlbW92ZUNsYXNzKCAnbm90LXZhbGlkJyApO1xyXG4gICAgICAgICAgICAgICAgZmllbGQucGFyZW50cyggJy53ZWJzdGVycy1zZWxlY3QnICkucmVtb3ZlQ2xhc3MoICdub3QtdmFsaWQnICk7XHJcbiAgICAgICAgICAgICAgICBmaWVsZC5hZGRDbGFzcyggJ3ZhbGlkJyApO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfdmFsaWRhdGVFbWFpbCA9IGZ1bmN0aW9uICggZW1haWwgKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmUgPSAvXigoW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKyhcXC5bXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKSopfChcIi4rXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31dKXwoKFthLXpBLVpcXC0wLTldK1xcLikrW2EtekEtWl17Mix9KSkkLztcclxuICAgICAgICAgICAgICAgIHJldHVybiByZS50ZXN0KGVtYWlsKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3ZhbGlkYXRlRmllbGQgPSBmdW5jdGlvbiAoIGZvcm0sIGZpZWxkICkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBjdXJGb3JtSXRlbUJsb2NrID0gJCggdGhpcyApLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSBmaWVsZC5hdHRyKCAndHlwZScpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRhZ05hbWUgPSBmaWVsZFswXS50YWdOYW1lO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKCB0eXBlID09PSAnZW1haWwnIHx8IHR5cGUgPT09ICd0ZXh0JyB8fCB0eXBlID09PSAnbnVtYmVyJyApe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggZmllbGQudmFsKCkgPT09ICcnICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9tYWtlTm90VmFsaWQoIGZpZWxkICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKCB0eXBlID09PSAnZW1haWwnICl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoICFfdmFsaWRhdGVFbWFpbCggZmllbGQudmFsKCkgKSApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbWFrZU5vdFZhbGlkKCBmaWVsZCApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKCB0eXBlID09PSAnbnVtYmVyJyApe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBmaWVsZC52YWwoKSA8PSAwICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbWFrZU5vdFZhbGlkKCBmaWVsZCApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKCB0YWdOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT0gJ3NlbGVjdCcgKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIGZpZWxkLnZhbCgpID09PSAwICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9tYWtlTm90VmFsaWQoIGZpZWxkICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIF9tYWtlVmFsaWQoIGZpZWxkICk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIF9maWVsZHMuZmlsdGVyKCAnLm5vdC12YWxpZCcgKS5sZW5ndGggPT09IDAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9uZXh0U3RlcCggY3VyRm9ybUl0ZW1CbG9jayApO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9vbkV2ZW50cyA9IGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgX29iai5vbiggJ3N1Ym1pdCcsIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX2ZpZWxkcy5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoIHRoaXMgKS5yZW1vdmVDbGFzcyggJ25vdC10b3VjaGVkJyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGZvY3Vzb3V0OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCh0aGlzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1ckZvcm0gPSBjdXJJdGVtLnBhcmVudHMoICcucGxhY2Utb3JkZXJfX2Zvcm0taXRlbScgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF92YWxpZGF0ZUZpZWxkKCBjdXJGb3JtLCBjdXJJdGVtICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAga2V5dXA6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCh0aGlzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1ckZvcm0gPSBjdXJJdGVtLnBhcmVudHMoICcucGxhY2Utb3JkZXJfX2Zvcm0taXRlbScgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF92YWxpZGF0ZUZpZWxkKCBjdXJGb3JtLCBjdXJJdGVtICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9pbnB1dHMub24oIHtcclxuICAgICAgICAgICAgICAgICAgICBmb2N1c291dDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGV0dGVyQ291bnRlciA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaW5wdXRzLmVhY2goIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBjdXJJdGVtLnZhbCgpLmxlbmd0aCA+IDAgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXR0ZXJDb3VudGVyID0gbGV0dGVyQ291bnRlciArIDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggbGV0dGVyQ291bnRlciA9PT0gMCApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pbnB1dHMucmVtb3ZlQ2xhc3MoICdub3QtdmFsaWQnICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9zZWxlY3Qub24oICdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJTZWxlY3QgPSAkKCB0aGlzICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1clBhcmVudCA9IGN1clNlbGVjdC5wYXJlbnRzKCAnLndlYnN0ZXJzLXNlbGVjdCcgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY3VyU2VsZWN0LnJlbW92ZUNsYXNzKCAnbm90LXZhbGlkIG5vdC10b3VjaGVkJyApO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1clBhcmVudC5yZW1vdmVDbGFzcyggJ25vdC12YWxpZCBub3QtdG91Y2hlZCcgKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX2NoZWNrYm94Lm9uKCAnY2hhbmdlJywgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VyU2VsZWN0ID0gJCggdGhpcyApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJQYXJlbnQgPSBjdXJTZWxlY3QucGFyZW50cyggJy53ZWJzdGVycy1zZWxlY3QnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGN1clNlbGVjdC5yZW1vdmVDbGFzcyggJ25vdC12YWxpZCBub3QtdG91Y2hlZCcgKTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJQYXJlbnQucmVtb3ZlQ2xhc3MoICdub3QtdmFsaWQgbm90LXRvdWNoZWQnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9idG4ub24oICdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VyQnRuID0gJCggdGhpcyApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJGb3JtSXRlbUJsb2NrID0gY3VyQnRuLnBhcmVudHMoICcucGxhY2Utb3JkZXJfX2Zvcm0taXRlbScgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjdXJGb3JtSXRlbUJsb2NrLmZpbmQoICdbZGF0YS1yZXF1aXJlZF0nICkudmFsKCkgPT0gMCB8fCBjdXJGb3JtSXRlbUJsb2NrLmZpbmQoICdbZGF0YS1yZXF1aXJlZF0nICkudmFsKCkgPT0gJycgKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hZGROb3RUb3VjaGVkQ2xhc3MoIGN1ckZvcm1JdGVtQmxvY2sgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggX2ZpZWxkcy5oYXNDbGFzcygnbm90LXRvdWNoZWQnKSB8fCBfZmllbGRzLmhhc0NsYXNzKCdub3QtdmFsaWQnKSB8fCBfc2VsZWN0Lmhhc0NsYXNzKCdub3QtdmFsaWQnKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLm5vdC10b3VjaGVkOmZpcnN0JykuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX29iai5maW5kKCcubm90LXZhbGlkOmZpcnN0JykuZm9jdXMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9uZXh0U3RlcCggY3VyRm9ybUl0ZW1CbG9jayApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX2NoYW5nZU51bWJlclBsdXMub24oICdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VyQnRuID0gJCggdGhpcyApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJQYXJlbnQgPSBjdXJCdG4ucGFyZW50cyggJy5wbGFjZS1vcmRlcl9fZm9ybS1maWVsZHNldCcgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VySW5wdXQgPSBjdXJQYXJlbnQuZmluZCggJ2lucHV0W3R5cGU9bnVtYmVyXScgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyTnVtID0gKyBjdXJJbnB1dC52YWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY3VySW5wdXQudmFsKCBjdXJOdW0gKyAxICk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VySW5wdXQucmVtb3ZlQ2xhc3MoICdub3QtdmFsaWQnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX2NoYW5nZU51bWJlck1pbnVzLm9uKCAnY2xpY2snLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckJ0biA9ICQoIHRoaXMgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyUGFyZW50ID0gY3VyQnRuLnBhcmVudHMoICcucGxhY2Utb3JkZXJfX2Zvcm0tZmllbGRzZXQnICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cklucHV0ID0gY3VyUGFyZW50LmZpbmQoICdpbnB1dFt0eXBlPW51bWJlcl0nICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ck51bSA9ICsgY3VySW5wdXQudmFsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggY3VyTnVtID4gMCApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJJbnB1dC52YWwoIGN1ck51bSAtIDEgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VySW5wdXQucmVtb3ZlQ2xhc3MoICdub3QtdmFsaWQnICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9maWxlLm9uKCAnY2hhbmdlJywgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VyRWxlbSA9ICQoIHRoaXMgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyVGV4dCA9IGN1ckVsZW0ubmV4dCggJ3NwYW4nICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGN1clRleHQudGV4dCggY3VyRWxlbS52YWwoKSApXHJcblxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXHJcblxyXG4gICAgICAgIF9jb25zdHJ1Y3RvcigpO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgdmFyIENvbnRhY3RTaWduID0gZnVuY3Rpb24gKG9iaikge1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgICAgIF9vYmogPSBvYmosXHJcbiAgICAgICAgICAgIF9hcmVhID0gX29iai5maW5kKCcucGxhY2Utb3JkZXJfX3NpZ24tYXJlYScpLFxyXG4gICAgICAgICAgICBfbm90ZSA9IF9vYmouZmluZCgnc3BhbicpLFxyXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICksXHJcbiAgICAgICAgICAgIF9yZXN1bHQ7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcbiAgICAgICAgdmFyIF9kZXN0cm95U2lnbmF0dXJlID0gIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9hcmVhLnNpZ25hdHVyZSgnZGVzdHJveScpO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX29uRXZlbnRzID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZGVzdHJveVNpZ25hdHVyZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaW5pdFNpZ25hdHVyZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX2FyZWEub24oIHtcclxuICAgICAgICAgICAgICAgICAgICAnY2xpY2snOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9ub3RlLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICdtb3VzZWxlYXZlJzogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoICFfYXJlYS5zaWduYXR1cmUoJ2lzRW1wdHknKSApe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZXN1bHQgPSBfYXJlYS5zaWduYXR1cmUoJ3RvU1ZHJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYXJlYS5yZW1vdmVDbGFzcyggJ2NvbnRhY3RfX3NpZ24tYXJlYS1yZWQnICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCAnLnNpZ25fdmFsJyApLnZhbCggX3Jlc3VsdCApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYXJlYS5hZGRDbGFzcyggJ2NvbnRhY3RfX3NpZ24tYXJlYS1yZWQnICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCAnLnNpZ25fdmFsJyApLnZhbCgnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9vYmpbMF0ub2JqID0gX3NlbGY7XHJcbiAgICAgICAgICAgICAgICBfb25FdmVudHMoKTtcclxuICAgICAgICAgICAgICAgIF9pbml0U2lnbmF0dXJlKCk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfaW5pdFNpZ25hdHVyZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgX2FyZWEuc2lnbmF0dXJlKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpY2tuZXNzOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2I3YjdiNydcclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgX2luaXQoKTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIFNsaWRlcnMgPSBmdW5jdGlvbiggb2JqICkge1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxyXG4gICAgICAgICAgICBfcGFydG5lcnNTbGlkZXIgPSBfb2JqLmZpbmQoICcucGFydG5lcnNfX3N3aXBlcicgKSxcclxuICAgICAgICAgICAgX3N1Yk1lbnVTbGlkZXIgPSBfb2JqLmZpbmQoICcuc3ViLW1lbnVfX3N3aXBlcicgKSxcclxuICAgICAgICAgICAgX2NhdGFsb2dTbGlkZXIgPSBfb2JqLmZpbmQoICcuY2F0YWxvZ19fc3dpcGVyJyApLFxyXG4gICAgICAgICAgICBfcHJvbW9TbGlkZXIgPSBfb2JqLmZpbmQoICcucHJvbW9fX3N3aXBlcicgKSxcclxuICAgICAgICAgICAgX3JhdGVzU2xpZGVyID0gX29iai5maW5kKCAnLnJhdGVzX19zd2lwZXInICksXHJcbiAgICAgICAgICAgIF9wYXJ0bmVyc1ByZXYgPSBfb2JqLmZpbmQoICcucGFydG5lcnNfX3N3aXBlci1wcmV2JyApLFxyXG4gICAgICAgICAgICBfY2F0YWxvZ1ByZXYgPSBfb2JqLmZpbmQoICcuY2F0YWxvZ19fc3dpcGVyLXByZXYnICksXHJcbiAgICAgICAgICAgIF9wcm9tb1ByZXYgPSBfb2JqLmZpbmQoICcucHJvbW9fX3N3aXBlci1wcmV2JyApLFxyXG4gICAgICAgICAgICBfcmF0ZXNQcmV2ID0gX29iai5maW5kKCAnLnJhdGVzX19zd2lwZXItcHJldicgKSxcclxuICAgICAgICAgICAgX3BhcnRuZXJzTmV4dCA9IF9vYmouZmluZCggJy5wYXJ0bmVyc19fc3dpcGVyLW5leHQnICksXHJcbiAgICAgICAgICAgIF9jYXRhbG9nTmV4dCA9IF9vYmouZmluZCggJy5jYXRhbG9nX19zd2lwZXItbmV4dCcgKSxcclxuICAgICAgICAgICAgX3Byb21vTmV4dCA9IF9vYmouZmluZCggJy5wcm9tb19fc3dpcGVyLW5leHQnICksXHJcbiAgICAgICAgICAgIF9yYXRlc05leHQgPSBfb2JqLmZpbmQoICcucmF0ZXNfX3N3aXBlci1uZXh0JyApLFxyXG4gICAgICAgICAgICBfcGFydG5lcnMsXHJcbiAgICAgICAgICAgIF9jYXRhbG9nLFxyXG4gICAgICAgICAgICBfc3ViTWVudSxcclxuICAgICAgICAgICAgX3Byb21vLFxyXG4gICAgICAgICAgICBfcmF0ZXMsXHJcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKCB3aW5kb3cgKTtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcclxuICAgICAgICB2YXIgX2luaXRTbGlkZXIgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfcGFydG5lcnMgPSBuZXcgU3dpcGVyICggX3BhcnRuZXJzU2xpZGVyLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXk6IDEwMDAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHNwZWVkOiA1MDAsXHJcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0OiAnc2xpZGUnLFxyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6ICdhdXRvJyxcclxuICAgICAgICAgICAgICAgICAgICBsb29wOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvb3BlZFNsaWRlczogMjAsXHJcbiAgICAgICAgICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiA4MCxcclxuICAgICAgICAgICAgICAgICAgICBuZXh0QnV0dG9uOiBfcGFydG5lcnNOZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgIHByZXZCdXR0b246IF9wYXJ0bmVyc1ByZXZcclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfY2F0YWxvZyA9IG5ldyBTd2lwZXIgKCBfY2F0YWxvZ1NsaWRlciwge1xyXG4gICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5OiAxMDAwMCxcclxuICAgICAgICAgICAgICAgICAgICBzcGVlZDogNTAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdDogJ3NsaWRlJyxcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAzLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvb3A6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dEJ1dHRvbjogX2NhdGFsb2dOZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgIHByZXZCdXR0b246IF9jYXRhbG9nUHJldixcclxuICAgICAgICAgICAgICAgICAgICBicmVha3BvaW50czoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA3Njc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgMTE5OToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9wcm9tbyA9IG5ldyBTd2lwZXIgKCBfcHJvbW9TbGlkZXIsIHtcclxuICAgICAgICAgICAgICAgICAgICBhdXRvcGxheTogMTAwMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgc3BlZWQ6IDUwMCxcclxuICAgICAgICAgICAgICAgICAgICBlZmZlY3Q6ICdzbGlkZScsXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcclxuICAgICAgICAgICAgICAgICAgICBsb29wOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIG5leHRCdXR0b246IF9wcm9tb05leHQsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJldkJ1dHRvbjogX3Byb21vUHJldlxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9yYXRlcyA9IG5ldyBTd2lwZXIgKCBfcmF0ZXNTbGlkZXIsIHtcclxuICAgICAgICAgICAgICAgICAgICBhdXRvcGxheTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgc3BlZWQ6IDUwMCxcclxuICAgICAgICAgICAgICAgICAgICBlZmZlY3Q6ICdzbGlkZScsXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogJ2F1dG8nLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvb3A6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIG5leHRCdXR0b246IF9yYXRlc05leHQsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJldkJ1dHRvbjogX3JhdGVzUHJldlxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9zdWJNZW51ID0gbmV3IFN3aXBlciAoIF9zdWJNZW51U2xpZGVyLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXk6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNwZWVkOiA1MDAsXHJcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0OiAnc2xpZGUnLFxyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6ICdhdXRvJyxcclxuICAgICAgICAgICAgICAgICAgICBzaW11bGF0ZVRvdWNoOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBvblNsaWRlQ2hhbmdlU3RhcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAnc3RhcnQnICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdWJNZW51U2xpZGVyWzBdLnN3aXBlci5zbGlkZVRvKCBfc3ViTWVudS5maW5kKCAnLmFjdGl2ZScgKS5pbmRleCgpICwgMjAwLCBmYWxzZSApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgb25TbGlkZUNoYW5nZUVuZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9vYmoucmVtb3ZlQ2xhc3MoICdlbmQnICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBvblJlYWNoQmVnaW5uaW5nOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX29iai5hZGRDbGFzcyggJ3N0YXJ0JyApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAnZW5kJyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmFkZENsYXNzKCAnc3RhcnQnICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sMzAwIClcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBvblJlYWNoRW5kOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX29iai5hZGRDbGFzcyggJ2VuZCcgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcyggJ3N0YXJ0JyApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LDMwMCApXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX29uRXZlbnQgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIF93aW5kb3cub3V0ZXJXaWR0aCgpIDw9IDc2NyAgKXtcclxuICAgICAgICAgICAgICAgICAgICBfaW5pdFNsaWRlciAoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3Jlc2l6ZSc6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBfd2luZG93Lm91dGVyV2lkdGgoKSA+PSA3NjcgICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZGVzdHJveVNsaWRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2luaXRTbGlkZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IClcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9kZXN0cm95U2xpZGVyID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX3N1Yk1lbnVTbGlkZXJbIDAgXS5zd2lwZXIuZGVzdHJveSggZmFsc2UsIHRydWUgKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBfb25FdmVudCgpO1xyXG4gICAgICAgICAgICAgICAgX2luaXRTbGlkZXIoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXHJcblxyXG4gICAgICAgIF9pbml0KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBTb3J0ID0gZnVuY3Rpb24gKG9iaikge1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxyXG4gICAgICAgICAgICBfc2l0ZSA9ICQoICcuc2l0ZScgKSxcclxuICAgICAgICAgICAgX3dpbmRvdyA9ICQoIHdpbmRvdyApO1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xyXG4gICAgICAgIHZhciBfY29uc3RydWN0ID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9vbkV2ZW50KCk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfb25FdmVudCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9zaXRlLm9uKFxyXG4gICAgICAgICAgICAgICAgICAgICdjbGljaycsIGZ1bmN0aW9uICggZSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggX29iai5oYXNDbGFzcyggJ29wZW4nICkgJiYgJCggZS50YXJnZXQgKS5jbG9zZXN0KCBfb2JqICkubGVuZ3RoID09IDAgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jbG9zZUxhbmd1YWdlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfb2JqLm9uKCAnY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJFbGVtID0gJCggdGhpcyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggY3VyRWxlbS5oYXNDbGFzcyggJ29wZW4nICkgJiYgX3dpbmRvdy53aWR0aCgpIDwgMTIwMCApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VMYW5ndWFnZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIF93aW5kb3cud2lkdGgoKSA8IDEyMDAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9vcGVuTGFuZ3VhZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSApXHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfY2xvc2VMYW5ndWFnZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcyggJ29wZW4nICk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9vcGVuTGFuZ3VhZ2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoICdvcGVuJyApXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xyXG5cclxuICAgICAgICBfY29uc3RydWN0KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBIZWFkU2hvdExvYWRlciA9IGZ1bmN0aW9uIChvYmopIHtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcclxuICAgICAgICB2YXIgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX2JvZHkgPSAkKCAnYm9keScgKSxcclxuICAgICAgICAgICAgX2ZpbGVMaW5rID0gX2JvZHkuZGF0YSggJ2FjdGlvbicgKSxcclxuICAgICAgICAgICAgX2J0bk1vcmUgPSBfb2JqLmZpbmQoICcuaGVhZC1zaG90X19jb21tYW5kLW1vcmUnICksXHJcbiAgICAgICAgICAgIF9wcmVsb2FkZXIgPSBfb2JqLmZpbmQoICcucHJlbG9hZGVyJyApLFxyXG4gICAgICAgICAgICBfd3JhcHBlciA9IF9vYmouZmluZCggJy5oZWFkLXNob3RfX2NvbW1hbmQtd3JhcCcgKSxcclxuICAgICAgICAgICAgX2NvdmVyID0gX29iai5maW5kKCAnLmhlYWQtc2hvdF9fY29tbWFuZC1jb3ZlcicgKSxcclxuICAgICAgICAgICAgX2ZpcnN0R3JvdXAgPSB0cnVlLFxyXG4gICAgICAgICAgICBfcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xyXG4gICAgICAgIHZhciBfY29uc3RydWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX2xvYWROZXdJdGVtcygpO1xyXG4gICAgICAgICAgICAgICAgX29uRXZlbnQoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2FkZEdhbGxlcnlDb250ZW50ID0gZnVuY3Rpb24gKCBtc2cgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGhhc0l0ZW1zID0gbXNnLmhhc19pdGVtcyxcclxuICAgICAgICAgICAgICAgICAgICBnZXRJdGVtcyA9IG1zZy5pdGVtcyxcclxuICAgICAgICAgICAgICAgICAgICBuZXdCbG9jaztcclxuXHJcbiAgICAgICAgICAgICAgICAkLmVhY2goIGdldEl0ZW1zLCBmdW5jdGlvbiggKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBuZXdCbG9jayA9ICQoICc8ZGl2IGNsYXNzPVwiaGVhZC1zaG90X19jb21tYW5kLWl0ZW0gbmV3XCI+JytcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxpbWcgc3JjPVwiJysgY3VySXRlbS5kdW1teSArJ1wiIGFsdD1cIicrIGN1ckl0ZW0udGl0bGUgKydcIi8+JytcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX3dyYXBwZXIuYXBwZW5kKCBuZXdCbG9jayApO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3SXRlbXMgPSBfd3JhcHBlci5maW5kKCAnLm5ldycgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgIF9oZWlnaHRBbmltYXRpb24oIGhhc0l0ZW1zLCBuZXdJdGVtcyApO1xyXG4gICAgICAgICAgICAgICAgfSwgNTUwICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX29iai5hdHRyKCAnZGF0YS1sb2FkZWQtZ3JvdXAnLCArX29iai5hdHRyKCAnZGF0YS1sb2FkZWQtZ3JvdXAnICkgKyAxICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfaGVpZ2h0QW5pbWF0aW9uID0gZnVuY3Rpb24oIGhhc0l0ZW1zLCBuZXdJdGVtcyApe1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IDUwMDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIF9maXJzdEdyb3VwICl7XHJcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gPSAxXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgX2NvdmVyLmFuaW1hdGUoIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IF93cmFwcGVyLm91dGVySGVpZ2h0KClcclxuICAgICAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY292ZXIuY3NzKCAnaGVpZ2h0JywgJycgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0l0ZW1zLmVhY2goIGZ1bmN0aW9uKCBpICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2hvd05ld0l0ZW1zKCAkKCB0aGlzICksIGkgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBoYXNJdGVtcyA9PSAwICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVtb3ZlQnRuTW9yZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIF9maXJzdEdyb3VwICl7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9maXJzdEdyb3VwID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgNTAwICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfc2hvd05ld0l0ZW1zID0gZnVuY3Rpb24oIGl0ZW0sIGluZGV4ICl7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGRlbGF5ID0gMTAwO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggX2ZpcnN0R3JvdXAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsYXkgPSAxXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5yZW1vdmVDbGFzcyggJ25ldycgKTtcclxuICAgICAgICAgICAgICAgIH0sIGluZGV4ICogZGVsYXkgKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9sb2FkTmV3SXRlbXMgPSBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBwYXRoICA9IF9maWxlTGluaztcclxuXHJcbiAgICAgICAgICAgICAgICBfcHJlbG9hZGVyLmFkZENsYXNzKCAnYWN0aXZlJyApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9yZXF1ZXN0LmFib3J0KCk7XHJcbiAgICAgICAgICAgICAgICBfcmVxdWVzdCA9ICQuYWpheCgge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogcGF0aCxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ2dhbGxlcnknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaGVhZHNob3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlOiBfb2JqLmF0dHIoICdkYXRhLWxvYWRlZC1ncm91cCcgKSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgdGltZW91dDogMjAwMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJHRVRcIixcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoIG1zZyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jb3Zlci5oZWlnaHQoIF9jb3Zlci5oZWlnaHQoKSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2FkZEdhbGxlcnlDb250ZW50KCBtc2cgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKCBYTUxIdHRwUmVxdWVzdCApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIFhNTEh0dHBSZXF1ZXN0LnN0YXR1c1RleHQgIT0gJ2Fib3J0JyApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCAnRXJyb3IhJyApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3JlbW92ZUJ0bk1vcmUgPSBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgIF9idG5Nb3JlLmNzcyggJ29wYWNpdHknLCAwICk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2J0bk1vcmUuY3NzKCAncGFkZGluZycsIDAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2J0bk1vcmUuYW5pbWF0ZSgge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDBcclxuICAgICAgICAgICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA1MDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2J0bk1vcmUucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSwgMzAwICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfb25FdmVudCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9idG5Nb3JlLm9uKCAnY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9sb2FkTmV3SXRlbXMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xyXG5cclxuICAgICAgICBfY29uc3RydWN0KCk7XHJcbiAgICB9O1xyXG5cclxufSApKCk7IiwiKCBmdW5jdGlvbigpe1xyXG5cclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgICQoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAkLmVhY2goICQoICcubWVkaWEtZ2FsbGVyeScgKSwgZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgIG5ldyBNZWRpYUdhbGxlcnkgKCAkKCB0aGlzICkgKVxyXG5cclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgfSApO1xyXG5cclxuICAgIHZhciBNZWRpYUdhbGxlcnkgPSBmdW5jdGlvbiggb2JqICkge1xyXG5cclxuICAgICAgICB2YXIgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX2JvZHkgPSAkKCAnYm9keScgKSxcclxuICAgICAgICAgICAgX3dyYXBwZXIgPSBfb2JqLmZpbmQoICcubWVkaWEtZ2FsbGVyeV9fd3JhcCcgKSxcclxuICAgICAgICAgICAgX3NpemVyID0gJCggJzxkaXYgY2xhc3M9XCJtZWRpYS1nYWxsZXJ5X19zaXplclwiPjwvZGl2PicgKSxcclxuICAgICAgICAgICAgX3N3aXRjaGVyID0gX29iai5maW5kKCAnLm1lZGlhLWdhbGxlcnlfX3N3aXRjaGVyJyApLFxyXG4gICAgICAgICAgICBfc3dpdGNoQnRuID0gX3N3aXRjaGVyLmZpbmQoICdidXR0b24nICksXHJcbiAgICAgICAgICAgIF9jb3ZlciA9IF9vYmouZmluZCggJy5tZWRpYS1nYWxsZXJ5X19jb3ZlcicgKSxcclxuICAgICAgICAgICAgX3ByZWxvYWRlciA9IF9vYmouZmluZCggJy5wcmVsb2FkZXInICksXHJcbiAgICAgICAgICAgIF9idG5Nb3JlID0gX29iai5maW5kKCAnLm1lZGlhLWdhbGxlcnlfX21vcmUnICksXHJcbiAgICAgICAgICAgIF9maWxlTGluayA9IF9ib2R5LmRhdGEoICdhY3Rpb24nICksXHJcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKCB3aW5kb3cgKSxcclxuICAgICAgICAgICAgX2lzR2FsbGVyeSA9IGZhbHNlLFxyXG4gICAgICAgICAgICBfZmlyc3RHcm91cCA9IHRydWUsXHJcbiAgICAgICAgICAgIF9maWx0ZXJGbGFnID0gdHJ1ZSxcclxuICAgICAgICAgICAgX3JlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuXHJcbiAgICAgICAgdmFyIF9vbkV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfc3dpdGNoQnRuLm9uKCAnY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJCdG4gPSAkKCB0aGlzICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1clR5cGUgPSBjdXJCdG4uZGF0YSggJ3R5cGUnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9zd2l0Y2hCdG4ucmVtb3ZlQ2xhc3MoICdhY3RpdmUnICk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VyQnRuLmFkZENsYXNzKCAnYWN0aXZlJyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfb2JqLmF0dHIoICdkYXRhLWxvYWRlZC1ncm91cCcsIDAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2xvYWROZXdJdGVtcyggY3VyVHlwZSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfZmlsdGVyRmxhZyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX2J0bk1vcmUub24oIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb2FkTmV3SXRlbXMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9maWx0ZXJGbGFnID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9vYmoub24oICdjbGljaycsICcubWVkaWEtZ2FsbGVyeV9faXRlbScsIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBTd2lwZXJQb3B1cCggJCggdGhpcyApLCAkKCB0aGlzICkuaW5kZXgoKSAtIDEgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2ZpbHRlckZsYWcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2FkZEdhbGxlcnlDb250ZW50ID0gZnVuY3Rpb24gKCBtc2cgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBfb2JqLmF0dHIoICdkYXRhLWxvYWRlZC1ncm91cCcgKSAhPT0gMCAmJiBfaXNHYWxsZXJ5ICl7XHJcbiAgICAgICAgICAgICAgICAgICAgX2Rlc3Ryb3lHYWxsZXJ5KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGhhc0l0ZW1zID0gbXNnLmhhc19pdGVtcyxcclxuICAgICAgICAgICAgICAgICAgICBnZXRJdGVtcyA9IG1zZy5pdGVtcyxcclxuICAgICAgICAgICAgICAgICAgICBuZXdCbG9jaztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIF9maWx0ZXJGbGFnICl7XHJcbiAgICAgICAgICAgICAgICAgICAgX3dyYXBwZXIuaHRtbCggX3NpemVyICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgJC5lYWNoKCBnZXRJdGVtcywgZnVuY3Rpb24oICl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3QmxvY2sgPSAkKCAnPGRpdiBjbGFzcz1cIm1lZGlhLWdhbGxlcnlfX2l0ZW0gbmV3ICcrIGN1ckl0ZW0udHlwZSArJ1wiIHRpdGxlPVwiJyArIHRoaXMudGl0bGUgKyAnXCIgZGF0YS1ocmVmPVwiJysgY3VySXRlbS5kdW1teV9fYmlnICsnXCI+JytcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxpbWcgc3JjPVwiJysgY3VySXRlbS5kdW1teSArJ1wiIGFsdD1cIicrIGN1ckl0ZW0udHlwZSArJ1wiIC8+JytcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjdXJJdGVtLnZpZGVvID09IDEgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3QmxvY2suYWRkQ2xhc3MoICdtZWRpYS1nYWxsZXJ5X19pdGVtX3ZpZGVvJyApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX3dyYXBwZXIuYXBwZW5kKCBuZXdCbG9jayApO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3SXRlbXMgPSBfd3JhcHBlci5maW5kKCAnLm5ldycgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgIF9oZWlnaHRBbmltYXRpb24oIGhhc0l0ZW1zLCBuZXdJdGVtcyApO1xyXG4gICAgICAgICAgICAgICAgfSwgNTUwICk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICBfaW5pdEdhbGxlcnkoKTtcclxuICAgICAgICAgICAgICAgIH0sIDUwMCApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9vYmouYXR0ciggJ2RhdGEtbG9hZGVkLWdyb3VwJywgK19vYmouYXR0ciggJ2RhdGEtbG9hZGVkLWdyb3VwJyApKzEgKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9kZXN0cm95R2FsbGVyeSA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF93cmFwcGVyLmlzb3RvcGUoICdkZXN0cm95JyApO1xyXG4gICAgICAgICAgICAgICAgX2lzR2FsbGVyeSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2hlaWdodEFuaW1hdGlvbiA9IGZ1bmN0aW9uKCBoYXNJdGVtcywgbmV3SXRlbXMgKXtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZHVyYXRpb24gPSA1MDA7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBfZmlyc3RHcm91cCApe1xyXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gMVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIF9jb3Zlci5hbmltYXRlKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBfd3JhcHBlci5vdXRlckhlaWdodCgpXHJcbiAgICAgICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2NvdmVyLmNzcyggJ2hlaWdodCcsICcnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdJdGVtcy5lYWNoKCBmdW5jdGlvbiggaSApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3Nob3dOZXdJdGVtcyggJCggdGhpcyApLCBpICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggaGFzSXRlbXMgPT0gMCApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlbW92ZUJ0bk1vcmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggaGFzSXRlbXMgPiAwICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3Nob3dCdG5Nb3JlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggX2ZpcnN0R3JvdXAgKXtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2ZpcnN0R3JvdXAgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9LCA1MDAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9zaG93TmV3SXRlbXMgPSBmdW5jdGlvbiggaXRlbSwgaW5kZXggKXtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZGVsYXkgPSAxMDA7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBfZmlyc3RHcm91cCApIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxheSA9IDFcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtLnJlbW92ZUNsYXNzKCAnbmV3JyApO1xyXG4gICAgICAgICAgICAgICAgfSwgaW5kZXggKiBkZWxheSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2luaXRHYWxsZXJ5ID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciB3cmFwSXRlbSA9ICcubWVkaWEtZ2FsbGVyeV9faXRlbSc7XHJcblxyXG4gICAgICAgICAgICAgICAgX2lzR2FsbGVyeSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgX3dyYXBwZXIuaXNvdG9wZSgge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1TZWxlY3Rvcjogd3JhcEl0ZW0sXHJcbiAgICAgICAgICAgICAgICAgICAgcGVyY2VudFBvc2l0aW9uOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hc29ucnk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uV2lkdGg6ICcubWVkaWEtZ2FsbGVyeV9fc2l6ZXInXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9wcmVsb2FkZXIucmVtb3ZlQ2xhc3MoICdhY3RpdmUnICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfc2hvd0J0bk1vcmUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX2J0bk1vcmUucmVtb3ZlQ2xhc3MoICdoaWRlJyApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3JlbW92ZUJ0bk1vcmUgPSBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgIF9idG5Nb3JlLmFkZENsYXNzKCAnaGlkZScgKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9sb2FkTmV3SXRlbXMgPSBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBwYXRoICA9IF9maWxlTGluaztcclxuXHJcbiAgICAgICAgICAgICAgICBfcHJlbG9hZGVyLmFkZENsYXNzKCAnYWN0aXZlJyApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9yZXF1ZXN0LmFib3J0KCk7XHJcbiAgICAgICAgICAgICAgICBfcmVxdWVzdCA9ICQuYWpheCgge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogcGF0aCxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ2dhbGxlcnknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlOiBfb2JqLmF0dHIoICdkYXRhLWxvYWRlZC1ncm91cCcgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogX3N3aXRjaEJ0bi5maWx0ZXIoICcuYWN0aXZlJyApLmRhdGEoICd0eXBlJyApXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDIwMDAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKCBtc2cgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY292ZXIuaGVpZ2h0KCBfY292ZXIuaGVpZ2h0KCkgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hZGRHYWxsZXJ5Q29udGVudCggbXNnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICggWE1MSHR0cFJlcXVlc3QgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBYTUxIdHRwUmVxdWVzdC5zdGF0dXNUZXh0ICE9ICdhYm9ydCcgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydCggJ0Vycm9yIScgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9sb2FkTmV3SXRlbXMoKTtcclxuICAgICAgICAgICAgICAgIF9vbkV2ZW50cygpO1xyXG5cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgX2luaXQoKTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBTd2lwZXJQb3B1cCA9IGZ1bmN0aW9uICggb2JqLCBpbmRleCApIHtcclxuXHJcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX2JvZHkgPSAkKCAnYm9keScgKSxcclxuICAgICAgICAgICAgX3dyYXBwZXIgPSBfb2JqLnBhcmVudCgpLFxyXG4gICAgICAgICAgICBfZ2FsbGVyeVdyYXAgPSBfb2JqLnBhcmVudHMoICcubWVkaWEtZ2FsbGVyeScgKSxcclxuICAgICAgICAgICAgX2h0bWwgPSAkKCAnaHRtbCcgKSxcclxuICAgICAgICAgICAgX3dpbmRvdyA9ICQoIHdpbmRvdyApLFxyXG4gICAgICAgICAgICBfbGlua3MgPSBfd3JhcHBlci5maW5kKCAnLm1lZGlhLWdhbGxlcnlfX2l0ZW0nICksXHJcbiAgICAgICAgICAgIF9wb3B1cCA9IG51bGwsXHJcbiAgICAgICAgICAgIF9wb3B1cElubmVyID0gbnVsbCxcclxuICAgICAgICAgICAgX3BvcHVwQ2xvc2UgPSBudWxsLFxyXG4gICAgICAgICAgICBfc3dpcGVyV3JhcHBlciA9IG51bGwsXHJcbiAgICAgICAgICAgIF9zd2lwZXJDb250YWluZXIgPSBudWxsLFxyXG4gICAgICAgICAgICBfc3dpcGVyUGFnaW5hdGlvbiA9IG51bGwsXHJcbiAgICAgICAgICAgIF9zd2lwZXJCdG5OZXh0ID0gbnVsbCxcclxuICAgICAgICAgICAgX3N3aXBlckJ0blByZXYgPSBudWxsLFxyXG4gICAgICAgICAgICBfc3dpcGVyID0gbnVsbDtcclxuXHJcbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgIF93aW5kb3cub24oe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uICgpe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX3NldFBpY3R1cmVTaXplV2hlblJlc2l6ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3BvcHVwSW5uZXIucGFyZW50KCkub24oe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jbG9zZVBvcHVwKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBfcG9wdXBJbm5lci5vbih7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiggZXZlbnQgKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3BvcHVwQ2xvc2Uub24oe1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Nsb3NlUG9wdXAoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2FkZGluZ1ZhcmlhYmxlcyA9IGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBfZ2FsbGVyeVdyYXAuYXR0ciggJ2RhdGEtbG9hZGVkLXR5cGUnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3BvcHVwID0gJCggJzxkaXYgY2xhc3M9XCJzd2lwZXItcG9wdXBcIj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3dpcGVyLWNvbnRhaW5lclwiPlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3dpcGVyLXdyYXBwZXJcIj48L2Rpdj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN3aXBlci1wYWdpbmF0aW9uXCI+PC9kaXY+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzd2lwZXItYnV0dG9uLW5leHRcIj48L2Rpdj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN3aXBlci1idXR0b24tcHJldlwiPjwvZGl2PlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JyApO1xyXG4gICAgICAgICAgICAgICAgX3N3aXBlcldyYXBwZXIgPSBfcG9wdXAuZmluZCggJy5zd2lwZXItd3JhcHBlcicgKTtcclxuICAgICAgICAgICAgICAgIF9zd2lwZXJDb250YWluZXIgPSBfcG9wdXAuZmluZCggJy5zd2lwZXItY29udGFpbmVyJyApO1xyXG4gICAgICAgICAgICAgICAgX3N3aXBlclBhZ2luYXRpb24gPSBfcG9wdXAuZmluZCggJy5zd2lwZXItcGFnaW5hdGlvbicgKTtcclxuICAgICAgICAgICAgICAgIF9zd2lwZXJCdG5OZXh0ID0gX3BvcHVwLmZpbmQoICcuc3dpcGVyLWJ1dHRvbi1uZXh0JyApO1xyXG4gICAgICAgICAgICAgICAgX3N3aXBlckJ0blByZXYgPSBfcG9wdXAuZmluZCggJy5zd2lwZXItYnV0dG9uLXByZXYnICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfYWRkVmlkZW8gPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2ZVNsaWRlID0gX3BvcHVwLmZpbmQoICcuc3dpcGVyLXNsaWRlLWFjdGl2ZScgKSxcclxuICAgICAgICAgICAgICAgICAgICBzcmMgPSBhY3RpdmVTbGlkZS5maW5kKCAnW2RhdGEtc3JjXScgKS5kYXRhKCAnc3JjJyApLFxyXG4gICAgICAgICAgICAgICAgICAgIGlubmVyQ29udGVudCA9ICQoICc8aWZyYW1lIHNyYz1cIicgKyBzcmMgKyAnXCI+IGZyYW1lYm9yZGVyPVwiMFwiIGFsbG93ZnVsbHNjcmVlbj48L2lmcmFtZT4nICk7XHJcblxyXG4gICAgICAgICAgICAgICAgJCggJy5zd2lwZXItc2xpZGUtYWN0aXZlJyApLmZpbmQoICcuc3dpcGVyLXBvcHVwX192aWRlbycgKS5wcmVwZW5kKCBpbm5lckNvbnRlbnQgKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9idWlsZFBvcHVwID0gZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICBfYWRkaW5nVmFyaWFibGVzKCk7XHJcbiAgICAgICAgICAgICAgICBfY29udGVudEZpbGxpbmcoKTtcclxuICAgICAgICAgICAgICAgIF9pbml0U3dpcGVyKCk7XHJcbiAgICAgICAgICAgICAgICBfc3dpcGVyLnNsaWRlVG8oIGluZGV4LCAwICk7XHJcbiAgICAgICAgICAgICAgICBfcG9wdXAuYWRkQ2xhc3MoICdhY3RpdmUnICk7XHJcbiAgICAgICAgICAgICAgICBfc2V0U3R5bGVzKCk7XHJcbiAgICAgICAgICAgICAgICBfc3dpcGVyLm9uUmVzaXplKCk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfY2xvc2VQb3B1cCA9IGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgX3BvcHVwLnJlbW92ZUNsYXNzKCAnYWN0aXZlJyApO1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICBfaHRtbC5jc3Moe292ZXJmbG93OiAnJywgcGFkZGluZ1JpZ2h0OiAnJ30pO1xyXG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIH0sIDMwMCApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2NvbnRlbnRGaWxsaW5nID0gZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICAkLmVhY2goIF9saW5rcywgZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlubmVyQ29udGVudCA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFTUkMgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVsb2FkZXIgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoICQoIHRoaXMgKS5oYXNDbGFzcyggJ21lZGlhLWdhbGxlcnlfX2l0ZW1fdmlkZW8nICkgKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZWxvYWRlciA9ICc8aSBjbGFzcz1cImZhIGZhLXNwaW5uZXIgZmEtc3BpblwiPjwvaT4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbm5lckNvbnRlbnQgPSAnPGRpdiBjbGFzcz1cInN3aXBlci1wb3B1cF9fdmlkZW9cIi8+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVNSQyA9ICdkYXRhLXNyYz1cIicgKyAkKHRoaXMpLmRhdGEoIFwiaHJlZlwiICkgKyAnXCInO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJlbG9hZGVyID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyQ29udGVudCA9ICc8aW1nIHNyYz1cIicgKyAkKHRoaXMpLmRhdGEoIFwiaHJlZlwiICkgKyAnXCI+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVNSQyA9ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdJdGVtID0gJCggJzxkaXYgY2xhc3M9XCJzd2lwZXItc2xpZGVcIj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN3aXBlci1wb3B1cF9faW5uZXJcIiAnICsgZGF0YVNSQyArICc+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIGNsYXNzPVwic3dpcGVyLXBvcHVwX19jbG9zZVwiPjwvYT5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgKyBwcmVsb2FkZXIgKyAnXFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICsgaW5uZXJDb250ZW50ICsgJ1xcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzd2lwZXItc2xpZGVfX3RpdGxlXCI+JyArICQoIHRoaXMgKS5hdHRyKCAndGl0bGUnICkgKyAnPC9zcGFuPlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9zd2lwZXJXcmFwcGVyLmFwcGVuZCggbmV3SXRlbSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBuZXdJdGVtLmZpbmQoICdpbWcnICkub24oIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZDogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIHRoaXMgKS5hdHRyKCAnZGF0YS13aWR0aCcsIHRoaXMud2lkdGggKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIHRoaXMgKS5hdHRyKCAnZGF0YS1oZWlnaHQnLCB0aGlzLmhlaWdodCApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NldFBpY3R1cmVTaXplKCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgJCggdGhpcyApICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9ib2R5LmFwcGVuZCggX3BvcHVwICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3BvcHVwSW5uZXIgPSBfcG9wdXAuZmluZCggJy5zd2lwZXItcG9wdXBfX2lubmVyJyApO1xyXG4gICAgICAgICAgICAgICAgX3BvcHVwQ2xvc2UgPSBfcG9wdXAuZmluZCggJy5zd2lwZXItcG9wdXBfX2Nsb3NlJyApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2dldFNjcm9sbFdpZHRoID0gZnVuY3Rpb24gKCl7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2RpdicgKSxcclxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxiYXJXaWR0aCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKCBzY3JvbGxEaXYgKTtcclxuICAgICAgICAgICAgICAgIHNjcm9sbGJhcldpZHRoID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCggc2Nyb2xsRGl2ICk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2Nyb2xsYmFyV2lkdGg7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9pbml0U3dpcGVyID0gZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICBfc3dpcGVyID0gbmV3IFN3aXBlciggX3N3aXBlckNvbnRhaW5lciwge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb246IF9zd2lwZXJQYWdpbmF0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIG5leHRCdXR0b246IF9zd2lwZXJCdG5OZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgIHByZXZCdXR0b246IF9zd2lwZXJCdG5QcmV2LFxyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbkNsaWNrYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBvblNsaWRlQ2hhbmdlRW5kOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmVtb3ZlVmlkZW8oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkKCAnLnN3aXBlci1zbGlkZS1hY3RpdmUnICkuZmluZCggJ1tkYXRhLXNyY10nICkubGVuZ3RoICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWRkVmlkZW8oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfYnVpbGRQb3B1cCgpO1xyXG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xyXG4gICAgICAgICAgICAgICAgX29ialsgMCBdLm9iaiA9IF9zZWxmO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfcmVtb3ZlVmlkZW8gPSBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9IF9wb3B1cC5maW5kKCAnLnN3aXBlci1zbGlkZScgKSxcclxuICAgICAgICAgICAgICAgICAgICB2aWRlb0ZyYW1lID0gaXRlbXMuZmluZCggJy5zd2lwZXItcG9wdXBfX3ZpZGVvIGlmcmFtZScgKTtcclxuICAgICAgICAgICAgICAgIHZpZGVvRnJhbWUucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfc2V0UGljdHVyZVNpemUgPSBmdW5jdGlvbiggcGljV2lkdGgsIHBpY0hlaWdodCwgcGljICl7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGsgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggKCBfcG9wdXAud2lkdGgoKS9waWNXaWR0aCApID4gKCBfcG9wdXAuaGVpZ2h0KCkvcGljSGVpZ2h0ICkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgayA9IF9wb3B1cC5oZWlnaHQoKS9waWNIZWlnaHQgO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBrID0gX3BvcHVwLndpZHRoKCkvcGljV2lkdGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBrID49IDEgKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcGljLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwid2lkdGhcIjogcGljV2lkdGgqMC44NSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJoZWlnaHRcIjogcGljSGVpZ2h0KjAuODVcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBwaWMuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ3aWR0aFwiOiBrKnBpY1dpZHRoKjAuODUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaGVpZ2h0XCI6IGsqcGljSGVpZ2h0KjAuODVcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfc2V0UGljdHVyZVNpemVXaGVuUmVzaXplID0gZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICAkLmVhY2goIF9zd2lwZXJXcmFwcGVyLmZpbmQoICdpbWcnICksIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX3NldFBpY3R1cmVTaXplKCAkKCB0aGlzICkuZGF0YSggJ3dpZHRoJyApLCAkKCB0aGlzICkuZGF0YSggJ2hlaWdodCcgKSwgJCggdGhpcyApICk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3NldFN0eWxlcyA9IGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgX2h0bWwuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZ1JpZ2h0OiBfZ2V0U2Nyb2xsV2lkdGgoKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICBfaW5pdCgpO1xyXG5cclxuICAgIH07XHJcblxyXG59ICkoKTtcclxuIiwiKCBmdW5jdGlvbigpe1xyXG5cclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgICQoIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgIGlmICggJCggJy52YWxpZGF0aW9uLWZvcm0nICkubGVuZ3RoICl7XHJcbiAgICAgICAgICAgIG5ldyBGb3JtVmFsaWRhdG9yKCAkKCAnLnZhbGlkYXRpb24tZm9ybScgKSApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdmFyIEZvcm1WYWxpZGF0b3IgPSBmdW5jdGlvbiAob2JqKSB7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX3ZhbHVlRmxhZyA9IGZhbHNlLFxyXG4gICAgICAgICAgICBfbm90ZSA9IF9vYmouZmluZCggJyNjb250YWN0LXVzX19ub3RlJyApLFxyXG4gICAgICAgICAgICBfaW5wdXRzID0gX29iai5maW5kKCAnaW5wdXQsIHRleHRhcmVhJyApLFxyXG4gICAgICAgICAgICBfZmllbGRzID0gX29iai5maW5kKCAnW2RhdGEtcmVxdWlyZWRdJyApO1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xyXG4gICAgICAgIHZhciBfY29uc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfb25FdmVudHMoKTtcclxuICAgICAgICAgICAgICAgIF9vYmpbMF0ub2JqID0gX3NlbGY7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9hZGROb3RUb3VjaGVkQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX2ZpZWxkcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggY3VySXRlbS52YWwoKSA9PT0gJycgKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckl0ZW0uYWRkQ2xhc3MoICdub3QtdG91Y2hlZCcgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF92YWxpZGF0ZUZpZWxkKCBjdXJJdGVtICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfb25FdmVudHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfZmllbGRzLm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9jdXM6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJCggdGhpcyApLnJlbW92ZUNsYXNzKCAnbm90LXRvdWNoZWQnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNvdXQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZhbGlkYXRlRmllbGQoIGN1ckl0ZW0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBrZXl1cDogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZhbGlkYXRlRmllbGQoIGN1ckl0ZW0gKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfaW5wdXRzLm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNvdXQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxldHRlckNvdW50ZXIgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2lucHV0cy5lYWNoKCBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggY3VySXRlbS52YWwoKS5sZW5ndGggPiAwICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0dGVyQ291bnRlciA9IGxldHRlckNvdW50ZXIgKyAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGxldHRlckNvdW50ZXIgPT09IDAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaW5wdXRzLnJlbW92ZUNsYXNzKCAnbm90LXZhbGlkJyApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX25vdGUucmVtb3ZlQ2xhc3MoJ3Zpc2libGUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfb2JqLm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VibWl0OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hZGROb3RUb3VjaGVkQ2xhc3MoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAhKF9maWVsZHMuZmlsdGVyKCAnLm5vdC12YWxpZCcgKS5sZW5ndGggPT09IDApICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9ub3RlLmFkZENsYXNzKCd2aXNpYmxlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX2ZpZWxkcy5oYXNDbGFzcygnbm90LXRvdWNoZWQnKSB8fCBfZmllbGRzLmhhc0NsYXNzKCdub3QtdmFsaWQnKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJy5ub3QtdG91Y2hlZDpmaXJzdCcpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJy5ub3QtdmFsaWQ6Zmlyc3QnKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9tYWtlTm90VmFsaWQgPSBmdW5jdGlvbiAoIGZpZWxkICkge1xyXG4gICAgICAgICAgICAgICAgZmllbGQuYWRkQ2xhc3MoICdub3QtdmFsaWQnICk7XHJcbiAgICAgICAgICAgICAgICBmaWVsZC5yZW1vdmVDbGFzcyggJ3ZhbGlkJyApO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfbWFrZVZhbGlkID0gZnVuY3Rpb24gKCBmaWVsZCApIHtcclxuICAgICAgICAgICAgICAgIGZpZWxkLnJlbW92ZUNsYXNzKCAnbm90LXZhbGlkJyApO1xyXG4gICAgICAgICAgICAgICAgZmllbGQuYWRkQ2xhc3MoICd2YWxpZCcgKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3ZhbGlkYXRlRW1haWwgPSBmdW5jdGlvbiAoIGVtYWlsICkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlID0gL14oKFtePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSsoXFwuW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKykqKXwoXCIuK1wiKSlAKChcXFtbMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XSl8KChbYS16QS1aXFwtMC05XStcXC4pK1thLXpBLVpdezIsfSkpJC87XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmUudGVzdChlbWFpbCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF92YWxpZGF0ZUZpZWxkID0gZnVuY3Rpb24gKCBmaWVsZCApIHtcclxuICAgICAgICAgICAgICAgIHZhciB0eXBlID0gZmllbGQuYXR0ciggJ3R5cGUnKSxcclxuICAgICAgICAgICAgICAgICAgICB0YWdOYW1lID0gZmllbGRbMF0udGFnTmFtZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiggdHlwZSA9PT0gJ2VtYWlsJyB8fCB0eXBlID09PSAndGV4dCcgKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIGZpZWxkLnZhbCgpID09PSAnJyApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbWFrZU5vdFZhbGlkKCBmaWVsZCApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiggdHlwZSA9PT0gJ2VtYWlsJyApe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCAhX3ZhbGlkYXRlRW1haWwoIGZpZWxkLnZhbCgpICkgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX21ha2VOb3RWYWxpZCggZmllbGQgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIHRhZ05hbWUudG9Mb2NhbGVMb3dlckNhc2UoKSA9PSAndGV4dGFyZWEnICl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBmaWVsZC52YWwoKSA9PT0gJycgfHwgZmllbGQudmFsKCkubGVuZ3RoIDwgODAgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX21ha2VOb3RWYWxpZCggZmllbGQgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgX21ha2VWYWxpZCggZmllbGQgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiggX2ZpZWxkcy5maWx0ZXIoICcubm90LXZhbGlkJyApLmxlbmd0aCA9PT0gMCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX25vdGUucmVtb3ZlQ2xhc3MoJ3Zpc2libGUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXHJcblxyXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcclxuICAgICAgICBfc2VsZi5jaGVja1ZhbGlkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdmFsaWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgX2ZpZWxkcy5lYWNoKCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkKCB0aGlzICkucmVtb3ZlQ2xhc3MoICdub3QtdG91Y2hlZCcgKTtcclxuICAgICAgICAgICAgICAgIGlmKCAkKCB0aGlzICkuaGFzQ2xhc3MoICdub3QtdmFsaWQnICkgKXtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHZhbGlkO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIF9jb25zdHJ1Y3RvcigpO1xyXG4gICAgfTtcclxuXHJcbn0gKSgpOyIsIiggZnVuY3Rpb24oKXtcclxuXHJcbiAgICAkKCBmdW5jdGlvbigpe1xyXG4gICAgICAgICQoICdzZWxlY3QnICkuZWFjaCggZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgbmV3IFdlYnN0ZXJzU2VsZWN0KCB7XHJcbiAgICAgICAgICAgICAgICBvYmo6ICQoIHRoaXMgKSxcclxuICAgICAgICAgICAgICAgIG9wdGlvblR5cGU6IDEsXHJcbiAgICAgICAgICAgICAgICBzaG93VHlwZTogMlxyXG4gICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgfSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIHZhciBXZWJzdGVyc1NlbGVjdCA9IGZ1bmN0aW9uKCBwYXJhbXMgKXtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcclxuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICBfb2JqID0gcGFyYW1zLm9iaixcclxuICAgICAgICAgICAgX29wdGlvblR5cGUgPSBwYXJhbXMub3B0aW9uVHlwZSB8fCAwLFxyXG4gICAgICAgICAgICBfc2hvd1R5cGUgPSBwYXJhbXMuc2hvd1R5cGUgfHwgMCxcclxuICAgICAgICAgICAgX3Zpc2libGUgPSBwYXJhbXMudmlzaWJsZSB8fCA1LFxyXG4gICAgICAgICAgICBfZGV2aWNlID0gL0FuZHJvaWR8d2ViT1N8aVBob25lfGlQYWR8aVBvZHxCbGFja0JlcnJ5fElFTW9iaWxlfE9wZXJhIE1pbmkvaS50ZXN0KCBuYXZpZ2F0b3IudXNlckFnZW50ICksXHJcbiAgICAgICAgICAgIF90ZXh0ID0gJCggJzxzcGFuIGNsYXNzPVwid2Vic3RlcnMtc2VsZWN0X19pdGVtXCI+PC9zcGFuPicgKSxcclxuICAgICAgICAgICAgX3dyYXAgPSAkKCAnPGRpdiBjbGFzcz1cIndlYnN0ZXJzLXNlbGVjdFwiPjwvZGl2PicgKSxcclxuICAgICAgICAgICAgX3dpbmRvdyA9ICQoIHdpbmRvdyApLFxyXG4gICAgICAgICAgICBfYm9keSA9ICQoICdib2R5JyApLFxyXG4gICAgICAgICAgICBfb3BlbmVkID0gZmFsc2UsXHJcbiAgICAgICAgICAgIF9wb3B1cCwgX3Njcm9sbDtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcclxuICAgICAgICB2YXIgX2FkZFdyYXAgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1clRleHQgPSAnJztcclxuXHJcbiAgICAgICAgICAgICAgICBfb2JqLmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfb2JqLndyYXAoIF93cmFwICk7XHJcbiAgICAgICAgICAgICAgICBfd3JhcCA9IF9vYmoucGFyZW50KCk7XHJcbiAgICAgICAgICAgICAgICBfd3JhcC5hcHBlbmQoICc8ZGl2IGNsYXNzPVwid2Vic3RlcnMtc2VsZWN0X19hcnJvd1wiPjwvZGl2PicgKTtcclxuICAgICAgICAgICAgICAgIF9vYmouYmVmb3JlKCBfdGV4dCApO1xyXG4gICAgICAgICAgICAgICAgX29iai5maW5kKCAnb3B0aW9uJyApLmVhY2goIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKCB0aGlzICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBjdXJJdGVtLmF0dHIoICdzZWxlY3RlZCcgKSA9PSAnc2VsZWN0ZWQnICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1clRleHQgPSBjdXJJdGVtLnRleHQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIGN1clRleHQgPT0gJycgKXtcclxuICAgICAgICAgICAgICAgICAgICBjdXJUZXh0ID0gIF9vYmouZmluZCggJ29wdGlvbicpLmVxKCAwICkudGV4dCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgX3RleHQudGV4dCggY3VyVGV4dCApO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfaGlkZVBvcHVwID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIF9vcGVuZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiggIV9zaG93VHlwZSApe1xyXG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnXHJcbiAgICAgICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBfc2hvd1R5cGUgPT0gMSApe1xyXG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5zdG9wKCB0cnVlLCBmYWxzZSApLnNsaWRlVXAoIDMwMCwgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3BvcHVwLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiggX3Nob3dUeXBlID09IDIgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLnN0b3AoIHRydWUsIGZhbHNlICkuZmFkZU91dCggMzAwLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfcG9wdXAucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIF93cmFwLnJlbW92ZUNsYXNzKCAnd2Vic3RlcnMtc2VsZWN0X29wZW5lZCcgKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9jb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBfb2JqWyAwIF0ub2JqID0gX3NlbGY7XHJcblxyXG4gICAgICAgICAgICAgICAgX2FkZFdyYXAoKTtcclxuICAgICAgICAgICAgICAgIF9zZWxlY3RWaWV3VHlwZSgpO1xyXG4gICAgICAgICAgICAgICAgX29uRXZlbnRzKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9vbkV2ZW50cyA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBfb2JqLm9uKCAnY2hhbmdlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RleHQudGV4dCggJCggdGhpcyApLmZpbmQoICdvcHRpb246c2VsZWN0ZWQnICkudGV4dCgpICk7XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIF9vcHRpb25UeXBlID09IDEgJiYgIV9kZXZpY2UgKXtcclxuICAgICAgICAgICAgICAgICAgICBfd3JhcC5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnY2xpY2snOiBmdW5jdGlvbiggZSApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX29wZW5lZCApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9oaWRlUG9wdXAoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3Nob3dQb3B1cCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnY2xpY2snOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9vcGVuZWQgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaGlkZVBvcHVwKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9zZWxlY3RWaWV3VHlwZSA9IGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoICFfb3B0aW9uVHlwZSB8fCBfZGV2aWNlICl7XHJcbiAgICAgICAgICAgICAgICAgICAgX3NldE1vYmlsZVZpZXcoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiggX29wdGlvblR5cGUgPT0gMSApe1xyXG4gICAgICAgICAgICAgICAgICAgIF9zZXRDdXN0b20xKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9zZXRDdXN0b20xID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIF93cmFwLmFkZENsYXNzKCAnd2Vic3RlcnMtc2VsZWN0X2N1c3RvbScgKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3NldE1vYmlsZVZpZXcgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgX3dyYXAuYWRkQ2xhc3MoICd3ZWJzdGVycy1zZWxlY3RfbW9iaWxlJyApO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfc2hvd1BvcHVwID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RzID0gJCggJ3NlbGVjdCcgKSxcclxuICAgICAgICAgICAgICAgICAgICBsaXN0ID0gJCggJzx1bD48L3VsPicpLFxyXG4gICAgICAgICAgICAgICAgICAgIGN1clNjcm9sbCA9IF93aW5kb3cuc2Nyb2xsVG9wKCksXHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gX3dyYXAub2Zmc2V0KCksXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4SGVpZ2h0ID0gMCxcclxuICAgICAgICAgICAgICAgICAgICBjdXJJbmRleCA9IF9vYmouZmluZCggJ29wdGlvbjpzZWxlY3RlZCcgKS5pbmRleCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIGlkID0gTWF0aC5yb3VuZCggTWF0aC5yYW5kb20oKSAqIDEwMDAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RzLmVhY2goIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIHRoaXMgIT09IF9vYmpbIDAgXSAmJiB0aGlzLm9iai5jaGVja09wZW5lZCgpICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2JqLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKCBfb3BlbmVkICl7XHJcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgX29wZW5lZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgX3BvcHVwID0gJCggJzxkaXYgY2xhc3M9XCJ3ZWJzdGVycy1zZWxlY3RfX3BvcHVwXCIgaWQ9XCJ3ZWJzdGVycy1zZWxlY3RfX3BvcHVwJyArIGlkICsgJ1wiPjwvZGl2PicgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfb2JqLmZpbmQoICdvcHRpb24nICkuZWFjaCggZnVuY3Rpb24oIGkgKXtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQoIHRoaXMgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIGkgPT0gY3VySW5kZXggKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdC5hcHBlbmQoICc8bGkgY2xhc3M9XCJhY3RpdmVcIj4nICsgY3VySXRlbS50ZXh0KCkgKyAnPC9saT4nICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdC5hcHBlbmQoICc8bGk+JyArIGN1ckl0ZW0udGV4dCgpICsgJzwvbGk+JyApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3BvcHVwLmFwcGVuZCggbGlzdCApO1xyXG4gICAgICAgICAgICAgICAgX2JvZHkuYXBwZW5kKCBfcG9wdXAgKTtcclxuICAgICAgICAgICAgICAgIF93cmFwLmFkZENsYXNzKCAnd2Vic3RlcnMtc2VsZWN0X29wZW5lZCcgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfcG9wdXAuY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IF93cmFwLm91dGVyV2lkdGgoKSxcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiBvZmZzZXQubGVmdCxcclxuICAgICAgICAgICAgICAgICAgICB0b3A6IG9mZnNldC50b3AgKyBfd3JhcC5vdXRlckhlaWdodCgpXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgbWF4SGVpZ2h0ID0gX3BvcHVwLm91dGVySGVpZ2h0KCk7XHJcbiAgICAgICAgICAgICAgICBpZiggbWF4SGVpZ2h0ID4gX3BvcHVwLmZpbmQoICdsaScgKS5lcSggMCApLm91dGVySGVpZ2h0KCkgKiBfdmlzaWJsZSApe1xyXG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5oZWlnaHQoIF9wb3B1cC5maW5kKCAnbGknICkuZXEoIDAgKS5vdXRlckhlaWdodCgpICogX3Zpc2libGUgKTtcclxuICAgICAgICAgICAgICAgICAgICBfc2Nyb2xsID0gX3BvcHVwLm5pY2VTY3JvbGwoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaG9yaXpyYWlsZW5hYmxlZDogZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIF9zaG93VHlwZSA9PSAxICl7XHJcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnbm9uZSdcclxuICAgICAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLnNsaWRlRG93biggMzAwICk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoIF9zaG93VHlwZSA9PSAyICkge1xyXG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMC4xXHJcbiAgICAgICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5hbmltYXRlKCB7IG9wYWNpdHk6IDEgfSwgMzAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBfcG9wdXAuZmluZCggJ2xpJyApLm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2NsaWNrJzogZnVuY3Rpb24oIGUgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJCggdGhpcyApLmluZGV4KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX29iai52YWwoIF9vYmouZmluZCggJ29wdGlvbicgKS5lcSggaW5kZXggKS5hdHRyKCAndmFsdWUnICkgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX29iai50cmlnZ2VyKCAnY2hhbmdlJyApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaGlkZVBvcHVwKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXHJcbiAgICAgICAgX3NlbGYuY2hlY2tPcGVuZWQgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICByZXR1cm4gX29wZW5lZDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIF9zZWxmLmNsb3NlID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgIF9oaWRlUG9wdXAoKTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgX2NvbnN0cnVjdG9yKCk7XHJcblxyXG4gICAgfTtcclxuXHJcbn0gKSgpOyJdfQ==

!function(){$(function(){$.each($(".anchor"),function(){new e($(this))}),$.each($(".partners"),function(){new t($(this))}),$.each($(".catalog"),function(){new t($(this))}),$.each($(".promo__slider"),function(){new t($(this))}),$.each($(".sub-menu"),function(){new t($(this))}),$.each($(".mobile-menu"),function(){new n($(this))}),$.each($(".blog__sort"),function(){new i($(this))}),$.each($(".head-shot"),function(){new o($(this))}),$.each($(".rates__item-swiper"),function(){new t($(this))})});var e=function(e){var n=e,t=$("html, body"),i=function(){n.on({click:function(){return $(".menu").hasClass("mobile")&&$(".menu-btn").trigger("click"),t.animate({scrollTop:$($.attr(this,"href")).offset().top},600),$(".menu")[0].obj.destroy(),!1}})},o=function(){i()};o()},n=function(e){var n=e,t=$(".mobile-menu-btn"),i=function(){o()},o=function(){t.on("click",function(){$(this).hasClass("close")?a():s()})},s=function(){t.addClass("close"),n.addClass("visible")},a=function(){t.removeClass("close"),n.removeClass("visible")};i()},t=function(e){var n,t,i,o,s,a=e,r=a.find(".partners__swiper"),c=a.find(".sub-menu__swiper"),u=a.find(".catalog__swiper"),d=a.find(".promo__swiper"),f=a.find(".rates__swiper"),l=a.find(".partners__swiper-prev"),p=a.find(".catalog__swiper-prev"),h=a.find(".promo__swiper-prev"),w=a.find(".rates__swiper-prev"),m=a.find(".partners__swiper-next"),_=a.find(".catalog__swiper-next"),v=a.find(".promo__swiper-next"),g=a.find(".rates__swiper-next"),C=$(window),b=function(){n=new Swiper(r,{autoplay:1e4,speed:500,effect:"slide",slidesPerView:"auto",loop:!0,loopedSlides:20,spaceBetween:80,nextButton:m,prevButton:l}),t=new Swiper(u,{autoplay:1e4,speed:500,effect:"slide",slidesPerView:3,loop:!0,nextButton:_,prevButton:p,breakpoints:{767:{slidesPerView:1},1199:{slidesPerView:2}}}),o=new Swiper(d,{autoplay:1e4,speed:500,effect:"slide",slidesPerView:1,loop:!0,nextButton:v,prevButton:h}),s=new Swiper(f,{autoplay:!1,speed:500,effect:"slide",slidesPerView:"auto",loop:!1,nextButton:g,prevButton:w}),i=new Swiper(c,{autoplay:!1,speed:500,effect:"slide",slidesPerView:"auto",onSlideChangeStart:function(){a.removeClass("start"),c[0].swiper.slideTo(i.find(".active").index(),200,!1)},onSlideChangeEnd:function(){a.removeClass("end")},onReachBeginning:function(){a.addClass("start"),a.removeClass("end"),setTimeout(function(){a.addClass("start")},300)},onReachEnd:function(){a.addClass("end"),setTimeout(function(){a.removeClass("start")},300)}})},y=function(){C.outerWidth()<=767&&b(),C.on({resize:function(){C.outerWidth()>=767?x():b()}})},x=function(){c[0].swiper.destroy(!1,!0)},T=function(){y(),b()};T()},i=function(e){var n=e,t=$(".site"),i=$(window),o=function(){s()},s=function(){t.on("click",function(e){n.hasClass("open")&&0==$(e.target).closest(n).length&&a()}),n.on("click",function(){var e=$(this);e.hasClass("open")&&i.width()<1200?a():i.width()<1200&&r()})},a=function(){n.removeClass("open")},r=function(){n.addClass("open")};o()},o=function(e){var n=e,t=$("body"),i=t.data("action"),o=n.find(".head-shot__command-more"),s=n.find(".preloader"),a=n.find(".head-shot__command-wrap"),r=n.find(".head-shot__command-cover"),c=!0,u=new XMLHttpRequest,d=function(){h(),m()},f=function(e){var t,i=e.has_items,o=e.items;$.each(o,function(){var e=this;t=$('<div class="head-shot__command-item new"><img src="'+e.dummy+'" alt="'+e.title+'"/></div>'),a.append(t)});var s=a.find(".new");setTimeout(function(){l(i,s)},550),n.attr("data-loaded-group",+n.attr("data-loaded-group")+1)},l=function(e,n){var t=500;c&&(t=1),r.animate({height:a.outerHeight()},{duration:t,complete:function(){r.css("height",""),n.each(function(e){p($(this),e)}),0==e&&w()}}),c&&setTimeout(function(){c=!1},500)},p=function(e,n){var t=100;c&&(t=1),setTimeout(function(){e.removeClass("new")},n*t)},h=function(){var e=i;s.addClass("active"),u.abort(),u=$.ajax({url:e,data:{action:"gallery",type:"headshot",page:n.attr("data-loaded-group")},dataType:"json",timeout:2e4,type:"GET",success:function(e){r.height(r.height()),f(e)},error:function(e){"abort"!=e.statusText&&alert("Error!")}})},w=function(){o.css("opacity",0),setTimeout(function(){o.css("padding",0),o.animate({height:0},{duration:500,complete:function(){o.remove()}})},300)},m=function(){o.on("click",function(){return h(),!1})};d()}}();
!function(){"use strict";$(function(){$.each($(".media-gallery"),function(){new i($(this))})});var i=function(i){var e=i,n=$("body"),a=e.find(".media-gallery__wrap"),o=$('<div class="media-gallery__sizer"></div>'),d=e.find(".media-gallery__switcher"),s=d.find("button"),r=e.find(".media-gallery__cover"),l=e.find(".preloader"),c=e.find(".media-gallery__more"),u=n.data("action"),p=($(window),!1),f=!0,h=!0,v=new XMLHttpRequest,m=function(){s.on("click",function(){var i=$(this),t=i.data("type");return s.removeClass("active"),i.addClass("active"),e.attr("data-loaded-group",0),T(t),h=!0,!1}),c.on({click:function(){return T(),h=!1,!1}}),e.on("click",".media-gallery__item",function(){return t($(this),$(this).index()-1),h=!0,!1})},g=function(i){0!==e.attr("data-loaded-group")&&p&&w();var t,n=i.has_items,d=i.items;h&&a.html(o),$.each(d,function(){var i=this;t=$('<div class="media-gallery__item new '+i.type+'" title="'+this.title+'" data-href="'+i.dummy__big+'"><img src="'+i.dummy+'" alt="'+i.type+'" /></div>'),1==i.video&&t.addClass("media-gallery__item_video"),a.append(t)});var s=a.find(".new");setTimeout(function(){_(n,s)},550),setTimeout(function(){b()},500),e.attr("data-loaded-group",+e.attr("data-loaded-group")+1)},w=function(){a.isotope("destroy"),p=!1},_=function(i,t){var e=500;f&&(e=1),r.animate({height:a.outerHeight()},{duration:e,complete:function(){r.css("height",""),t.each(function(i){y($(this),i)}),0==i&&C()}}),f&&setTimeout(function(){f=!1},500)},y=function(i,t){var e=100;f&&(e=1),setTimeout(function(){i.removeClass("new")},t*e)},b=function(){var i=".media-gallery__item";p=!0,a.isotope({itemSelector:i,percentPosition:!0,masonry:{columnWidth:".media-gallery__sizer"}}),l.removeClass("active")},C=function(){c.css("opacity",0),setTimeout(function(){c.css("padding",0),c.animate({height:0},{duration:500,complete:function(){c.remove()}})},300)},T=function(){var i=u;l.addClass("active"),v.abort(),v=$.ajax({url:i,data:{action:"gallery",page:e.attr("data-loaded-group"),type:s.filter(".active").data("type")},dataType:"json",timeout:2e4,type:"GET",success:function(i){r.height(r.height()),g(i)},error:function(i){"abort"!=i.statusText&&alert("Error!")}})},k=function(){T(),m()};k()},t=function(i,t){var e=this,n=i,a=$("body"),o=n.parent(),d=n.parents(".media-gallery"),s=$("html"),r=$(window),l=o.find(".media-gallery__item"),c=null,u=null,p=null,f=null,h=null,v=null,m=null,g=null,w=null,_=function(){r.on({resize:function(){P()}}),u.parent().on({click:function(){T()}}),u.on({click:function(i){i.stopPropagation()}}),p.on({click:function(){return T(),!1}})},y=function(){d.attr("data-loaded-type");c=$('<div class="swiper-popup">                                    <div class="swiper-container">                                        <div class="swiper-wrapper"></div>                                        <div class="swiper-pagination"></div>                                        <div class="swiper-button-next"></div>                                        <div class="swiper-button-prev"></div>                                    </div>                                </div>'),f=c.find(".swiper-wrapper"),h=c.find(".swiper-container"),v=c.find(".swiper-pagination"),m=c.find(".swiper-button-next"),g=c.find(".swiper-button-prev")},b=function(){var i=c.find(".swiper-slide-active"),t=i.find("[data-src]").data("src"),e=$('<iframe src="'+t+'"> frameborder="0" allowfullscreen></iframe>');$(".swiper-slide-active").find(".swiper-popup__video").prepend(e)},C=function(){y(),k(),z(),w.slideTo(t,0),c.addClass("active"),S(),w.onResize()},T=function(){c.removeClass("active"),setTimeout(function(){s.css({overflow:"",paddingRight:""}),c.remove()},300)},k=function(){$.each(l,function(){var i=null,t=null,e=null;$(this).hasClass("media-gallery__item_video")?(e='<i class="fa fa-spinner fa-spin"></i>',i='<div class="swiper-popup__video"/>',t='data-src="'+$(this).data("href")+'"'):(e="",i='<img src="'+$(this).data("href")+'">',t="");var n=$('<div class="swiper-slide">                                        <div class="swiper-popup__inner" '+t+'>                                            <a href="#" class="swiper-popup__close"></a>                                            '+e+"                                            "+i+'                                            <span class="swiper-slide__title">'+$(this).attr("title")+"</span>                                        </div>                                    </div>");f.append(n),n.find("img").on({load:function(){$(this).attr("data-width",this.width),$(this).attr("data-height",this.height),j(this.width,this.height,$(this))}})}),a.append(c),u=c.find(".swiper-popup__inner"),p=c.find(".swiper-popup__close")},x=function(){var i=document.createElement("div"),t=null;return document.body.appendChild(i),t=i.offsetWidth-i.clientWidth,document.body.removeChild(i),t},z=function(){w=new Swiper(h,{pagination:v,nextButton:m,prevButton:g,slidesPerView:1,paginationClickable:!0,onSlideChangeEnd:function(){R(),$(".swiper-slide-active").find("[data-src]").length&&b()}})},E=function(){C(),_(),n[0].obj=e},R=function(){var i=c.find(".swiper-slide"),t=i.find(".swiper-popup__video iframe");t.remove()},j=function(i,t,e){var n=0;n=c.width()/i>c.height()/t?c.height()/t:c.width()/i,n>=1?e.css({width:.85*i,height:.85*t}):e.css({width:n*i*.85,height:n*t*.85})},P=function(){$.each(f.find("img"),function(){j($(this).data("width"),$(this).data("height"),$(this))})},S=function(){s.css({overflow:"hidden",paddingRight:x()})};E()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

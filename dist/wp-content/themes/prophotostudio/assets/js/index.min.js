!function(){$(function(){$.each($(".partners"),function(){new n($(this))}),$.each($(".catalog"),function(){new n($(this))}),$.each($(".promo__slider"),function(){new n($(this))}),$.each($(".sub-menu"),function(){new n($(this))}),$.each($(".mobile-menu"),function(){new e($(this))}),$.each($(".blog__sort"),function(){new t($(this))}),$.each($(".head-shot"),function(){new i($(this))})});var e=function(e){var n=e,t=$(".mobile-menu-btn"),i=function(){o()},o=function(){t.on("click",function(){$(this).hasClass("close")?a():s()})},s=function(){t.addClass("close"),n.addClass("visible")},a=function(){t.removeClass("close"),n.removeClass("visible")};i()},n=function(e){var n,t,i,o,s=e,a=s.find(".partners__swiper"),c=s.find(".sub-menu__swiper"),r=s.find(".catalog__swiper"),d=s.find(".promo__swiper"),u=s.find(".partners__swiper-prev"),f=s.find(".catalog__swiper-prev"),l=s.find(".promo__swiper-prev"),p=s.find(".partners__swiper-next"),h=s.find(".catalog__swiper-next"),m=s.find(".promo__swiper-next"),w=$(window),v=function(){n=new Swiper(a,{autoplay:1e4,speed:500,effect:"slide",slidesPerView:"auto",loop:!0,loopedSlides:20,spaceBetween:80,nextButton:p,prevButton:u}),t=new Swiper(r,{autoplay:1e4,speed:500,effect:"slide",slidesPerView:3,loop:!0,nextButton:h,prevButton:f,breakpoints:{767:{slidesPerView:1},1199:{slidesPerView:2}}}),o=new Swiper(d,{autoplay:1e4,speed:500,effect:"slide",slidesPerView:1,loop:!0,nextButton:m,prevButton:l}),i=new Swiper(c,{autoplay:!1,speed:500,effect:"slide",slidesPerView:"auto",onSlideChangeStart:function(){s.removeClass("start"),c[0].swiper.slideTo(i.find(".active").index(),200,!1)},onSlideChangeEnd:function(){s.removeClass("end")},onReachBeginning:function(){s.addClass("start"),s.removeClass("end"),setTimeout(function(){s.addClass("start")},300)},onReachEnd:function(){s.addClass("end"),setTimeout(function(){s.removeClass("start")},300)}})},_=function(){w.outerWidth()<=767&&v(),w.on({resize:function(){w.outerWidth()>=767?g():v()}})},g=function(){c[0].swiper.destroy(!1,!0)},C=function(){_(),v()};C()},t=function(e){var n=e,t=$(".site"),i=$(window),o=function(){s()},s=function(){t.on("click",function(e){n.hasClass("open")&&0==$(e.target).closest(n).length&&a()}),n.on("click",function(){var e=$(this);e.hasClass("open")&&i.width()<1200?a():i.width()<1200&&c()})},a=function(){n.removeClass("open")},c=function(){n.addClass("open")};o()},i=function(e){var n=e,t=$("body"),i=t.data("action"),o=n.find(".head-shot__command-more"),s=n.find(".preloader"),a=n.find(".head-shot__command-wrap"),c=n.find(".head-shot__command-cover"),r=!0,d=new XMLHttpRequest,u=function(){h(),w()},f=function(e){var t,i=e.has_items,o=e.items;$.each(o,function(){var e=this;t=$('<div class="head-shot__command-item new"><img src="'+e.dummy+'" alt="'+e.title+'"/></div>'),a.append(t)});var s=a.find(".new");setTimeout(function(){l(i,s)},550),n.attr("data-loaded-group",+n.attr("data-loaded-group")+1)},l=function(e,n){var t=500;r&&(t=1),c.animate({height:a.outerHeight()},{duration:t,complete:function(){c.css("height",""),n.each(function(e){p($(this),e)}),0==e&&m()}}),r&&setTimeout(function(){r=!1},500)},p=function(e,n){var t=100;r&&(t=1),setTimeout(function(){e.removeClass("new")},n*t)},h=function(){var e=i;s.addClass("active"),d.abort(),d=$.ajax({url:e,data:{action:"gallery",page:n.attr("data-loaded-group")},dataType:"json",timeout:2e4,type:"GET",success:function(e){c.height(c.height()),f(e)},error:function(e){"abort"!=e.statusText&&alert("Error!")}})},m=function(){o.css("opacity",0),setTimeout(function(){o.css("padding",0),o.animate({height:0},{duration:500,complete:function(){o.remove()}})},300)},w=function(){o.on("click",function(){return h(),!1})};u()}}();
!function(){"use strict";$(function(){$.each($(".media-gallery"),function(){new i($(this))})});var i=function(i){var e=i,n=$("body"),a=e.find(".media-gallery__wrap"),o=e.find(".media-gallery__switcher"),s=o.find("button"),r=e.find(".media-gallery__cover"),d=e.find(".preloader"),c=e.find(".media-gallery__more"),l=n.data("action"),u=($(window),!1),p=!0,f=!1,h=new XMLHttpRequest,v=function(){s.on("click",function(){var i=$(this),t=i.data("type");return s.removeClass("active"),i.addClass("active"),a.isotope({filter:"."+t}),f=!0,!1}),c.on({click:function(){return C(),!1}}),e.on("click",".media-gallery__item",function(){return t($(this),$(this).index()),!1})},m=function(i){0!==e.attr("data-loaded-group")&&u&&w();var t,n=i.has_items,o=i.items;$.each(o,function(){var i=this;t=$('<div class="media-gallery__item new '+i.type+'"><img src="'+i.dummy+'" alt="'+i.type+'"/></div>'),a.append(t)});var s=a.find(".new");setTimeout(function(){g(n,s)},550),setTimeout(function(){y()},500),e.attr("data-loaded-group",+e.attr("data-loaded-group")+1)},w=function(){a.isotope("destroy"),u=!1},g=function(i,t){var e=500;p&&(e=1),r.animate({height:a.outerHeight()},{duration:e,complete:function(){r.css("height",""),t.each(function(i){_($(this),i)}),0==i&&b()}}),p&&setTimeout(function(){p=!1},500)},_=function(i,t){var e=100;p&&(e=1),setTimeout(function(){i.removeClass("new")},t*e)},y=function(){var i=".media-gallery__item";u=!0,a.isotope({itemSelector:i,percentPosition:!0,masonry:{columnWidth:".media-gallery__sizer"}}),f&&a.isotope({filter:"."+s.filter(".active").data("type")}),setTimeout(function(){d.removeClass("active")},300)},b=function(){c.css("opacity",0),setTimeout(function(){c.css("padding",0),c.animate({height:0},{duration:500,complete:function(){c.remove()}})},300)},C=function(){var i=l;d.addClass("active"),h.abort(),h=$.ajax({url:i,data:{action:"gallery",page:e.attr("data-loaded-group"),type:s.data("type")},dataType:"json",timeout:2e4,type:"GET",success:function(i){r.height(r.height()),m(i)},error:function(i){"abort"!=i.statusText&&alert("Error!")}})},T=function(){C(),v()};T()},t=function(i,t){var e=this,n=i,a=$("body"),o=n.parent(),s=n.parents(".media-gallery"),r=$("html"),d=$(window),c=o.find(".media-gallery__item img"),l=null,u=null,p=null,f=null,h=null,v=null,m=null,w=null,g=null,_=function(){d.on({resize:function(){P()}}),u.parent().on({click:function(){T()}}),u.on({click:function(i){i.stopPropagation()}}),p.on({click:function(){return T(),!1}})},y=function(){s.attr("data-loaded-type");l=$('<div class="swiper-popup">                                    <div class="swiper-container">                                        <div class="swiper-wrapper"></div>                                        <div class="swiper-pagination"></div>                                        <div class="swiper-button-next"></div>                                        <div class="swiper-button-prev"></div>                                    </div>                                </div>'),f=l.find(".swiper-wrapper"),h=l.find(".swiper-container"),v=l.find(".swiper-pagination"),m=l.find(".swiper-button-next"),w=l.find(".swiper-button-prev")},b=function(){var i=l.find(".swiper-slide-active"),t=i.find("[data-src]").data("src"),e=$('<iframe src="'+t+'"> frameborder="0" allowfullscreen></iframe>');$(".swiper-slide-active").find(".swiper-popup__video").prepend(e)},C=function(){y(),k(),E(),g.slideTo(t,0),l.addClass("active"),S(),g.onResize()},T=function(){l.removeClass("active"),setTimeout(function(){r.css({overflow:"",paddingRight:""}),l.remove()},300)},k=function(){$.each(c,function(){var i=null,t=null,e=null;$(this).hasClass("media-gallery__item_video")?(e='<i class="fa fa-spinner fa-spin"></i>',i='<div class="swiper-popup__video"/>',t='data-src="'+$(this).attr("href")+'"'):(e="",i='<img src="'+$(this).attr("src")+'">',t="");var n=$('<div class="swiper-slide">                                        <div class="swiper-popup__inner" '+t+'>                                            <a href="#" class="swiper-popup__close"></a>                                            '+e+"                                            "+i+'                                            <span class="swiper-slide__title">'+$(this).attr("title")+"</span>                                        </div>                                    </div>");f.append(n),n.find("img").on({load:function(){$(this).attr("data-width",this.width),$(this).attr("data-height",this.height),z(this.width,this.height,$(this))}})}),a.append(l),u=l.find(".swiper-popup__inner"),p=l.find(".swiper-popup__close")},x=function(){var i=document.createElement("div"),t=null;return document.body.appendChild(i),t=i.offsetWidth-i.clientWidth,document.body.removeChild(i),t},E=function(){g=new Swiper(h,{pagination:v,nextButton:m,prevButton:w,slidesPerView:1,paginationClickable:!0,onSlideChangeEnd:function(){j(),$(".swiper-slide-active").find("[data-src]").length&&b()}})},R=function(){C(),_(),n[0].obj=e},j=function(){var i=l.find(".swiper-slide"),t=i.find(".swiper-popup__video iframe");t.remove()},z=function(i,t,e){var n=0;n=l.width()/i>l.height()/t?l.height()/t:l.width()/i,n>=1?e.css({width:.85*i,height:.85*t}):e.css({width:n*i*.85,height:n*t*.85})},P=function(){$.each(f.find("img"),function(){z($(this).data("width"),$(this).data("height"),$(this))})},S=function(){r.css({overflow:"hidden",paddingRight:x()})};R()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5pbmRleC5qcyIsImpxdWVyeS5tZWRpYS1nYWxsZXJ5LmpzIl0sIm5hbWVzIjpbIiQiLCJlYWNoIiwiU2xpZGVycyIsInRoaXMiLCJNZW51IiwiU29ydCIsIkhlYWRTaG90TG9hZGVyIiwib2JqIiwiX29iaiIsIl9idG4iLCJfY29uc3RydWN0b3IiLCJfb25FdmVudHMiLCJvbiIsImhhc0NsYXNzIiwiX2Nsb3NlTWVudSIsIl9vcGVuTWVudSIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJfcGFydG5lcnMiLCJfY2F0YWxvZyIsIl9zdWJNZW51IiwiX3Byb21vIiwiX3BhcnRuZXJzU2xpZGVyIiwiZmluZCIsIl9zdWJNZW51U2xpZGVyIiwiX2NhdGFsb2dTbGlkZXIiLCJfcHJvbW9TbGlkZXIiLCJfcGFydG5lcnNQcmV2IiwiX2NhdGFsb2dQcmV2IiwiX3Byb21vUHJldiIsIl9wYXJ0bmVyc05leHQiLCJfY2F0YWxvZ05leHQiLCJfcHJvbW9OZXh0IiwiX3dpbmRvdyIsIndpbmRvdyIsIl9pbml0U2xpZGVyIiwiU3dpcGVyIiwiYXV0b3BsYXkiLCJzcGVlZCIsImVmZmVjdCIsInNsaWRlc1BlclZpZXciLCJsb29wIiwibG9vcGVkU2xpZGVzIiwic3BhY2VCZXR3ZWVuIiwibmV4dEJ1dHRvbiIsInByZXZCdXR0b24iLCJicmVha3BvaW50cyIsIjc2NyIsIjExOTkiLCJvblNsaWRlQ2hhbmdlU3RhcnQiLCJzd2lwZXIiLCJzbGlkZVRvIiwiaW5kZXgiLCJvblNsaWRlQ2hhbmdlRW5kIiwib25SZWFjaEJlZ2lubmluZyIsInNldFRpbWVvdXQiLCJvblJlYWNoRW5kIiwiX29uRXZlbnQiLCJvdXRlcldpZHRoIiwicmVzaXplIiwiX2Rlc3Ryb3lTbGlkZXIiLCJkZXN0cm95IiwiX2luaXQiLCJfc2l0ZSIsIl9jb25zdHJ1Y3QiLCJlIiwidGFyZ2V0IiwiY2xvc2VzdCIsImxlbmd0aCIsIl9jbG9zZUxhbmd1YWdlIiwiY3VyRWxlbSIsIndpZHRoIiwiX29wZW5MYW5ndWFnZSIsIl9ib2R5IiwiX2ZpbGVMaW5rIiwiZGF0YSIsIl9idG5Nb3JlIiwiX3ByZWxvYWRlciIsIl93cmFwcGVyIiwiX2NvdmVyIiwiX2ZpcnN0R3JvdXAiLCJfcmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0IiwiX2xvYWROZXdJdGVtcyIsIl9hZGRHYWxsZXJ5Q29udGVudCIsIm1zZyIsIm5ld0Jsb2NrIiwiaGFzSXRlbXMiLCJoYXNfaXRlbXMiLCJnZXRJdGVtcyIsIml0ZW1zIiwiY3VySXRlbSIsImR1bW15IiwidGl0bGUiLCJhcHBlbmQiLCJuZXdJdGVtcyIsIl9oZWlnaHRBbmltYXRpb24iLCJhdHRyIiwiZHVyYXRpb24iLCJhbmltYXRlIiwiaGVpZ2h0Iiwib3V0ZXJIZWlnaHQiLCJjb21wbGV0ZSIsImNzcyIsImkiLCJfc2hvd05ld0l0ZW1zIiwiX3JlbW92ZUJ0bk1vcmUiLCJpdGVtIiwiZGVsYXkiLCJwYXRoIiwiYWJvcnQiLCJhamF4IiwidXJsIiwiYWN0aW9uIiwicGFnZSIsImRhdGFUeXBlIiwidGltZW91dCIsInR5cGUiLCJzdWNjZXNzIiwiZXJyb3IiLCJzdGF0dXNUZXh0IiwiYWxlcnQiLCJyZW1vdmUiLCJNZWRpYUdhbGxlcnkiLCJfc3dpdGNoZXIiLCJfc3dpdGNoQnRuIiwiX2lzR2FsbGVyeSIsIl9maWx0ZXJGbGFnIiwiY3VyQnRuIiwiY3VyVHlwZSIsImlzb3RvcGUiLCJmaWx0ZXIiLCJjbGljayIsIlN3aXBlclBvcHVwIiwiX2Rlc3Ryb3lHYWxsZXJ5IiwiX2luaXRHYWxsZXJ5Iiwid3JhcEl0ZW0iLCJpdGVtU2VsZWN0b3IiLCJwZXJjZW50UG9zaXRpb24iLCJtYXNvbnJ5IiwiY29sdW1uV2lkdGgiLCJfc2VsZiIsInBhcmVudCIsIl9nYWxsZXJ5V3JhcCIsInBhcmVudHMiLCJfaHRtbCIsIl9saW5rcyIsIl9wb3B1cCIsIl9wb3B1cElubmVyIiwiX3BvcHVwQ2xvc2UiLCJfc3dpcGVyV3JhcHBlciIsIl9zd2lwZXJDb250YWluZXIiLCJfc3dpcGVyUGFnaW5hdGlvbiIsIl9zd2lwZXJCdG5OZXh0IiwiX3N3aXBlckJ0blByZXYiLCJfc3dpcGVyIiwiX2FkZEV2ZW50cyIsIl9zZXRQaWN0dXJlU2l6ZVdoZW5SZXNpemUiLCJfY2xvc2VQb3B1cCIsImV2ZW50Iiwic3RvcFByb3BhZ2F0aW9uIiwiX2FkZGluZ1ZhcmlhYmxlcyIsIl9hZGRWaWRlbyIsImFjdGl2ZVNsaWRlIiwic3JjIiwiaW5uZXJDb250ZW50IiwicHJlcGVuZCIsIl9idWlsZFBvcHVwIiwiX2NvbnRlbnRGaWxsaW5nIiwiX2luaXRTd2lwZXIiLCJfc2V0U3R5bGVzIiwib25SZXNpemUiLCJvdmVyZmxvdyIsInBhZGRpbmdSaWdodCIsImRhdGFTUkMiLCJwcmVsb2FkZXIiLCJuZXdJdGVtIiwibG9hZCIsIl9zZXRQaWN0dXJlU2l6ZSIsIl9nZXRTY3JvbGxXaWR0aCIsInNjcm9sbERpdiIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInNjcm9sbGJhcldpZHRoIiwiYm9keSIsImFwcGVuZENoaWxkIiwib2Zmc2V0V2lkdGgiLCJjbGllbnRXaWR0aCIsInJlbW92ZUNoaWxkIiwicGFnaW5hdGlvbiIsInBhZ2luYXRpb25DbGlja2FibGUiLCJfcmVtb3ZlVmlkZW8iLCJ2aWRlb0ZyYW1lIiwicGljV2lkdGgiLCJwaWNIZWlnaHQiLCJwaWMiLCJrIl0sIm1hcHBpbmdzIjoiQ0FBQSxXQUVJQSxFQUFHLFdBRUNBLEVBQUVDLEtBQU1ELEVBQUcsYUFBZSxXQUN0QixHQUFJRSxHQUFVRixFQUFHRyxTQUdyQkgsRUFBRUMsS0FBTUQsRUFBRyxZQUFjLFdBQ3JCLEdBQUlFLEdBQVVGLEVBQUdHLFNBR3JCSCxFQUFFQyxLQUFNRCxFQUFHLGtCQUFvQixXQUMzQixHQUFJRSxHQUFVRixFQUFHRyxTQUdyQkgsRUFBRUMsS0FBTUQsRUFBRyxhQUFlLFdBQ3RCLEdBQUlFLEdBQVVGLEVBQUdHLFNBR3JCSCxFQUFFQyxLQUFNRCxFQUFHLGdCQUFrQixXQUN6QixHQUFJSSxHQUFPSixFQUFHRyxTQUdsQkgs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YUFBY00sTUFLMUJySCIsImZpbGUiOiJpbmRleC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgJCggZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgJC5lYWNoKCAkKCAnLnBhcnRuZXJzJyApLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgbmV3IFNsaWRlcnMgKCAkKCB0aGlzICkgKTtcclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICQuZWFjaCggJCggJy5jYXRhbG9nJyApLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgbmV3IFNsaWRlcnMgKCAkKCB0aGlzICkgKTtcclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICQuZWFjaCggJCggJy5wcm9tb19fc2xpZGVyJyApLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgbmV3IFNsaWRlcnMgKCAkKCB0aGlzICkgKTtcclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICQuZWFjaCggJCggJy5zdWItbWVudScgKSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIG5ldyBTbGlkZXJzICggJCggdGhpcyApICk7XHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAkLmVhY2goICQoICcubW9iaWxlLW1lbnUnICksIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBuZXcgTWVudSAoICQoIHRoaXMgKSApO1xyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgJC5lYWNoKCAkKCAnLmJsb2dfX3NvcnQnICksIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbmV3IFNvcnQoICQoIHRoaXMgKSApO1xyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgJC5lYWNoKCAkKCAnLmhlYWQtc2hvdCcgKSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBuZXcgSGVhZFNob3RMb2FkZXIoICQoIHRoaXMgKSApO1xyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdmFyIE1lbnUgPSBmdW5jdGlvbiggb2JqICl7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9vYmogPSBvYmosXHJcbiAgICAgICAgICAgIF9idG4gPSAkKCAnLm1vYmlsZS1tZW51LWJ0bicgKTtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcclxuICAgICAgICB2YXIgX2NvbnN0cnVjdG9yID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIF9vbkV2ZW50cygpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfb25FdmVudHMgPSBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgIF9idG4ub24oICdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoICQoIHRoaXMpLmhhc0NsYXNzKCAnY2xvc2UnICkgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Nsb3NlTWVudSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9vcGVuTWVudSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfb3Blbk1lbnUgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgX2J0bi5hZGRDbGFzcyggJ2Nsb3NlJyApO1xyXG4gICAgICAgICAgICAgICAgX29iai5hZGRDbGFzcyggJ3Zpc2libGUnICk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9jbG9zZU1lbnUgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgX2J0bi5yZW1vdmVDbGFzcyggJ2Nsb3NlJyApO1xyXG4gICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcyggJ3Zpc2libGUnICk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xyXG5cclxuICAgICAgICBfY29uc3RydWN0b3IoKTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBTbGlkZXJzID0gZnVuY3Rpb24oIG9iaiApIHtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcclxuICAgICAgICB2YXIgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX3BhcnRuZXJzU2xpZGVyID0gX29iai5maW5kKCAnLnBhcnRuZXJzX19zd2lwZXInICksXHJcbiAgICAgICAgICAgIF9zdWJNZW51U2xpZGVyID0gX29iai5maW5kKCAnLnN1Yi1tZW51X19zd2lwZXInICksXHJcbiAgICAgICAgICAgIF9jYXRhbG9nU2xpZGVyID0gX29iai5maW5kKCAnLmNhdGFsb2dfX3N3aXBlcicgKSxcclxuICAgICAgICAgICAgX3Byb21vU2xpZGVyID0gX29iai5maW5kKCAnLnByb21vX19zd2lwZXInICksXHJcbiAgICAgICAgICAgIF9wYXJ0bmVyc1ByZXYgPSBfb2JqLmZpbmQoICcucGFydG5lcnNfX3N3aXBlci1wcmV2JyApLFxyXG4gICAgICAgICAgICBfY2F0YWxvZ1ByZXYgPSBfb2JqLmZpbmQoICcuY2F0YWxvZ19fc3dpcGVyLXByZXYnICksXHJcbiAgICAgICAgICAgIF9wcm9tb1ByZXYgPSBfb2JqLmZpbmQoICcucHJvbW9fX3N3aXBlci1wcmV2JyApLFxyXG4gICAgICAgICAgICBfcGFydG5lcnNOZXh0ID0gX29iai5maW5kKCAnLnBhcnRuZXJzX19zd2lwZXItbmV4dCcgKSxcclxuICAgICAgICAgICAgX2NhdGFsb2dOZXh0ID0gX29iai5maW5kKCAnLmNhdGFsb2dfX3N3aXBlci1uZXh0JyApLFxyXG4gICAgICAgICAgICBfcHJvbW9OZXh0ID0gX29iai5maW5kKCAnLnByb21vX19zd2lwZXItbmV4dCcgKSxcclxuICAgICAgICAgICAgX3BhcnRuZXJzLFxyXG4gICAgICAgICAgICBfY2F0YWxvZyxcclxuICAgICAgICAgICAgX3N1Yk1lbnUsXHJcbiAgICAgICAgICAgIF9wcm9tbyxcclxuICAgICAgICAgICAgX3dpbmRvdyA9ICQoIHdpbmRvdyApO1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xyXG4gICAgICAgIHZhciBfaW5pdFNsaWRlciA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9wYXJ0bmVycyA9IG5ldyBTd2lwZXIgKCBfcGFydG5lcnNTbGlkZXIsIHtcclxuICAgICAgICAgICAgICAgICAgICBhdXRvcGxheTogMTAwMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgc3BlZWQ6IDUwMCxcclxuICAgICAgICAgICAgICAgICAgICBlZmZlY3Q6ICdzbGlkZScsXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogJ2F1dG8nLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvb3A6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9vcGVkU2xpZGVzOiAyMCxcclxuICAgICAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IDgwLFxyXG4gICAgICAgICAgICAgICAgICAgIG5leHRCdXR0b246IF9wYXJ0bmVyc05leHQsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJldkJ1dHRvbjogX3BhcnRuZXJzUHJldlxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9jYXRhbG9nID0gbmV3IFN3aXBlciAoIF9jYXRhbG9nU2xpZGVyLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXk6IDEwMDAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHNwZWVkOiA1MDAsXHJcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0OiAnc2xpZGUnLFxyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDMsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9vcDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBuZXh0QnV0dG9uOiBfY2F0YWxvZ05leHQsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJldkJ1dHRvbjogX2NhdGFsb2dQcmV2LFxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnRzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDc2Nzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAxMTk5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3Byb21vID0gbmV3IFN3aXBlciAoIF9wcm9tb1NsaWRlciwge1xyXG4gICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5OiAxMDAwMCxcclxuICAgICAgICAgICAgICAgICAgICBzcGVlZDogNTAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdDogJ3NsaWRlJyxcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvb3A6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dEJ1dHRvbjogX3Byb21vTmV4dCxcclxuICAgICAgICAgICAgICAgICAgICBwcmV2QnV0dG9uOiBfcHJvbW9QcmV2XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3N1Yk1lbnUgPSBuZXcgU3dpcGVyICggX3N1Yk1lbnVTbGlkZXIsIHtcclxuICAgICAgICAgICAgICAgICAgICBhdXRvcGxheTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgc3BlZWQ6IDUwMCxcclxuICAgICAgICAgICAgICAgICAgICBlZmZlY3Q6ICdzbGlkZScsXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogJ2F1dG8nLFxyXG4gICAgICAgICAgICAgICAgICAgIG9uU2xpZGVDaGFuZ2VTdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9vYmoucmVtb3ZlQ2xhc3MoICdzdGFydCcgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3N1Yk1lbnVTbGlkZXJbMF0uc3dpcGVyLnNsaWRlVG8oIF9zdWJNZW51LmZpbmQoICcuYWN0aXZlJyApLmluZGV4KCkgLCAyMDAsIGZhbHNlICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBvblNsaWRlQ2hhbmdlRW5kOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcyggJ2VuZCcgKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIG9uUmVhY2hCZWdpbm5pbmc6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmFkZENsYXNzKCAnc3RhcnQnICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9vYmoucmVtb3ZlQ2xhc3MoICdlbmQnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoICdzdGFydCcgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwzMDAgKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIG9uUmVhY2hFbmQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmFkZENsYXNzKCAnZW5kJyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAnc3RhcnQnICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sMzAwIClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfb25FdmVudCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggX3dpbmRvdy5vdXRlcldpZHRoKCkgPD0gNzY3ICApe1xyXG4gICAgICAgICAgICAgICAgICAgIF9pbml0U2xpZGVyICgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcclxuICAgICAgICAgICAgICAgICAgICAncmVzaXplJzogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIF93aW5kb3cub3V0ZXJXaWR0aCgpID49IDc2NyAgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9kZXN0cm95U2xpZGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaW5pdFNsaWRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKVxyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2Rlc3Ryb3lTbGlkZXIgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfc3ViTWVudVNsaWRlclsgMCBdLnN3aXBlci5kZXN0cm95KCBmYWxzZSwgdHJ1ZSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIF9vbkV2ZW50KCk7XHJcbiAgICAgICAgICAgICAgICBfaW5pdFNsaWRlcigpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXHJcblxyXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcclxuXHJcbiAgICAgICAgX2luaXQoKTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIFNvcnQgPSBmdW5jdGlvbiAob2JqKSB7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9vYmogPSBvYmosXHJcbiAgICAgICAgICAgIF9zaXRlID0gJCggJy5zaXRlJyApLFxyXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICk7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcbiAgICAgICAgdmFyIF9jb25zdHJ1Y3QgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX29uRXZlbnQoKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9vbkV2ZW50ID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX3NpdGUub24oXHJcbiAgICAgICAgICAgICAgICAgICAgJ2NsaWNrJywgZnVuY3Rpb24gKCBlICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBfb2JqLmhhc0NsYXNzKCAnb3BlbicgKSAmJiAkKCBlLnRhcmdldCApLmNsb3Nlc3QoIF9vYmogKS5sZW5ndGggPT0gMCApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Nsb3NlTGFuZ3VhZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9vYmoub24oICdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckVsZW0gPSAkKCB0aGlzICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBjdXJFbGVtLmhhc0NsYXNzKCAnb3BlbicgKSAmJiBfd2luZG93LndpZHRoKCkgPCAxMjAwICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jbG9zZUxhbmd1YWdlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggX3dpbmRvdy53aWR0aCgpIDwgMTIwMCApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX29wZW5MYW5ndWFnZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9IClcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9jbG9zZUxhbmd1YWdlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAnb3BlbicgKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX29wZW5MYW5ndWFnZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgX29iai5hZGRDbGFzcyggJ29wZW4nIClcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXHJcblxyXG4gICAgICAgIF9jb25zdHJ1Y3QoKTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIEhlYWRTaG90TG9hZGVyID0gZnVuY3Rpb24gKG9iaikge1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxyXG4gICAgICAgICAgICBfYm9keSA9ICQoICdib2R5JyApLFxyXG4gICAgICAgICAgICBfZmlsZUxpbmsgPSBfYm9keS5kYXRhKCAnYWN0aW9uJyApLFxyXG4gICAgICAgICAgICBfYnRuTW9yZSA9IF9vYmouZmluZCggJy5oZWFkLXNob3RfX2NvbW1hbmQtbW9yZScgKSxcclxuICAgICAgICAgICAgX3ByZWxvYWRlciA9IF9vYmouZmluZCggJy5wcmVsb2FkZXInICksXHJcbiAgICAgICAgICAgIF93cmFwcGVyID0gX29iai5maW5kKCAnLmhlYWQtc2hvdF9fY29tbWFuZC13cmFwJyApLFxyXG4gICAgICAgICAgICBfY292ZXIgPSBfb2JqLmZpbmQoICcuaGVhZC1zaG90X19jb21tYW5kLWNvdmVyJyApLFxyXG4gICAgICAgICAgICBfZmlyc3RHcm91cCA9IHRydWUsXHJcbiAgICAgICAgICAgIF9yZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcbiAgICAgICAgdmFyIF9jb25zdHJ1Y3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfbG9hZE5ld0l0ZW1zKCk7XHJcbiAgICAgICAgICAgICAgICBfb25FdmVudCgpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfYWRkR2FsbGVyeUNvbnRlbnQgPSBmdW5jdGlvbiAoIG1zZyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgaGFzSXRlbXMgPSBtc2cuaGFzX2l0ZW1zLFxyXG4gICAgICAgICAgICAgICAgICAgIGdldEl0ZW1zID0gbXNnLml0ZW1zLFxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrO1xyXG5cclxuICAgICAgICAgICAgICAgICQuZWFjaCggZ2V0SXRlbXMsIGZ1bmN0aW9uKCApe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrID0gJCggJzxkaXYgY2xhc3M9XCJoZWFkLXNob3RfX2NvbW1hbmQtaXRlbSBuZXdcIj4nK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGltZyBzcmM9XCInKyBjdXJJdGVtLmR1bW15ICsnXCIgYWx0PVwiJysgY3VySXRlbS50aXRsZSArJ1wiLz4nK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfd3JhcHBlci5hcHBlbmQoIG5ld0Jsb2NrICk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBuZXdJdGVtcyA9IF93cmFwcGVyLmZpbmQoICcubmV3JyApO1xyXG5cclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgX2hlaWdodEFuaW1hdGlvbiggaGFzSXRlbXMsIG5ld0l0ZW1zICk7XHJcbiAgICAgICAgICAgICAgICB9LCA1NTAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfb2JqLmF0dHIoICdkYXRhLWxvYWRlZC1ncm91cCcsICtfb2JqLmF0dHIoICdkYXRhLWxvYWRlZC1ncm91cCcgKSArIDEgKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9oZWlnaHRBbmltYXRpb24gPSBmdW5jdGlvbiggaGFzSXRlbXMsIG5ld0l0ZW1zICl7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gNTAwO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggX2ZpcnN0R3JvdXAgKXtcclxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IDFcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBfY292ZXIuYW5pbWF0ZSgge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogX3dyYXBwZXIub3V0ZXJIZWlnaHQoKVxyXG4gICAgICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcclxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jb3Zlci5jc3MoICdoZWlnaHQnLCAnJyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3SXRlbXMuZWFjaCggZnVuY3Rpb24oIGkgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zaG93TmV3SXRlbXMoICQoIHRoaXMgKSwgaSApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGhhc0l0ZW1zID09IDAgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZW1vdmVCdG5Nb3JlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggX2ZpcnN0R3JvdXAgKXtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2ZpcnN0R3JvdXAgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9LCA1MDAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9zaG93TmV3SXRlbXMgPSBmdW5jdGlvbiggaXRlbSwgaW5kZXggKXtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZGVsYXkgPSAxMDA7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBfZmlyc3RHcm91cCApIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxheSA9IDFcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtLnJlbW92ZUNsYXNzKCAnbmV3JyApO1xyXG4gICAgICAgICAgICAgICAgfSwgaW5kZXggKiBkZWxheSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2xvYWROZXdJdGVtcyA9IGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHBhdGggID0gX2ZpbGVMaW5rO1xyXG5cclxuICAgICAgICAgICAgICAgIF9wcmVsb2FkZXIuYWRkQ2xhc3MoICdhY3RpdmUnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3JlcXVlc3QuYWJvcnQoKTtcclxuICAgICAgICAgICAgICAgIF9yZXF1ZXN0ID0gJC5hamF4KCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBwYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnZ2FsbGVyeScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2U6IF9vYmouYXR0ciggJ2RhdGEtbG9hZGVkLWdyb3VwJyApXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDIwMDAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKCBtc2cgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY292ZXIuaGVpZ2h0KCBfY292ZXIuaGVpZ2h0KCkgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hZGRHYWxsZXJ5Q29udGVudCggbXNnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICggWE1MSHR0cFJlcXVlc3QgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBYTUxIdHRwUmVxdWVzdC5zdGF0dXNUZXh0ICE9ICdhYm9ydCcgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydCggJ0Vycm9yIScgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9yZW1vdmVCdG5Nb3JlID0gZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICBfYnRuTW9yZS5jc3MoICdvcGFjaXR5JywgMCApO1xyXG5cclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9idG5Nb3JlLmNzcyggJ3BhZGRpbmcnLCAwICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9idG5Nb3JlLmFuaW1hdGUoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogNTAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9idG5Nb3JlLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIH0sIDMwMCApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX29uRXZlbnQgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfYnRuTW9yZS5vbiggJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfbG9hZE5ld0l0ZW1zKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXHJcblxyXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcclxuXHJcbiAgICAgICAgX2NvbnN0cnVjdCgpO1xyXG4gICAgfTtcclxuXHJcbn0gKSgpOyIsIiggZnVuY3Rpb24oKXtcclxuXHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAkKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgJC5lYWNoKCAkKCAnLm1lZGlhLWdhbGxlcnknICksIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICBuZXcgTWVkaWFHYWxsZXJ5ICggJCggdGhpcyApIClcclxuXHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgIH0gKTtcclxuXHJcbiAgICB2YXIgTWVkaWFHYWxsZXJ5ID0gZnVuY3Rpb24oIG9iaiApIHtcclxuXHJcbiAgICAgICAgdmFyIF9vYmogPSBvYmosXHJcbiAgICAgICAgICAgIF9ib2R5ID0gJCggJ2JvZHknICksXHJcbiAgICAgICAgICAgIF93cmFwcGVyID0gX29iai5maW5kKCAnLm1lZGlhLWdhbGxlcnlfX3dyYXAnICksXHJcbiAgICAgICAgICAgIF9zd2l0Y2hlciA9IF9vYmouZmluZCggJy5tZWRpYS1nYWxsZXJ5X19zd2l0Y2hlcicgKSxcclxuICAgICAgICAgICAgX3N3aXRjaEJ0biA9IF9zd2l0Y2hlci5maW5kKCAnYnV0dG9uJyApLFxyXG4gICAgICAgICAgICBfY292ZXIgPSBfb2JqLmZpbmQoICcubWVkaWEtZ2FsbGVyeV9fY292ZXInICksXHJcbiAgICAgICAgICAgIF9wcmVsb2FkZXIgPSBfb2JqLmZpbmQoICcucHJlbG9hZGVyJyApLFxyXG4gICAgICAgICAgICBfYnRuTW9yZSA9IF9vYmouZmluZCggJy5tZWRpYS1nYWxsZXJ5X19tb3JlJyApLFxyXG4gICAgICAgICAgICBfZmlsZUxpbmsgPSBfYm9keS5kYXRhKCAnYWN0aW9uJyApLFxyXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICksXHJcbiAgICAgICAgICAgIF9pc0dhbGxlcnkgPSBmYWxzZSxcclxuICAgICAgICAgICAgX2ZpcnN0R3JvdXAgPSB0cnVlLFxyXG4gICAgICAgICAgICBfZmlsdGVyRmxhZyA9IGZhbHNlLFxyXG4gICAgICAgICAgICBfcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG5cclxuICAgICAgICB2YXIgX29uRXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9zd2l0Y2hCdG4ub24oICdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckJ0biA9ICQoIHRoaXMgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyVHlwZSA9IGN1ckJ0bi5kYXRhKCAndHlwZScgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX3N3aXRjaEJ0bi5yZW1vdmVDbGFzcyggJ2FjdGl2ZScgKTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJCdG4uYWRkQ2xhc3MoICdhY3RpdmUnICk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3dyYXBwZXIuaXNvdG9wZSggeyBmaWx0ZXI6ICcuJysgY3VyVHlwZSB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9maWx0ZXJGbGFnID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfYnRuTW9yZS5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2xvYWROZXdJdGVtcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9vYmoub24oICdjbGljaycsICcubWVkaWEtZ2FsbGVyeV9faXRlbScsIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBTd2lwZXJQb3B1cCggJCggdGhpcyApLCAkKCB0aGlzICkuaW5kZXgoKSApO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfYWRkR2FsbGVyeUNvbnRlbnQgPSBmdW5jdGlvbiAoIG1zZyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIF9vYmouYXR0ciggJ2RhdGEtbG9hZGVkLWdyb3VwJyApICE9PSAwICYmIF9pc0dhbGxlcnkgKXtcclxuICAgICAgICAgICAgICAgICAgICBfZGVzdHJveUdhbGxlcnkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgaGFzSXRlbXMgPSBtc2cuaGFzX2l0ZW1zLFxyXG4gICAgICAgICAgICAgICAgICAgIGdldEl0ZW1zID0gbXNnLml0ZW1zLFxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrO1xyXG5cclxuICAgICAgICAgICAgICAgICQuZWFjaCggZ2V0SXRlbXMsIGZ1bmN0aW9uKCApe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrID0gJCggJzxkaXYgY2xhc3M9XCJtZWRpYS1nYWxsZXJ5X19pdGVtIG5ldyAnKyBjdXJJdGVtLnR5cGUgKydcIj4nK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGltZyBzcmM9XCInKyBjdXJJdGVtLmR1bW15ICsnXCIgYWx0PVwiJysgY3VySXRlbS50eXBlICsnXCIvPicrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF93cmFwcGVyLmFwcGVuZCggbmV3QmxvY2sgKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIG5ld0l0ZW1zID0gX3dyYXBwZXIuZmluZCggJy5uZXcnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICBfaGVpZ2h0QW5pbWF0aW9uKCBoYXNJdGVtcywgbmV3SXRlbXMgKTtcclxuICAgICAgICAgICAgICAgIH0sIDU1MCApO1xyXG5cclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgX2luaXRHYWxsZXJ5KCk7XHJcbiAgICAgICAgICAgICAgICB9LCA1MDAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfb2JqLmF0dHIoICdkYXRhLWxvYWRlZC1ncm91cCcsICtfb2JqLmF0dHIoICdkYXRhLWxvYWRlZC1ncm91cCcgKSsxICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfZGVzdHJveUdhbGxlcnkgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfd3JhcHBlci5pc290b3BlKCAnZGVzdHJveScgKTtcclxuICAgICAgICAgICAgICAgIF9pc0dhbGxlcnkgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9oZWlnaHRBbmltYXRpb24gPSBmdW5jdGlvbiggaGFzSXRlbXMsIG5ld0l0ZW1zICl7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gNTAwO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggX2ZpcnN0R3JvdXAgKXtcclxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IDFcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBfY292ZXIuYW5pbWF0ZSgge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogX3dyYXBwZXIub3V0ZXJIZWlnaHQoKVxyXG4gICAgICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcclxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jb3Zlci5jc3MoICdoZWlnaHQnLCAnJyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3SXRlbXMuZWFjaCggZnVuY3Rpb24oIGkgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zaG93TmV3SXRlbXMoICQoIHRoaXMgKSwgaSApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGhhc0l0ZW1zID09IDAgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZW1vdmVCdG5Nb3JlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggX2ZpcnN0R3JvdXAgKXtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2ZpcnN0R3JvdXAgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9LCA1MDAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9zaG93TmV3SXRlbXMgPSBmdW5jdGlvbiggaXRlbSwgaW5kZXggKXtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZGVsYXkgPSAxMDA7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBfZmlyc3RHcm91cCApIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxheSA9IDFcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtLnJlbW92ZUNsYXNzKCAnbmV3JyApO1xyXG4gICAgICAgICAgICAgICAgfSwgaW5kZXggKiBkZWxheSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2luaXRHYWxsZXJ5ID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciB3cmFwSXRlbSA9ICcubWVkaWEtZ2FsbGVyeV9faXRlbSc7XHJcblxyXG4gICAgICAgICAgICAgICAgX2lzR2FsbGVyeSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgX3dyYXBwZXIuaXNvdG9wZSgge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1TZWxlY3Rvcjogd3JhcEl0ZW0sXHJcbiAgICAgICAgICAgICAgICAgICAgcGVyY2VudFBvc2l0aW9uOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hc29ucnk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uV2lkdGg6ICcubWVkaWEtZ2FsbGVyeV9fc2l6ZXInXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggX2ZpbHRlckZsYWcgKXtcclxuICAgICAgICAgICAgICAgICAgICBfd3JhcHBlci5pc290b3BlKCB7IGZpbHRlcjogJy4nKyBfc3dpdGNoQnRuLmZpbHRlciggJy5hY3RpdmUnICkuZGF0YSggJ3R5cGUnICkgfSApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBfcHJlbG9hZGVyLnJlbW92ZUNsYXNzKCAnYWN0aXZlJyApO1xyXG4gICAgICAgICAgICAgICAgfSwgMzAwIClcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9yZW1vdmVCdG5Nb3JlID0gZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICBfYnRuTW9yZS5jc3MoICdvcGFjaXR5JywgMCApO1xyXG5cclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9idG5Nb3JlLmNzcyggJ3BhZGRpbmcnLCAwICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9idG5Nb3JlLmFuaW1hdGUoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogNTAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9idG5Nb3JlLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIH0sIDMwMCApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2xvYWROZXdJdGVtcyA9IGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHBhdGggID0gX2ZpbGVMaW5rO1xyXG5cclxuICAgICAgICAgICAgICAgIF9wcmVsb2FkZXIuYWRkQ2xhc3MoICdhY3RpdmUnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3JlcXVlc3QuYWJvcnQoKTtcclxuICAgICAgICAgICAgICAgIF9yZXF1ZXN0ID0gJC5hamF4KCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBwYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnZ2FsbGVyeScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2U6IF9vYmouYXR0ciggJ2RhdGEtbG9hZGVkLWdyb3VwJyApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBfc3dpdGNoQnRuLmRhdGEoICd0eXBlJyApXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDIwMDAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKCBtc2cgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY292ZXIuaGVpZ2h0KCBfY292ZXIuaGVpZ2h0KCkgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hZGRHYWxsZXJ5Q29udGVudCggbXNnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICggWE1MSHR0cFJlcXVlc3QgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBYTUxIdHRwUmVxdWVzdC5zdGF0dXNUZXh0ICE9ICdhYm9ydCcgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydCggJ0Vycm9yIScgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9sb2FkTmV3SXRlbXMoKTtcclxuICAgICAgICAgICAgICAgIF9vbkV2ZW50cygpO1xyXG5cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgX2luaXQoKTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBTd2lwZXJQb3B1cCA9IGZ1bmN0aW9uICggb2JqLCBpbmRleCApIHtcclxuXHJcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX2JvZHkgPSAkKCAnYm9keScgKSxcclxuICAgICAgICAgICAgX3dyYXBwZXIgPSBfb2JqLnBhcmVudCgpLFxyXG4gICAgICAgICAgICBfZ2FsbGVyeVdyYXAgPSBfb2JqLnBhcmVudHMoICcubWVkaWEtZ2FsbGVyeScgKSxcclxuICAgICAgICAgICAgX2h0bWwgPSAkKCAnaHRtbCcgKSxcclxuICAgICAgICAgICAgX3dpbmRvdyA9ICQoIHdpbmRvdyApLFxyXG4gICAgICAgICAgICBfbGlua3MgPSBfd3JhcHBlci5maW5kKCAnLm1lZGlhLWdhbGxlcnlfX2l0ZW0gaW1nJyApLFxyXG4gICAgICAgICAgICBfcG9wdXAgPSBudWxsLFxyXG4gICAgICAgICAgICBfcG9wdXBJbm5lciA9IG51bGwsXHJcbiAgICAgICAgICAgIF9wb3B1cENsb3NlID0gbnVsbCxcclxuICAgICAgICAgICAgX3N3aXBlcldyYXBwZXIgPSBudWxsLFxyXG4gICAgICAgICAgICBfc3dpcGVyQ29udGFpbmVyID0gbnVsbCxcclxuICAgICAgICAgICAgX3N3aXBlclBhZ2luYXRpb24gPSBudWxsLFxyXG4gICAgICAgICAgICBfc3dpcGVyQnRuTmV4dCA9IG51bGwsXHJcbiAgICAgICAgICAgIF9zd2lwZXJCdG5QcmV2ID0gbnVsbCxcclxuICAgICAgICAgICAgX3N3aXBlciA9IG51bGw7XHJcblxyXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbiAoKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zZXRQaWN0dXJlU2l6ZVdoZW5SZXNpemUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIF9wb3B1cElubmVyLnBhcmVudCgpLm9uKHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VQb3B1cCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3BvcHVwSW5uZXIub24oe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oIGV2ZW50ICl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIF9wb3B1cENsb3NlLm9uKHtcclxuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jbG9zZVBvcHVwKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9hZGRpbmdWYXJpYWJsZXMgPSBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciB0eXBlID0gX2dhbGxlcnlXcmFwLmF0dHIoICdkYXRhLWxvYWRlZC10eXBlJyApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9wb3B1cCA9ICQoICc8ZGl2IGNsYXNzPVwic3dpcGVyLXBvcHVwXCI+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN3aXBlci1jb250YWluZXJcIj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN3aXBlci13cmFwcGVyXCI+PC9kaXY+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzd2lwZXItcGFnaW5hdGlvblwiPjwvZGl2PlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3dpcGVyLWJ1dHRvbi1uZXh0XCI+PC9kaXY+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzd2lwZXItYnV0dG9uLXByZXZcIj48L2Rpdj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PicgKTtcclxuICAgICAgICAgICAgICAgIF9zd2lwZXJXcmFwcGVyID0gX3BvcHVwLmZpbmQoICcuc3dpcGVyLXdyYXBwZXInICk7XHJcbiAgICAgICAgICAgICAgICBfc3dpcGVyQ29udGFpbmVyID0gX3BvcHVwLmZpbmQoICcuc3dpcGVyLWNvbnRhaW5lcicgKTtcclxuICAgICAgICAgICAgICAgIF9zd2lwZXJQYWdpbmF0aW9uID0gX3BvcHVwLmZpbmQoICcuc3dpcGVyLXBhZ2luYXRpb24nICk7XHJcbiAgICAgICAgICAgICAgICBfc3dpcGVyQnRuTmV4dCA9IF9wb3B1cC5maW5kKCAnLnN3aXBlci1idXR0b24tbmV4dCcgKTtcclxuICAgICAgICAgICAgICAgIF9zd2lwZXJCdG5QcmV2ID0gX3BvcHVwLmZpbmQoICcuc3dpcGVyLWJ1dHRvbi1wcmV2JyApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2FkZFZpZGVvID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBhY3RpdmVTbGlkZSA9IF9wb3B1cC5maW5kKCAnLnN3aXBlci1zbGlkZS1hY3RpdmUnICksXHJcbiAgICAgICAgICAgICAgICAgICAgc3JjID0gYWN0aXZlU2xpZGUuZmluZCggJ1tkYXRhLXNyY10nICkuZGF0YSggJ3NyYycgKSxcclxuICAgICAgICAgICAgICAgICAgICBpbm5lckNvbnRlbnQgPSAkKCAnPGlmcmFtZSBzcmM9XCInICsgc3JjICsgJ1wiPiBmcmFtZWJvcmRlcj1cIjBcIiBhbGxvd2Z1bGxzY3JlZW4+PC9pZnJhbWU+JyApO1xyXG5cclxuICAgICAgICAgICAgICAgICQoICcuc3dpcGVyLXNsaWRlLWFjdGl2ZScgKS5maW5kKCAnLnN3aXBlci1wb3B1cF9fdmlkZW8nICkucHJlcGVuZCggaW5uZXJDb250ZW50ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfYnVpbGRQb3B1cCA9IGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgX2FkZGluZ1ZhcmlhYmxlcygpO1xyXG4gICAgICAgICAgICAgICAgX2NvbnRlbnRGaWxsaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBfaW5pdFN3aXBlcigpO1xyXG4gICAgICAgICAgICAgICAgX3N3aXBlci5zbGlkZVRvKCBpbmRleCwgMCApO1xyXG4gICAgICAgICAgICAgICAgX3BvcHVwLmFkZENsYXNzKCAnYWN0aXZlJyApO1xyXG4gICAgICAgICAgICAgICAgX3NldFN0eWxlcygpO1xyXG4gICAgICAgICAgICAgICAgX3N3aXBlci5vblJlc2l6ZSgpO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2Nsb3NlUG9wdXAgPSBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgIF9wb3B1cC5yZW1vdmVDbGFzcyggJ2FjdGl2ZScgKTtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgX2h0bWwuY3NzKHtvdmVyZmxvdzogJycsIHBhZGRpbmdSaWdodDogJyd9KTtcclxuICAgICAgICAgICAgICAgICAgICBfcG9wdXAucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICB9LCAzMDAgKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9jb250ZW50RmlsbGluZyA9IGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgJC5lYWNoKCBfbGlua3MsIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbm5lckNvbnRlbnQgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhU1JDID0gbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJlbG9hZGVyID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCAkKCB0aGlzICkuaGFzQ2xhc3MoICdtZWRpYS1nYWxsZXJ5X19pdGVtX3ZpZGVvJyApICl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVsb2FkZXIgPSAnPGkgY2xhc3M9XCJmYSBmYS1zcGlubmVyIGZhLXNwaW5cIj48L2k+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJDb250ZW50ID0gJzxkaXYgY2xhc3M9XCJzd2lwZXItcG9wdXBfX3ZpZGVvXCIvPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFTUkMgPSAnZGF0YS1zcmM9XCInICsgJCh0aGlzKS5hdHRyKCBcImhyZWZcIiApICsgJ1wiJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZWxvYWRlciA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbm5lckNvbnRlbnQgPSAnPGltZyBzcmM9XCInICsgJCggdGhpcyApLmF0dHIoICdzcmMnICkgKyAnXCI+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVNSQyA9ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdJdGVtID0gJCggJzxkaXYgY2xhc3M9XCJzd2lwZXItc2xpZGVcIj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN3aXBlci1wb3B1cF9faW5uZXJcIiAnICsgZGF0YVNSQyArICc+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIGNsYXNzPVwic3dpcGVyLXBvcHVwX19jbG9zZVwiPjwvYT5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgKyBwcmVsb2FkZXIgKyAnXFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICsgaW5uZXJDb250ZW50ICsgJ1xcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzd2lwZXItc2xpZGVfX3RpdGxlXCI+JyArICQoIHRoaXMgKS5hdHRyKCAndGl0bGUnICkgKyAnPC9zcGFuPlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9zd2lwZXJXcmFwcGVyLmFwcGVuZCggbmV3SXRlbSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBuZXdJdGVtLmZpbmQoICdpbWcnICkub24oIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZDogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIHRoaXMgKS5hdHRyKCAnZGF0YS13aWR0aCcsIHRoaXMud2lkdGggKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIHRoaXMgKS5hdHRyKCAnZGF0YS1oZWlnaHQnLCB0aGlzLmhlaWdodCApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NldFBpY3R1cmVTaXplKCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgJCggdGhpcyApICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9ib2R5LmFwcGVuZCggX3BvcHVwICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3BvcHVwSW5uZXIgPSBfcG9wdXAuZmluZCggJy5zd2lwZXItcG9wdXBfX2lubmVyJyApO1xyXG4gICAgICAgICAgICAgICAgX3BvcHVwQ2xvc2UgPSBfcG9wdXAuZmluZCggJy5zd2lwZXItcG9wdXBfX2Nsb3NlJyApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2dldFNjcm9sbFdpZHRoID0gZnVuY3Rpb24gKCl7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2RpdicgKSxcclxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxiYXJXaWR0aCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKCBzY3JvbGxEaXYgKTtcclxuICAgICAgICAgICAgICAgIHNjcm9sbGJhcldpZHRoID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCggc2Nyb2xsRGl2ICk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2Nyb2xsYmFyV2lkdGg7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9pbml0U3dpcGVyID0gZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICBfc3dpcGVyID0gbmV3IFN3aXBlciggX3N3aXBlckNvbnRhaW5lciwge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb246IF9zd2lwZXJQYWdpbmF0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIG5leHRCdXR0b246IF9zd2lwZXJCdG5OZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgIHByZXZCdXR0b246IF9zd2lwZXJCdG5QcmV2LFxyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbkNsaWNrYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBvblNsaWRlQ2hhbmdlRW5kOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmVtb3ZlVmlkZW8oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkKCAnLnN3aXBlci1zbGlkZS1hY3RpdmUnICkuZmluZCggJ1tkYXRhLXNyY10nICkubGVuZ3RoICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWRkVmlkZW8oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfYnVpbGRQb3B1cCgpO1xyXG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xyXG4gICAgICAgICAgICAgICAgX29ialsgMCBdLm9iaiA9IF9zZWxmO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfcmVtb3ZlVmlkZW8gPSBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9IF9wb3B1cC5maW5kKCAnLnN3aXBlci1zbGlkZScgKSxcclxuICAgICAgICAgICAgICAgICAgICB2aWRlb0ZyYW1lID0gaXRlbXMuZmluZCggJy5zd2lwZXItcG9wdXBfX3ZpZGVvIGlmcmFtZScgKTtcclxuICAgICAgICAgICAgICAgIHZpZGVvRnJhbWUucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfc2V0UGljdHVyZVNpemUgPSBmdW5jdGlvbiggcGljV2lkdGgsIHBpY0hlaWdodCwgcGljICl7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGsgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggKCBfcG9wdXAud2lkdGgoKS9waWNXaWR0aCApID4gKCBfcG9wdXAuaGVpZ2h0KCkvcGljSGVpZ2h0ICkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgayA9IF9wb3B1cC5oZWlnaHQoKS9waWNIZWlnaHQgO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBrID0gX3BvcHVwLndpZHRoKCkvcGljV2lkdGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBrID49IDEgKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcGljLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwid2lkdGhcIjogcGljV2lkdGgqMC44NSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJoZWlnaHRcIjogcGljSGVpZ2h0KjAuODVcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBwaWMuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ3aWR0aFwiOiBrKnBpY1dpZHRoKjAuODUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaGVpZ2h0XCI6IGsqcGljSGVpZ2h0KjAuODVcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfc2V0UGljdHVyZVNpemVXaGVuUmVzaXplID0gZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICAkLmVhY2goIF9zd2lwZXJXcmFwcGVyLmZpbmQoICdpbWcnICksIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX3NldFBpY3R1cmVTaXplKCAkKCB0aGlzICkuZGF0YSggJ3dpZHRoJyApLCAkKCB0aGlzICkuZGF0YSggJ2hlaWdodCcgKSwgJCggdGhpcyApICk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3NldFN0eWxlcyA9IGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgX2h0bWwuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZ1JpZ2h0OiBfZ2V0U2Nyb2xsV2lkdGgoKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICBfaW5pdCgpO1xyXG5cclxuICAgIH07XHJcblxyXG59ICkoKTtcclxuIl19

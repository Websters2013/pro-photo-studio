( function(){

    $( function(){

        $.each( $( '.anchor' ), function() {
            new Anchor ( $( this ) );
        } );

        $.each( $( '.partners' ), function() {
            new Sliders ( $( this ) );
        } );

        $.each( $( '.catalog' ), function() {
            new Sliders ( $( this ) );
        } );

        $.each( $( '.promo__slider' ), function() {
            new Sliders ( $( this ) );
        } );

        $.each( $( '.sub-menu' ), function() {
            new Sliders ( $( this ) );
        } );

        $.each( $( '.media-gallery' ), function() {
            new Sliders ( $( this ) );
        } );

        $.each( $( '.mobile-menu' ), function() {
            new Menu ( $( this ) );
        } );

        $.each( $( '.blog__sort' ), function () {
            new Sort( $( this ) );
        } );

        $.each( $( '.head-shot' ), function () {
            new HeadShotLoader( $( this ) );
        } );

        $.each( $( '.hiring__item' ), function () {
            new Hiring( $( this ) );
        } );

        $.each( $( '.rates__item-swiper' ), function () {
            new Sliders( $( this ) );
        } );

        $.each( $( '.place-order__form' ), function () {
            new PlaceOrderForm( $( this ) );
        } );

        $.each( $('.place-order__sign'), function () {

            new ContactSign( $(this) );

        } );

    } );

    var Anchor = function ( obj ) {
        var _obj = obj,
            _window = $( 'html, body' );

        var _onEvents = function() {

                _obj.on( {
                    click: function() {

                        if ( $('.menu').hasClass( 'mobile' ) ) {
                            $( ".menu-btn" ).trigger( 'click' );
                        }

                        _window.animate( {
                            scrollTop: $( $.attr(this, 'href') ).offset().top
                        }, 600);
                        $( '.menu' )[0].obj.destroy();

                        return false;
                    }
                } );

            },
            _construct = function() {
                _onEvents();
            };

        _construct()
    };

    var Hiring = function ( obj ) {
        var _obj = obj,
            _btn = _obj.find( '.hiring__btn' ),
            _forum = _obj.find( '.hiring__form' ),
            _hideContent = _obj.find( '.hiring__item-hide' ),
            _window = $( 'html, body' );

        var _onEvents = function() {

                _btn.on( {
                    click: function() {

                        _hideContent.addClass( 'hide' );
                        _forum.addClass( 'visible' );

                        return false;
                    }
                } );

            },
            _construct = function() {
                _onEvents();
            };

        _construct()
    };

    var Menu = function( obj ){

        //private properties
        var _obj = obj,
            _btn = $( '.mobile-menu-btn' );

        //private methods
        var _constructor = function(){
                _onEvents();
            },
            _onEvents = function(){

                _btn.on( 'click', function() {

                    if ( $( this).hasClass( 'close' ) ){
                        _closeMenu();
                    } else {
                        _openMenu();
                    }

                } );

            },
            _openMenu = function(){
                _btn.addClass( 'close' );
                _obj.addClass( 'visible' );
            },
            _closeMenu = function(){
                _btn.removeClass( 'close' );
                _obj.removeClass( 'visible' );
            };

        //public properties

        //public methods

        _constructor();

    };

    var PlaceOrderForm = function( obj ){

        //private properties
        var _obj = obj,
            _stepsWrap = $( '.place-order__steps' ),
            _stepsItem = _stepsWrap.find( '.place-order__steps-item' ),
            _stepsLine = _stepsWrap.find( 'div > span' ),
            _formWrap = _obj.find( '.place-order__form-wrap' ),
            _formItemBlock = _obj.find( '.place-order__form-item' ),
            _fields = _formItemBlock.find( 'input' ),
            _checkbox = _formItemBlock.find( 'input[type=checkbox]' ),
            _select = _formItemBlock.find( 'select' ),
            _file = _formItemBlock.find( 'input[type=file]' ),
            _inputs = _formItemBlock.find( '[data-required]' ),
            _btn = _formItemBlock.find( '.place-order__form-next' ),
            _changeNumber = _formItemBlock.find( '.place-order__form-num' ),
            _changeNumberPlus = _changeNumber.find( '.plus' ),
            _changeNumberMinus = _changeNumber.find( '.minus' );

        //private methods
        var _constructor = function(){
                _setHeight();
                _onEvents();
            },
            _setHeight = function () {

                _formWrap.css( 'height', _formItemBlock.filter( '.active' ).outerHeight() )

            },
            _nextStep = function ( curForm ) {

                var curFormItemBlock = curForm,
                    nextFormItemBlock = curFormItemBlock.next( '.place-order__form-item' );

                curFormItemBlock.removeClass( 'active' );
                nextFormItemBlock.addClass( 'active' );

                for ( var i = 0; i <= nextFormItemBlock.index(); i++ ){
                    _stepsItem.eq(i).addClass( 'active' );
                }

                _stepsLine.css( 'width', ( nextFormItemBlock.index() + 1 ) * 100 / 4 +'%' );

                _setHeight();

            },
            _addNotTouchedClass = function ( form ) {

                var curFormItemBlock = form,
                    fields = curFormItemBlock.find( '[data-required]' );

                fields.each( function() {

                    var curItem = $(this);

                    if( curItem.val() === '' || curItem.val() === '0' || !curItem.is( ':checked' ) ){

                        curItem.addClass( 'not-touched' );
                        curItem.parents( '.websters-select' ).addClass( 'not-touched' );

                        _validateField( curFormItemBlock, curItem );

                    }

                } );

            },
            _makeNotValid = function ( field ) {
                field.addClass( 'not-valid' );
                field.parents( '.websters-select' ).addClass( 'not-valid' );
                field.removeClass( 'valid' );
            },
            _makeValid = function ( field ) {
                field.removeClass( 'not-valid' );
                field.parents( '.websters-select' ).removeClass( 'not-valid' );
                field.addClass( 'valid' );
            },
            _validateEmail = function ( email ) {
                var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                return re.test(email);
            },
            _validateField = function ( form, field ) {

                var curFormItemBlock = $( this ),
                    type = field.attr( 'type'),
                    tagName = field[0].tagName;

                if( type === 'email' || type === 'text' || type === 'number' ){

                    if( field.val() === '' ){
                        _makeNotValid( field );
                        return false;
                    }

                }

                if( type === 'email' ){
                    if( !_validateEmail( field.val() ) ){
                        _makeNotValid( field );
                        return false;
                    }
                }

                if( type === 'number' ){
                    if( field.val() <= 0 ) {
                        _makeNotValid( field );
                        return false;
                    }
                }

                if( tagName.toLocaleLowerCase() == 'select' ){

                    if( field.val() === 0 ){
                        _makeNotValid( field );
                        return false;
                    }

                }

                _makeValid( field );

                if( _fields.filter( '.not-valid' ).length === 0 ) {

                    _nextStep( curFormItemBlock );

                }

            },
            _onEvents = function(){

                _obj.on( 'submit', function () {

                } );

                _fields.on( {
                    focus: function() {

                        $( this ).removeClass( 'not-touched' );

                    },
                    focusout: function() {

                        var curItem = $(this),
                            curForm = curItem.parents( '.place-order__form-item' );

                        _validateField( curForm, curItem );

                    },
                    keyup: function () {

                        var curItem = $(this),
                            curForm = curItem.parents( '.place-order__form-item' );

                        _validateField( curForm, curItem );
                    }
                } );

                _inputs.on( {
                    focusout: function() {

                        var letterCounter = 0;

                        _inputs.each( function () {

                            var curItem = $(this);

                            if ( curItem.val().length > 0 ){
                                letterCounter = letterCounter + 1
                            }

                        } );

                        if ( letterCounter === 0 ) {
                            _inputs.removeClass( 'not-valid' );
                        }

                    }
                } );

                _select.on( 'change', function () {

                    var curSelect = $( this ),
                        curParent = curSelect.parents( '.websters-select' );

                    curSelect.removeClass( 'not-valid not-touched' );
                    curParent.removeClass( 'not-valid not-touched' );

                } );

                _checkbox.on( 'change', function () {

                    var curSelect = $( this ),
                        curParent = curSelect.parents( '.websters-select' );

                    curSelect.removeClass( 'not-valid not-touched' );
                    curParent.removeClass( 'not-valid not-touched' );

                } );

                _btn.on( 'click', function() {

                    var curBtn = $( this ),
                        curFormItemBlock = curBtn.parents( '.place-order__form-item' );

                    if ( curFormItemBlock.find( '[data-required]' ).val() == 0 || curFormItemBlock.find( '[data-required]' ).val() == '' ){

                        _addNotTouchedClass( curFormItemBlock );

                    }

                    if( _fields.hasClass('not-touched') || _fields.hasClass('not-valid') || _select.hasClass('not-valid') ) {

                        _obj.find('.not-touched:first').focus();
                        _obj.find('.not-valid:first').focus();

                    } else {

                        _nextStep( curFormItemBlock );

                    }

                    return false;

                } );

                _changeNumberPlus.on( 'click', function() {

                    var curBtn = $( this ),
                        curParent = curBtn.parents( '.place-order__form-fieldset' ),
                        curInput = curParent.find( 'input[type=number]' ),
                        curNum = + curInput.val();

                    curInput.val( curNum + 1 );
                    curInput.removeClass( 'not-valid' );

                    return false;

                } );

                _changeNumberMinus.on( 'click', function() {

                    var curBtn = $( this ),
                        curParent = curBtn.parents( '.place-order__form-fieldset' ),
                        curInput = curParent.find( 'input[type=number]' ),
                        curNum = + curInput.val();

                    if ( curNum > 0 ){
                        curInput.val( curNum - 1 );
                        curInput.removeClass( 'not-valid' );
                    }

                    return false;

                } );

                _file.on( 'change', function () {

                    var curElem = $( this ),
                        curText = curElem.next( 'span' );

                    curText.text( curElem.val() )

                } );

            };

        //public properties

        //public methods

        _constructor();

    };

    var ContactSign = function (obj) {

        //private properties
        var _self = this,
            _obj = obj,
            _area = _obj.find('.place-order__sign-area'),
            _note = _obj.find('span'),
            _window = $( window ),
            _result;

        //private methods
        var _destroySignature =  function() {

                _area.signature('destroy');

            },
            _onEvents = function() {

                _window.on( {
                    resize: function() {

                        _destroySignature();
                        _initSignature();

                    }
                } );

                _area.on( {
                    'click': function() {

                        _note.remove();

                    },
                    'mouseleave': function () {

                        if( !_area.signature('isEmpty') ){

                            _result = _area.signature('toSVG');
                            _area.removeClass( 'contact__sign-area-red' );
                            $( '.sign_val' ).val( _result );

                        } else {

                            _area.addClass( 'contact__sign-area-red' );
                            $( '.sign_val' ).val('');

                        }

                    }

                } );

            },
            _init = function() {

                _obj[0].obj = _self;
                _onEvents();
                _initSignature();

            },
            _initSignature = function() {
                _area.signature( {
                    thickness: 1,
                    color: '#b7b7b7'
                } );
            };

        _init();
    };

    var Sliders = function( obj ) {

        //private properties
        var _obj = obj,
            _partnersSlider = _obj.find( '.partners__swiper' ),
            _subMenuSlider = _obj.find( '.sub-menu__swiper' ),
            _mediaGallerySlider = _obj.find( '.media-gallery__switcher' ),
            _catalogSlider = _obj.find( '.catalog__swiper' ),
            _promoSlider = _obj.find( '.promo__swiper' ),
            _ratesSlider = _obj.find( '.rates__swiper' ),
            _partnersPrev = _obj.find( '.partners__swiper-prev' ),
            _catalogPrev = _obj.find( '.catalog__swiper-prev' ),
            _promoPrev = _obj.find( '.promo__swiper-prev' ),
            _ratesPrev = _obj.find( '.rates__swiper-prev' ),
            _partnersNext = _obj.find( '.partners__swiper-next' ),
            _catalogNext = _obj.find( '.catalog__swiper-next' ),
            _promoNext = _obj.find( '.promo__swiper-next' ),
            _ratesNext = _obj.find( '.rates__swiper-next' ),
            _partners,
            _catalog,
            _subMenu,
            _promo,
            _rates,
            _mediaGallery,
            _activeSubMenu = false,
            _activeMediaGallery = false,
            _window = $( window );

        //private methods
        var _initSlider = function() {

                _partners = new Swiper ( _partnersSlider, {
                    autoplay: 2000,
                    speed: 500,
                    effect: 'slide',
                    slidesPerView: 6,
                    loop: true,
                    loopedSlides: 20,
                    spaceBetween: 80,
                    nextButton: _partnersNext,
                    prevButton: _partnersPrev,
                    breakpoints: {
                        400: {
                            slidesPerView: 1
                        },
                        768: {
                            slidesPerView: 2
                        },
                        1024: {
                            slidesPerView: 3
                        },
                        1200: {
                            slidesPerView: 4
                        }
                    }
                } );

                _catalog = new Swiper ( _catalogSlider, {
                    autoplay: 10000,
                    speed: 500,
                    effect: 'slide',
                    slidesPerView: 3,
                    loop: true,
                    nextButton: _catalogNext,
                    prevButton: _catalogPrev,
                    breakpoints: {
                        767: {
                            slidesPerView: 1
                        },
                        1199: {
                            slidesPerView: 2
                        }
                    }
                } );

                _promo = new Swiper ( _promoSlider, {
                    autoplay: 10000,
                    speed: 500,
                    effect: 'slide',
                    slidesPerView: 1,
                    loop: true,
                    nextButton: _promoNext,
                    prevButton: _promoPrev
                } );

                _rates = new Swiper ( _ratesSlider, {
                    autoplay: false,
                    speed: 500,
                    effect: 'slide',
                    slidesPerView: 'auto',
                    loop: false,
                    nextButton: _ratesNext,
                    prevButton: _ratesPrev
                } );


                if ( _window.outerWidth() < 768  ){

                    setTimeout( function () {

                        _activeSubMenu = true;
                        _subMenu = new Swiper ( _subMenuSlider, {
                            autoplay: false,
                            speed: 500,
                            effect: 'slide',
                            slidesPerView: 'auto',
                            simulateTouch: false,
                            onInit: function() {
                                _subMenuSlider[0].swiper.slideTo( _subMenuSlider.find( '.active' ).index() , 200, false );
                            },
                            onSlideChangeStart: function() {
                                _obj.removeClass( 'start' );
                                _obj.removeClass( 'end' );
                            },
                            onReachBeginning: function() {
                                setTimeout( function () {
                                    _obj.addClass('start');
                                }, 300 )
                            },
                            onReachEnd: function() {
                                setTimeout( function () {
                                    _obj.addClass('end');
                                }, 300 )
                            }
                        } );

                        _activeMediaGallery = true;
                        _mediaGallery = new Swiper ( _mediaGallerySlider, {
                        autoplay: false,
                        speed: 500,
                        effect: 'slide',
                        slidesPerView: 'auto',
                        simulateTouch: false,
                        onInit: function() {
                            _mediaGallerySlider[0].swiper.slideTo( _mediaGallerySlider.find( '.active' ).index() , 200, false );
                        },
                        onSlideChangeStart: function() {
                            _mediaGallerySlider.removeClass( 'start' );
                            _mediaGallerySlider.removeClass( 'end' );
                        },
                        onReachBeginning: function() {
                            setTimeout( function () {
                                _mediaGallerySlider.addClass('start');
                            }, 300 )
                        },
                        onReachEnd: function() {
                            setTimeout( function () {
                                _mediaGallerySlider.addClass('end');
                            }, 300 )
                        }
                    } );

                    }, 300 );

                }

            },
            _onEvent = function() {

                _window.on( {
                    'resize': function() {

                        if ( _window.outerWidth() > 768  ){
                            _destroySlider();
                        } else {
                            _initSlider();
                        }

                    }
                } )

            },
            _destroySlider = function() {

                if ( _window.outerWidth() >= 768 && _activeSubMenu  ) {
                    _subMenuSlider[ 0 ].swiper.destroy( false, true );
                }

                if ( _window.outerWidth() >= 768 && _activeMediaGallery  ) {
                    _mediaGallerySlider[ 0 ].swiper.destroy( false, true );
                }

            },
            _init = function() {
                _onEvent();
                _initSlider();
            };

        //public properties

        //public methods

        _init();
    };

    var Sort = function (obj) {

        //private properties
        var _obj = obj,
            _site = $( '.site' ),
            _window = $( window );

        //private methods
        var _construct = function () {

                _onEvent();

            },
            _onEvent = function() {

                _site.on(
                    'click', function ( e ) {

                        if ( _obj.hasClass( 'open' ) && $( e.target ).closest( _obj ).length == 0 ){
                            _closeLanguage();
                        }

                    }
                );

                _obj.on( 'click', function () {

                    var curElem = $( this );

                    if( curElem.hasClass( 'open' ) && _window.width() < 1200 ){
                        _closeLanguage();
                    } else if ( _window.width() < 1200 ) {
                        _openLanguage();
                    }

                } )

            },
            _closeLanguage = function() {
                _obj.removeClass( 'open' );
            },
            _openLanguage = function() {
                _obj.addClass( 'open' )
            };

        //public properties

        //public methods

        _construct();
    };

    var HeadShotLoader = function (obj) {

        //private properties
        var _obj = obj,
            _body = $( 'body' ),
            _fileLink = _body.data( 'action' ),
            _btnMore = _obj.find( '.head-shot__command-more' ),
            _preloader = _obj.find( '.preloader' ),
            _wrapper = _obj.find( '.head-shot__command-wrap' ),
            _cover = _obj.find( '.head-shot__command-cover' ),
            _firstGroup = true,
            _request = new XMLHttpRequest();

        //private methods
        var _construct = function () {
                _loadNewItems();
                _onEvent();
            },
            _addGalleryContent = function ( msg ) {

                var hasItems = msg.has_items,
                    getItems = msg.items,
                    newBlock;

                $.each( getItems, function( ){

                    var curItem = this;

                    newBlock = $( '<div class="head-shot__command-item new">'+
                        '<img src="'+ curItem.dummy +'" alt="'+ curItem.title +'"/>'+
                        '</div>' );

                    _wrapper.append( newBlock );

                } );

                var newItems = _wrapper.find( '.new' );

                setTimeout( function(){
                    _heightAnimation( hasItems, newItems );
                }, 550 );

                _obj.attr( 'data-loaded-group', +_obj.attr( 'data-loaded-group' ) + 1 );

            },
            _heightAnimation = function( hasItems, newItems ){

                var duration = 500;

                if ( _firstGroup ){
                    duration = 1
                }

                _cover.animate( {
                    height: _wrapper.outerHeight()
                }, {
                    duration: duration,
                    complete: function(){

                        _cover.css( 'height', '' );

                        newItems.each( function( i ){
                            _showNewItems( $( this ), i );
                        } );

                        if ( hasItems == 0 ){
                            _removeBtnMore();
                        }

                    }
                } );

                if ( _firstGroup ){
                    setTimeout( function() {
                        _firstGroup = false;
                    }, 500 );
                }

            },
            _showNewItems = function( item, index ){

                var delay = 100;

                if ( _firstGroup ) {
                    delay = 1
                }

                setTimeout( function() {
                    item.removeClass( 'new' );
                }, index * delay );

            },
            _loadNewItems = function(){

                var path  = _fileLink;

                _preloader.addClass( 'active' );

                _request.abort();
                _request = $.ajax( {
                    url: path,
                    data: {
                        action: 'gallery',
                        type: 'headshot',
                        page: _obj.attr( 'data-loaded-group' ),
                    },
                    dataType: 'json',
                    timeout: 20000,
                    type: "GET",
                    success: function ( msg ) {

                        _cover.height( _cover.height() );

                        _addGalleryContent( msg );

                    },
                    error: function ( XMLHttpRequest ) {
                        if( XMLHttpRequest.statusText != 'abort' ) {
                            alert( 'Error!' );
                        }
                    }
                } );

            },
            _removeBtnMore = function(){

                _btnMore.css( 'opacity', 0 );

                setTimeout( function(){

                    _btnMore.css( 'padding', 0 );

                    _btnMore.animate( {
                        height: 0
                    }, {
                        duration: 500,
                        complete: function(){
                            _btnMore.remove();
                        }
                    } );

                }, 300 );

            },
            _onEvent = function() {

                _btnMore.on( 'click', function () {

                    _loadNewItems();

                    return false;

                } );

            };

        //public properties

        //public methods

        _construct();
    };

} )();
( function(){

    "use strict";

    $(function () {

        $.each( $( '.media-gallery' ), function(){

            new MediaGallery ( $( this ) )

        } );

    } );

    var MediaGallery = function( obj ) {

        var _obj = obj,
            _body = $( 'body' ),
            _wrapper = _obj.find( '.media-gallery__wrap' ),
            _sizer = $( '<div class="media-gallery__sizer"></div>' ),
            _switcher = _obj.find( '.media-gallery__switcher' ),
            _switchBtn = _switcher.find( 'button' ),
            _cover = _obj.find( '.media-gallery__cover' ),
            _preloader = _obj.find( '.preloader' ),
            _btnMore = _obj.find( '.media-gallery__more' ),
            _fileLink = _body.data( 'action' ),
            _window = $( window ),
            _isGallery = false,
            _firstGroup = true,
            _filterFlag = true,
            _request = new XMLHttpRequest();

        var _onEvents = function () {

                _switchBtn.on( 'click', function () {

                    var curBtn = $( this ),
                        curType = curBtn.data( 'type' );

                    _switchBtn.removeClass( 'active' );
                    curBtn.addClass( 'active' );

                    _obj.attr( 'data-loaded-group', 0 );

                    _loadNewItems( curType );

                    _filterFlag = true;

                    return false;

                } );

                _btnMore.on( {
                    click: function() {
                        _loadNewItems();

                        _filterFlag = false;

                        return false;
                    }
                } );

                _obj.on( 'click', '.media-gallery__item', function() {

                    SwiperPopup( $( this ), $( this ).index() - 1 );

                    _filterFlag = true;

                    return false;

                } );

            },
            _addGalleryContent = function ( msg ) {

                if ( _obj.attr( 'data-loaded-group' ) !== 0 && _isGallery ){
                    _destroyGallery();
                }

                var hasItems = msg.has_items,
                    getItems = msg.items,
                    newBlock;

                if ( _filterFlag ){
                    _wrapper.html( _sizer );
                }

                $.each( getItems, function( ){

                    var curItem = this;

                    newBlock = $( '<div class="media-gallery__item new '+ curItem.type +'" title="' + this.title + '" data-href="'+ curItem.dummy__big +'">'+
                        '<img src="'+ curItem.dummy +'" alt="'+ curItem.type +'" />'+
                        '</div>' );

                    if ( curItem.video == 1 ){
                        newBlock.addClass( 'media-gallery__item_video' );
                    }

                    _wrapper.append( newBlock );

                } );

                var newItems = _wrapper.find( '.new' );

                _wrapper.imagesLoaded( function() {

                    _initGallery();

                    setTimeout( function(){
                        _heightAnimation( hasItems, newItems );
                    }, 50 );

                });

                _obj.attr( 'data-loaded-group', +_obj.attr( 'data-loaded-group' )+1 );

            },
            _destroyGallery = function() {

                _wrapper.isotope( 'destroy' );
                _isGallery = false;

            },
            _heightAnimation = function( hasItems, newItems ){

                var duration = 500;

                if ( _firstGroup ){
                    duration = 1
                }

                _cover.animate( {
                    height: _wrapper.outerHeight()
                }, {
                    duration: duration,
                    complete: function(){

                        _cover.css( 'height', '' );

                        newItems.each( function( i ){
                            _showNewItems( $( this ), i );
                        } );

                        if ( hasItems == 0 ){
                            _removeBtnMore();
                        } else if ( hasItems > 0 ) {
                            _showBtnMore();
                        }

                    }
                } );

                if ( _firstGroup ){
                    setTimeout( function() {
                        _firstGroup = false;
                    }, 500 );
                }

            },
            _showNewItems = function( item, index ){

                var delay = 100;

                if ( _firstGroup ) {
                    delay = 1
                }

                setTimeout( function() {
                    item.removeClass( 'new' );
                }, index * delay );

            },
            _initGallery = function () {

                var wrapItem = '.media-gallery__item';

                _isGallery = true;

                _wrapper.isotope( {
                    itemSelector: wrapItem,
                    percentPosition: true,
                    masonry: {
                        columnWidth: '.media-gallery__sizer'
                    }
                } );

                _preloader.removeClass( 'active' );

            },
            _showBtnMore = function () {

                _btnMore.removeClass( 'hide' );

            },
            _removeBtnMore = function(){

                _btnMore.addClass( 'hide' );

            },
            _loadNewItems = function(){

                var path  = _fileLink;

                _preloader.addClass( 'active' );

                _request.abort();
                _request = $.ajax( {
                    url: path,
                    data: {
                        action: 'gallery',
                        page: _obj.attr( 'data-loaded-group' ),
                        type: _switchBtn.filter( '.active' ).data( 'type' )
                    },
                    dataType: 'json',
                    timeout: 20000,
                    type: "GET",
                    success: function ( msg ) {

                        _cover.height(_cover.height());
                        _addGalleryContent(msg);

                    },
                    error: function ( XMLHttpRequest ) {
                        if( XMLHttpRequest.statusText != 'abort' ) {
                            alert( 'Error!' );
                        }
                    }
                } );

            },
            _init = function () {

                _loadNewItems();
                _onEvents();

            };

        _init();

    };

    var SwiperPopup = function ( obj, index ) {

        var _self = this,
            _obj = obj,
            _body = $( 'body' ),
            _wrapper = _obj.parent(),
            _galleryWrap = _obj.parents( '.media-gallery' ),
            _html = $( 'html' ),
            _window = $( window ),
            _links = _wrapper.find( '.media-gallery__item' ),
            _popup = null,
            _popupInner = null,
            _popupClose = null,
            _swiperWrapper = null,
            _swiperContainer = null,
            _swiperPagination = null,
            _swiperBtnNext = null,
            _swiperBtnPrev = null,
            _swiper = null;

        var _addEvents = function(){

                _window.on({

                    resize: function (){

                        _setPictureSizeWhenResize();

                    }

                });

                _popupInner.parent().on({

                    click: function(){

                        _closePopup();

                    }

                });

                _popupInner.on({

                    click: function( event ){

                        event.stopPropagation();

                    }

                });

                _popupClose.on({
                    click: function(){

                        _closePopup();
                        return false;

                    }
                })

            },
            _addingVariables = function(){

                var type = _galleryWrap.attr( 'data-loaded-type' );

                _popup = $( '<div class="swiper-popup">\
                                    <div class="swiper-container">\
                                        <div class="swiper-wrapper"></div>\
                                        <div class="swiper-pagination"></div>\
                                        <div class="swiper-button-next"></div>\
                                        <div class="swiper-button-prev"></div>\
                                    </div>\
                                </div>' );
                _swiperWrapper = _popup.find( '.swiper-wrapper' );
                _swiperContainer = _popup.find( '.swiper-container' );
                _swiperPagination = _popup.find( '.swiper-pagination' );
                _swiperBtnNext = _popup.find( '.swiper-button-next' );
                _swiperBtnPrev = _popup.find( '.swiper-button-prev' );

            },
            _addVideo = function () {

                var activeSlide = _popup.find( '.swiper-slide-active' ),
                    src = activeSlide.find( '[data-src]' ).data( 'src' ),
                    innerContent = $( '<iframe src="' + src + '"> frameborder="0" allowfullscreen></iframe>' );

                $( '.swiper-slide-active' ).find( '.swiper-popup__video' ).prepend( innerContent );

            },
            _buildPopup = function(){

                _addingVariables();
                _contentFilling();
                _initSwiper();
                _swiper.slideTo( index, 0 );
                _popup.addClass( 'active' );
                _setStyles();
                _swiper.onResize();

            },
            _closePopup = function(){

                _popup.removeClass( 'active' );
                setTimeout( function(){
                    _html.css({overflow: '', paddingRight: ''});
                    _popup.remove();
                }, 300 );

            },
            _contentFilling = function(){

                $.each( _links, function(){

                    var innerContent = null,
                        dataSRC = null,
                        preloader = null;

                    if ( $( this ).hasClass( 'media-gallery__item_video' ) ){

                        preloader = '<i class="fa fa-spinner fa-spin"></i>';
                        innerContent = '<div class="swiper-popup__video"/>';
                        dataSRC = 'data-src="' + $(this).data( "href" ) + '"';

                    } else {

                        preloader = '';
                        innerContent = '<img src="' + $(this).data( "href" ) + '">';
                        dataSRC = '';

                    }

                    var newItem = $( '<div class="swiper-slide">\
                                        <div class="swiper-popup__inner" ' + dataSRC + '>\
                                            <a href="#" class="swiper-popup__close"></a>\
                                            ' + preloader + '\
                                            ' + innerContent + '\
                                            <span class="swiper-slide__title">' + $( this ).attr( 'title' ) + '</span>\
                                        </div>\
                                    </div>' );

                    _swiperWrapper.append( newItem );

                    newItem.find( 'img' ).on( {
                        load: function(){
                            $( this ).attr( 'data-width', this.width );
                            $( this ).attr( 'data-height', this.height );
                            _setPictureSize( this.width, this.height, $( this ) );
                        }
                    } );

                } );

                _body.append( _popup );

                _popupInner = _popup.find( '.swiper-popup__inner' );
                _popupClose = _popup.find( '.swiper-popup__close' );

            },
            _getScrollWidth = function (){
                var scrollDiv = document.createElement( 'div' ),
                    scrollbarWidth = null;
                document.body.appendChild( scrollDiv );
                scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
                document.body.removeChild( scrollDiv );
                return scrollbarWidth;
            },
            _initSwiper = function(){

                _swiper = new Swiper( _swiperContainer, {
                    pagination: _swiperPagination,
                    nextButton: _swiperBtnNext,
                    prevButton: _swiperBtnPrev,
                    slidesPerView: 1,
                    paginationClickable: true,
                    onSlideChangeEnd: function(){
                        _removeVideo();
                        if ( $( '.swiper-slide-active' ).find( '[data-src]' ).length ){
                            _addVideo();
                        }
                    }
                });

            },
            _init = function () {
                _buildPopup();
                _addEvents();
                _obj[ 0 ].obj = _self;
            },
            _removeVideo = function(){

                var items = _popup.find( '.swiper-slide' ),
                    videoFrame = items.find( '.swiper-popup__video iframe' );
                videoFrame.remove();

            },
            _setPictureSize = function( picWidth, picHeight, pic ){

                var k = 0;

                if ( ( _popup.width()/picWidth ) > ( _popup.height()/picHeight ) ) {
                    k = _popup.height()/picHeight ;
                } else {
                    k = _popup.width()/picWidth;
                }

                if ( k >= 1 ){

                    pic.css({
                        "width": picWidth*0.85,
                        "height": picHeight*0.85
                    });

                } else {

                    pic.css({
                        "width": k*picWidth*0.85,
                        "height": k*picHeight*0.85
                    });

                }

            },
            _setPictureSizeWhenResize = function(){

                $.each( _swiperWrapper.find( 'img' ), function () {

                    _setPictureSize( $( this ).data( 'width' ), $( this ).data( 'height' ), $( this ) );

                } );

            },
            _setStyles = function(){

                _html.css({
                    overflow: 'hidden',
                    paddingRight: _getScrollWidth()
                });

            };

        _init();

    };

} )();

( function(){

    "use strict";

    $( function(){

        if ( $( '.validation-form' ).length ){
            new FormValidator( $( '.validation-form' ) );
        }

    } );

    var FormValidator = function (obj) {

        //private properties
        var _self = this,
            _obj = obj,
            _valueFlag = false,
            _note = _obj.find( '#contact-us__note' ),
            _inputs = _obj.find( 'input, textarea' ),
            _fields = _obj.find( '[data-required]' );

        //private methods
        var _constructor = function () {
                _onEvents();
                _obj[0].obj = _self;
            },
            _addNotTouchedClass = function () {

                _fields.each( function() {

                    var curItem = $(this);

                    if( curItem.val() === '' ){

                        curItem.addClass( 'not-touched' );

                        _validateField( curItem );

                    }

                } );

            },
            _onEvents = function () {
                _fields.on( {
                    focus: function() {

                        $( this ).removeClass( 'not-touched' );

                    },
                    focusout: function() {

                        var curItem = $(this);

                        _validateField( curItem );

                    },
                    keyup: function () {

                        var curItem = $(this);

                        _validateField( curItem );
                    }
                } );
                _inputs.on( {
                    focusout: function() {

                        var letterCounter = 0;

                        _inputs.each( function () {

                            var curItem = $(this);

                            if ( curItem.val().length > 0 ){
                                letterCounter = letterCounter + 1
                            }

                        } );

                        if ( letterCounter === 0 ) {
                            _inputs.removeClass( 'not-valid' );
                            _note.removeClass('visible');
                        }

                    }
                } );
                _obj.on( {
                    submit: function() {

                        _addNotTouchedClass();

                        if( !(_fields.filter( '.not-valid' ).length === 0) ) {

                            _note.addClass('visible');

                        }

                        if( _fields.hasClass('not-touched') || _fields.hasClass('not-valid') ) {

                            _obj.find('.not-touched:first').focus();
                            _obj.find('.not-valid:first').focus();
                            return false;

                        } else {

                            return true;

                        }
                    }
                } );
            },
            _makeNotValid = function ( field ) {
                field.addClass( 'not-valid' );
                field.removeClass( 'valid' );
            },
            _makeValid = function ( field ) {
                field.removeClass( 'not-valid' );
                field.addClass( 'valid' );
            },
            _validateEmail = function ( email ) {
                var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                return re.test(email);
            },
            _validateField = function ( field ) {
                var type = field.attr( 'type'),
                    tagName = field[0].tagName;

                if( type === 'email' || type === 'text' ){

                    if( field.val() === '' ){
                        _makeNotValid( field );
                        return false;
                    }

                }

                if( type === 'email' ){
                    if( !_validateEmail( field.val() ) ){
                        _makeNotValid( field );
                        return false;
                    }
                }


                if( tagName.toLocaleLowerCase() == 'textarea' ){

                    if( field.val() === '' || field.val().length < 80 ){
                        _makeNotValid( field );
                        return false;
                    }

                }

                _makeValid( field );

                if( _fields.filter( '.not-valid' ).length === 0 ) {

                    _note.removeClass('visible');

                }

            };

        //public properties

        //public methods
        _self.checkValid = function () {
            var valid = true;

            _fields.each( function () {
                $( this ).removeClass( 'not-touched' );
                if( $( this ).hasClass( 'not-valid' ) ){
                    valid = false;

                }
            } );

            return valid;
        };

        _constructor();
    };

} )();
( function(){

    $( function(){
        $( 'select' ).each( function(){
            new WebstersSelect( {
                obj: $( this ),
                optionType: 1,
                showType: 2
            } );
        } );
    } );

    var WebstersSelect = function( params ){

        //private properties
        var _self = this,
            _obj = params.obj,
            _optionType = params.optionType || 0,
            _showType = params.showType || 0,
            _visible = params.visible || 5,
            _device = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test( navigator.userAgent ),
            _text = $( '<span class="websters-select__item"></span>' ),
            _wrap = $( '<div class="websters-select"></div>' ),
            _window = $( window ),
            _body = $( 'body' ),
            _opened = false,
            _popup, _scroll;

        //private methods
        var _addWrap = function(){
                var curText = '';

                _obj.css( {
                    opacity: 0
                } );

                _obj.wrap( _wrap );
                _wrap = _obj.parent();
                _wrap.append( '<div class="websters-select__arrow"></div>' );
                _obj.before( _text );
                _obj.find( 'option' ).each( function(){
                    var curItem = $( this );

                    if( curItem.attr( 'selected' ) == 'selected' ){
                        curText = curItem.text();
                    }
                } );

                if( curText == '' ){
                    curText =  _obj.find( 'option').eq( 0 ).text();
                }
                _text.text( curText );
            },
            _hidePopup = function(){
                _opened = false;

                if( !_showType ){
                    _popup.css( {
                        display: 'none'
                    } );
                } else if( _showType == 1 ){
                    _popup.stop( true, false ).slideUp( 300, function(){
                        _popup.remove();
                    } );
                } else if( _showType == 2 ) {
                    _popup.stop( true, false ).fadeOut( 300, function(){
                        _popup.remove();
                    } );
                }

                _wrap.removeClass( 'websters-select_opened' );

            },
            _constructor = function(){
                _obj[ 0 ].obj = _self;

                _addWrap();
                _selectViewType();
                _onEvents();
            },
            _onEvents = function(){
                _obj.on( 'change', function() {
                    _text.text( $( this ).find( 'option:selected' ).text() );
                } );

                if( _optionType == 1 && !_device ){
                    _wrap.on( {
                        'click': function( e ){
                            e.stopPropagation();

                            if( _opened ){
                                _hidePopup();
                            } else {
                                _showPopup();
                            }

                        }
                    } );

                    _window.on( {
                        'click': function(){
                            if( _opened ){
                                _hidePopup();
                            }
                        }
                    } );
                }
            },
            _selectViewType = function(){

                if( !_optionType || _device ){
                    _setMobileView();
                } else if( _optionType == 1 ){
                    _setCustom1();
                }
            },
            _setCustom1 = function(){
                _wrap.addClass( 'websters-select_custom' );
            },
            _setMobileView = function(){
                _wrap.addClass( 'websters-select_mobile' );
            },
            _showPopup = function(){
                var selects = $( 'select' ),
                    list = $( '<ul></ul>'),
                    curScroll = _window.scrollTop(),
                    offset = _wrap.offset(),
                    maxHeight = 0,
                    curIndex = _obj.find( 'option:selected' ).index(),
                    id = Math.round( Math.random() * 1000 );

                selects.each( function(){
                    if( this !== _obj[ 0 ] && this.obj.checkOpened() ){
                        this.obj.close();
                    }
                } );

                if( _opened ){
                    _popup.remove();
                }
                _opened = true;

                _popup = $( '<div class="websters-select__popup" id="websters-select__popup' + id + '"></div>' );

                _obj.find( 'option' ).each( function( i ){
                    var curItem = $( this );

                    if( i == curIndex ){
                        list.append( '<li class="active">' + curItem.text() + '</li>' );
                    } else {
                        list.append( '<li>' + curItem.text() + '</li>' );
                    }

                } );

                _popup.append( list );
                _body.append( _popup );
                _wrap.addClass( 'websters-select_opened' );

                _popup.css( {
                    width: _wrap.outerWidth(),
                    left: offset.left,
                    top: offset.top + _wrap.outerHeight()
                } );

                maxHeight = _popup.outerHeight();
                if( maxHeight > _popup.find( 'li' ).eq( 0 ).outerHeight() * _visible ){
                    _popup.height( _popup.find( 'li' ).eq( 0 ).outerHeight() * _visible );
                    _scroll = _popup.niceScroll( {
                        horizrailenabled: false
                    } );
                }

                if( _showType == 1 ){
                    _popup.css( {
                        display: 'none'
                    } );
                    _popup.slideDown( 300 );
                } else if( _showType == 2 ) {
                    _popup.css( {
                        opacity: 0.1
                    } );
                    _popup.animate( { opacity: 1 }, 300);
                }

                _popup.find( 'li' ).on( {
                    'click': function( e ){
                        var index = $( this ).index();

                        e.stopPropagation();

                        _obj.val( _obj.find( 'option' ).eq( index ).attr( 'value' ) );
                        _obj.trigger( 'change' );
                        _hidePopup();
                    }
                } );

            };

        //public properties

        //public methods
        _self.checkOpened = function(){
            return _opened;
        };
        _self.close = function(){
          _hidePopup();
        };


        _constructor();

    };

} )();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

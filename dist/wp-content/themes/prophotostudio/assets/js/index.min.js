!function(){$(function(){$.each($(".partners"),function(){new n($(this))}),$.each($(".catalog"),function(){new n($(this))}),$.each($(".mobile-menu"),function(){new e($(this))})});var e=function(e){var n=e,i=$(".mobile-menu-btn"),t=function(){s()},s=function(){i.on("click",function(){$(this).hasClass("close")?a():o()})},o=function(){i.addClass("close"),n.addClass("visible")},a=function(){i.removeClass("close"),n.removeClass("visible")};t()},n=function(e){var n,i,t=e,s=t.find(".partners__swiper"),o=t.find(".catalog__swiper"),a=t.find(".partners__swiper-prev"),c=t.find(".catalog__swiper-prev"),l=t.find(".partners__swiper-next"),r=t.find(".catalog__swiper-next"),f=function(){n=new Swiper(s,{autoplay:1e4,speed:500,effect:"slide",slidesPerView:"auto",loop:!0,loopedSlides:20,spaceBetween:80,nextButton:l,prevButton:a}),i=new Swiper(o,{autoplay:1e4,speed:500,effect:"slide",slidesPerView:3,loop:!0,nextButton:r,prevButton:c})},p=function(){f()};p()}}();
!function(){"use strict";$(function(){$.each($(".media-gallery"),function(){new i($(this))})});var i=function(i){var e=i,n=$("body"),a=e.find(".media-gallery__wrap"),o=e.find(".media-gallery__switcher"),s=o.find("button"),r=e.find(".media-gallery__cover"),d=e.find(".preloader"),c=e.find(".media-gallery__more"),l=n.data("action"),u=($(window),!1),p=!0,f=!1,h=new XMLHttpRequest,v=function(){s.on("click",function(){var i=$(this),t=i.data("type");return s.removeClass("active"),i.addClass("active"),a.isotope({filter:"."+t}),f=!0,!1}),c.on({click:function(){return C(),!1}}),e.on("click",".media-gallery__item",function(){return t($(this),$(this).index()),!1})},m=function(i){0!==e.attr("data-loaded-group")&&u&&w();var t,n=i.has_items,o=i.items;$.each(o,function(){var i=this;t=$('<div class="media-gallery__item new '+i.type+'"><img src="'+i.dummy+'" alt="'+i.type+'"/></div>'),a.append(t)});var s=a.find(".new");setTimeout(function(){g(n,s)},550),setTimeout(function(){y()},500),e.attr("data-loaded-group",+e.attr("data-loaded-group")+1)},w=function(){a.isotope("destroy"),u=!1},g=function(i,t){var e=500;p&&(e=1),r.animate({height:a.outerHeight()},{duration:e,complete:function(){r.css("height",""),t.each(function(i){_($(this),i)}),0==i&&b()}}),p&&setTimeout(function(){p=!1},500)},_=function(i,t){var e=100;p&&(e=1),setTimeout(function(){i.removeClass("new")},t*e)},y=function(){var i=".media-gallery__item";u=!0,a.isotope({itemSelector:i,percentPosition:!0,masonry:{columnWidth:".media-gallery__sizer"}}),f&&a.isotope({filter:"."+s.filter(".active").data("type")}),setTimeout(function(){d.removeClass("active")},300)},b=function(){c.css("opacity",0),setTimeout(function(){c.css("padding",0),c.animate({height:0},{duration:500,complete:function(){c.remove()}})},300)},C=function(){var i=l;d.addClass("active"),h.abort(),h=$.ajax({url:i,data:{loadedGroup:e.attr("data-loaded-group"),loadedType:s.data("type")},dataType:"json",timeout:2e4,type:"GET",success:function(i){r.height(r.height()),m(i)},error:function(i){"abort"!=i.statusText&&alert("Error!")}})},T=function(){C(),v()};T()},t=function(i,t){var e=this,n=i,a=$("body"),o=n.parent(),s=n.parents(".media-gallery"),r=$("html"),d=$(window),c=o.find(".media-gallery__item img"),l=null,u=null,p=null,f=null,h=null,v=null,m=null,w=null,g=null,_=function(){d.on({resize:function(){P()}}),u.parent().on({click:function(){T()}}),u.on({click:function(i){i.stopPropagation()}}),p.on({click:function(){return T(),!1}})},y=function(){s.attr("data-loaded-type");l=$('<div class="swiper-popup">                                    <div class="swiper-container">                                        <div class="swiper-wrapper"></div>                                        <div class="swiper-pagination"></div>                                        <div class="swiper-button-next"></div>                                        <div class="swiper-button-prev"></div>                                    </div>                                </div>'),f=l.find(".swiper-wrapper"),h=l.find(".swiper-container"),v=l.find(".swiper-pagination"),m=l.find(".swiper-button-next"),w=l.find(".swiper-button-prev")},b=function(){var i=l.find(".swiper-slide-active"),t=i.find("[data-src]").data("src"),e=$('<iframe src="'+t+'"> frameborder="0" allowfullscreen></iframe>');$(".swiper-slide-active").find(".swiper-popup__video").prepend(e)},C=function(){y(),k(),E(),g.slideTo(t,0),l.addClass("active"),S(),g.onResize()},T=function(){l.removeClass("active"),setTimeout(function(){r.css({overflow:"",paddingRight:""}),l.remove()},300)},k=function(){$.each(c,function(){var i=null,t=null,e=null;$(this).hasClass("media-gallery__item_video")?(e='<i class="fa fa-spinner fa-spin"></i>',i='<div class="swiper-popup__video"/>',t='data-src="'+$(this).attr("href")+'"'):(e="",i='<img src="'+$(this).attr("src")+'">',t="");var n=$('<div class="swiper-slide">                                        <div class="swiper-popup__inner" '+t+'>                                            <a href="#" class="swiper-popup__close"></a>                                            '+e+"                                            "+i+'                                            <span class="swiper-slide__title">'+$(this).attr("title")+"</span>                                        </div>                                    </div>");f.append(n),n.find("img").on({load:function(){$(this).attr("data-width",this.width),$(this).attr("data-height",this.height),z(this.width,this.height,$(this))}})}),a.append(l),u=l.find(".swiper-popup__inner"),p=l.find(".swiper-popup__close")},x=function(){var i=document.createElement("div"),t=null;return document.body.appendChild(i),t=i.offsetWidth-i.clientWidth,document.body.removeChild(i),t},E=function(){g=new Swiper(h,{pagination:v,nextButton:m,prevButton:w,slidesPerView:1,paginationClickable:!0,onSlideChangeEnd:function(){j(),$(".swiper-slide-active").find("[data-src]").length&&b()}})},R=function(){C(),_(),n[0].obj=e},j=function(){var i=l.find(".swiper-slide"),t=i.find(".swiper-popup__video iframe");t.remove()},z=function(i,t,e){var n=0;n=l.width()/i>l.height()/t?l.height()/t:l.width()/i,n>=1?e.css({width:.85*i,height:.85*t}):e.css({width:n*i*.85,height:n*t*.85})},P=function(){$.each(f.find("img"),function(){z($(this).data("width"),$(this).data("height"),$(this))})},S=function(){r.css({overflow:"hidden",paddingRight:x()})};R()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

!function(){$(function(){$.each($(".anchor"),function(){new e($(this))}),$.each($(".partners"),function(){new a($(this))}),$.each($(".catalog"),function(){new a($(this))}),$.each($(".promo__slider"),function(){new a($(this))}),$.each($(".sub-menu"),function(){new a($(this))}),$.each($(".media-gallery"),function(){new a($(this))}),$.each($(".mobile-menu"),function(){new t($(this))}),$.each($(".blog__sort"),function(){new s($(this))}),$.each($(".head-shot"),function(){new r($(this))}),$.each($(".hiring__item"),function(){new n($(this))}),$.each($(".rates__item-swiper"),function(){new a($(this))}),$.each($(".place-order__form"),function(){new i($(this))}),$.each($(".place-order__sign"),function(){new o($(this))})});var e=function(e){var n=e,t=$("html, body"),i=function(){n.on({click:function(){return $(".menu").hasClass("mobile")&&$(".menu-btn").trigger("click"),t.animate({scrollTop:$($.attr(this,"href")).offset().top},600),$(".menu")[0].obj.destroy(),!1}})},o=function(){i()};o()},n=function(e){var n=e,t=n.find(".hiring__btn"),i=n.find(".hiring__form"),o=n.find(".hiring__item-hide"),a=($("html, body"),function(){t.on({click:function(){return o.addClass("hide"),i.addClass("visible"),!1}})}),s=function(){a()};s()},t=function(e){var n=e,t=$(".mobile-menu-btn"),i=function(){o()},o=function(){t.on("click",function(){$(this).hasClass("close")?s():a()})},a=function(){t.addClass("close"),n.addClass("visible")},s=function(){t.removeClass("close"),n.removeClass("visible")};i()},i=function(e){var n=e,t=$(".place-order__steps"),i=t.find(".place-order__steps-item"),o=t.find("div > span"),a=n.find(".place-order__form-wrap"),s=n.find(".place-order__form-item"),r=s.find("input"),c=s.find("input[type=checkbox]"),d=s.find("select"),u=s.find("input[type=file]"),l=s.find("[data-required]"),f=s.find(".place-order__form-next"),h=s.find(".place-order__form-num"),p=h.find(".plus"),v=h.find(".minus"),m=function(){_(),k()},_=function(){a.css("height",s.filter(".active").outerHeight())},w=function(e){var n=e,t=n.next(".place-order__form-item");n.removeClass("active"),t.addClass("active");for(var a=0;a<=t.index();a++)i.eq(a).addClass("active");o.css("width",100*(t.index()+1)/4+"%"),_()},g=function(e){var n=e,t=n.find("[data-required]");t.each(function(){var e=$(this);""!==e.val()&&"0"!==e.val()&&e.is(":checked")||(e.addClass("not-touched"),e.parents(".websters-select").addClass("not-touched"),x(n,e))})},C=function(e){e.addClass("not-valid"),e.parents(".websters-select").addClass("not-valid"),e.removeClass("valid")},b=function(e){e.removeClass("not-valid"),e.parents(".websters-select").removeClass("not-valid"),e.addClass("valid")},y=function(e){var n=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return n.test(e)},x=function(e,n){var t=$(this),i=n.attr("type"),o=n[0].tagName;return("email"!==i&&"text"!==i&&"number"!==i||""!==n.val())&&("email"!==i||y(n.val()))?"number"===i&&n.val()<=0?(C(n),!1):"select"==o.toLocaleLowerCase()&&0===n.val()?(C(n),!1):(b(n),void(0===r.filter(".not-valid").length&&w(t))):(C(n),!1)},k=function(){n.on("submit",function(){}),r.on({focus:function(){$(this).removeClass("not-touched")},focusout:function(){var e=$(this),n=e.parents(".place-order__form-item");x(n,e)},keyup:function(){var e=$(this),n=e.parents(".place-order__form-item");x(n,e)}}),l.on({focusout:function(){var e=0;l.each(function(){var n=$(this);n.val().length>0&&(e+=1)}),0===e&&l.removeClass("not-valid")}}),d.on("change",function(){var e=$(this),n=e.parents(".websters-select");e.removeClass("not-valid not-touched"),n.removeClass("not-valid not-touched")}),c.on("change",function(){var e=$(this),n=e.parents(".websters-select");e.removeClass("not-valid not-touched"),n.removeClass("not-valid not-touched")}),f.on("click",function(){var e=$(this),t=e.parents(".place-order__form-item");return 0!=t.find("[data-required]").val()&&""!=t.find("[data-required]").val()||g(t),r.hasClass("not-touched")||r.hasClass("not-valid")||d.hasClass("not-valid")?(n.find(".not-touched:first").focus(),n.find(".not-valid:first").focus()):w(t),!1}),p.on("click",function(){var e=$(this),n=e.parents(".place-order__form-fieldset"),t=n.find("input[type=number]"),i=+t.val();return t.val(i+1),t.removeClass("not-valid"),!1}),v.on("click",function(){var e=$(this),n=e.parents(".place-order__form-fieldset"),t=n.find("input[type=number]"),i=+t.val();return i>0&&(t.val(i-1),t.removeClass("not-valid")),!1}),u.on("change",function(){var e=$(this),n=e.next("span");n.text(e.val())})};m()},o=function(e){var n,t=this,i=e,o=i.find(".place-order__sign-area"),a=i.find("span"),s=$(window),r=function(){o.signature("destroy")},c=function(){s.on({resize:function(){r(),u()}}),o.on({click:function(){a.remove()},mouseleave:function(){o.signature("isEmpty")?(o.addClass("contact__sign-area-red"),$(".sign_val").val("")):(n=o.signature("toSVG"),o.removeClass("contact__sign-area-red"),$(".sign_val").val(n))}})},d=function(){i[0].obj=t,c(),u()},u=function(){o.signature({thickness:1,color:"#b7b7b7"})};d()},a=function(e){var n,t,i,o,a,s,r=e,c=r.find(".partners__swiper"),d=r.find(".sub-menu__swiper"),u=r.find(".media-gallery__switcher"),l=r.find(".catalog__swiper"),f=r.find(".promo__swiper"),h=r.find(".rates__swiper"),p=r.find(".partners__swiper-prev"),v=r.find(".catalog__swiper-prev"),m=r.find(".promo__swiper-prev"),_=r.find(".rates__swiper-prev"),w=r.find(".partners__swiper-next"),g=r.find(".catalog__swiper-next"),C=r.find(".promo__swiper-next"),b=r.find(".rates__swiper-next"),y=!1,x=!1,k=$(window),T=function(){n=new Swiper(c,{autoplay:2e3,speed:500,effect:"slide",slidesPerView:6,loop:!0,loopedSlides:20,spaceBetween:80,nextButton:w,prevButton:p,breakpoints:{400:{slidesPerView:1},768:{slidesPerView:2},1024:{slidesPerView:3},1200:{slidesPerView:4}}}),t=new Swiper(l,{autoplay:1e4,speed:500,effect:"slide",slidesPerView:3,loop:!0,nextButton:g,prevButton:v,breakpoints:{767:{slidesPerView:1},1199:{slidesPerView:2}}}),o=new Swiper(f,{autoplay:1e4,speed:500,effect:"slide",slidesPerView:1,loop:!0,nextButton:C,prevButton:m}),a=new Swiper(h,{autoplay:!1,speed:500,effect:"slide",slidesPerView:"auto",loop:!1,nextButton:b,prevButton:_}),k.outerWidth()<768&&setTimeout(function(){y=!0,i=new Swiper(d,{autoplay:!1,speed:500,effect:"slide",slidesPerView:"auto",simulateTouch:!1,onInit:function(){d[0].swiper.slideTo(d.find(".active").index(),200,!1)},onSlideChangeStart:function(){r.removeClass("start"),r.removeClass("end")},onReachBeginning:function(){setTimeout(function(){r.addClass("start")},300)},onReachEnd:function(){setTimeout(function(){r.addClass("end")},300)}}),x=!0,s=new Swiper(u,{autoplay:!1,speed:500,effect:"slide",slidesPerView:"auto",simulateTouch:!1,onInit:function(){u[0].swiper.slideTo(u.find(".active").index(),200,!1)},onSlideChangeStart:function(){u.removeClass("start"),u.removeClass("end")},onReachBeginning:function(){setTimeout(function(){u.addClass("start")},300)},onReachEnd:function(){setTimeout(function(){u.addClass("end")},300)}})},300)},V=function(){k.on({resize:function(){k.outerWidth()>768?P():T()}})},P=function(){k.outerWidth()>=768&&y&&d[0].swiper.destroy(!1,!0),k.outerWidth()>=768&&x&&u[0].swiper.destroy(!1,!0)},S=function(){V(),T()};S()},s=function(e){var n=e,t=$(".site"),i=$(window),o=function(){a()},a=function(){t.on("click",function(e){n.hasClass("open")&&0==$(e.target).closest(n).length&&s()}),n.on("click",function(){var e=$(this);e.hasClass("open")&&i.width()<1200?s():i.width()<1200&&r()})},s=function(){n.removeClass("open")},r=function(){n.addClass("open")};o()},r=function(e){var n=e,t=$("body"),i=t.data("action"),o=n.find(".head-shot__command-more"),a=n.find(".preloader"),s=n.find(".head-shot__command-wrap"),r=n.find(".head-shot__command-cover"),c=!0,d=new XMLHttpRequest,u=function(){p(),m()},l=function(e){var t,i=e.has_items,o=e.items;$.each(o,function(){var e=this;t=$('<div class="head-shot__command-item new"><img src="'+e.dummy+'" alt="'+e.title+'"/></div>'),s.append(t)});var a=s.find(".new");setTimeout(function(){f(i,a)},550),n.attr("data-loaded-group",+n.attr("data-loaded-group")+1)},f=function(e,n){var t=500;c&&(t=1),r.animate({height:s.outerHeight()},{duration:t,complete:function(){r.css("height",""),n.each(function(e){h($(this),e)}),0==e&&v()}}),c&&setTimeout(function(){c=!1},500)},h=function(e,n){var t=100;c&&(t=1),setTimeout(function(){e.removeClass("new")},n*t)},p=function(){var e=i;a.addClass("active"),d.abort(),d=$.ajax({url:e,data:{action:"gallery",type:"headshot",page:n.attr("data-loaded-group")},dataType:"json",timeout:2e4,type:"GET",success:function(e){r.height(r.height()),l(e)},error:function(e){"abort"!=e.statusText&&alert("Error!")}})},v=function(){o.css("opacity",0),setTimeout(function(){o.css("padding",0),o.animate({height:0},{duration:500,complete:function(){o.remove()}})},300)},m=function(){o.on("click",function(){return p(),!1})};u()}}();
!function(){"use strict";$(function(){$.each($(".media-gallery"),function(){new i($(this))})});var i=function(i){var e=i,n=$("body"),a=e.find(".media-gallery__wrap"),d=$('<div class="media-gallery__sizer"></div>'),s=e.find(".media-gallery__switcher"),o=s.find("button"),r=e.find(".media-gallery__cover"),l=e.find(".preloader"),c=e.find(".media-gallery__more"),u=n.data("action"),p=($(window),!1),f=!0,h=!0,v=new XMLHttpRequest,m=function(){o.on("click",function(){var i=$(this),t=i.data("type");return o.removeClass("active"),i.addClass("active"),e.attr("data-loaded-group",0),k(t),h=!0,!1}),c.on({click:function(){return k(),h=!1,!1}}),e.on("click",".media-gallery__item",function(){return t($(this),$(this).index()-1),h=!0,!1})},g=function(i){0!==e.attr("data-loaded-group")&&p&&w();var t,n=i.has_items,s=i.items;h&&a.html(d),$.each(s,function(){var i=this;t=$('<div class="media-gallery__item new '+i.type+'" title="'+this.title+'" data-href="'+i.dummy__big+'"><img src="'+i.dummy+'" alt="'+i.type+'" /></div>'),1==i.video&&t.addClass("media-gallery__item_video"),a.append(t)});var o=a.find(".new");a.imagesLoaded(function(){b(),setTimeout(function(){_(n,o)},50)}),e.attr("data-loaded-group",+e.attr("data-loaded-group")+1)},w=function(){a.isotope("destroy"),p=!1},_=function(i,t){var e=500;f&&(e=1),r.animate({height:a.outerHeight()},{duration:e,complete:function(){r.css("height",""),t.each(function(i){y($(this),i)}),0==i?T():i>0&&C()}}),f&&setTimeout(function(){f=!1},500)},y=function(i,t){var e=100;f&&(e=1),setTimeout(function(){i.removeClass("new")},t*e)},b=function(){var i=".media-gallery__item";p=!0,a.isotope({itemSelector:i,percentPosition:!0,masonry:{columnWidth:".media-gallery__sizer"}}),l.removeClass("active")},C=function(){c.removeClass("hide")},T=function(){c.addClass("hide")},k=function(){var i=u;l.addClass("active"),v.abort(),v=$.ajax({url:i,data:{action:"gallery",page:e.attr("data-loaded-group"),type:o.filter(".active").data("type")},dataType:"json",timeout:2e4,type:"GET",success:function(i){r.height(r.height()),g(i)},error:function(i){"abort"!=i.statusText&&alert("Error!")}})},x=function(){k(),m()};x()},t=function(i,t){var e=this,n=i,a=$("body"),d=n.parent(),s=n.parents(".media-gallery"),o=$("html"),r=$(window),l=d.find(".media-gallery__item"),c=null,u=null,p=null,f=null,h=null,v=null,m=null,g=null,w=null,_=function(){r.on({resize:function(){P()}}),u.parent().on({click:function(){T()}}),u.on({click:function(i){i.stopPropagation()}}),p.on({click:function(){return T(),!1}})},y=function(){s.attr("data-loaded-type");c=$('<div class="swiper-popup">                                    <div class="swiper-container">                                        <div class="swiper-wrapper"></div>                                        <div class="swiper-pagination"></div>                                        <div class="swiper-button-next"></div>                                        <div class="swiper-button-prev"></div>                                    </div>                                </div>'),f=c.find(".swiper-wrapper"),h=c.find(".swiper-container"),v=c.find(".swiper-pagination"),m=c.find(".swiper-button-next"),g=c.find(".swiper-button-prev")},b=function(){var i=c.find(".swiper-slide-active"),t=i.find("[data-src]").data("src"),e=$('<iframe src="'+t+'"> frameborder="0" allowfullscreen></iframe>');$(".swiper-slide-active").find(".swiper-popup__video").prepend(e)},C=function(){y(),k(),z(),w.slideTo(t,0),c.addClass("active"),S(),w.onResize()},T=function(){c.removeClass("active"),setTimeout(function(){o.css({overflow:"",paddingRight:""}),c.remove()},300)},k=function(){$.each(l,function(){var i=null,t=null,e=null;$(this).hasClass("media-gallery__item_video")?(e='<i class="fa fa-spinner fa-spin"></i>',i='<div class="swiper-popup__video"/>',t='data-src="'+$(this).data("href")+'"'):(e="",i='<img src="'+$(this).data("href")+'">',t="");var n=$('<div class="swiper-slide">                                        <div class="swiper-popup__inner" '+t+'>                                            <a href="#" class="swiper-popup__close"></a>                                            '+e+"                                            "+i+'                                            <span class="swiper-slide__title">'+$(this).attr("title")+"</span>                                        </div>                                    </div>");f.append(n),n.find("img").on({load:function(){$(this).attr("data-width",this.width),$(this).attr("data-height",this.height),j(this.width,this.height,$(this))}})}),a.append(c),u=c.find(".swiper-popup__inner"),p=c.find(".swiper-popup__close")},x=function(){var i=document.createElement("div"),t=null;return document.body.appendChild(i),t=i.offsetWidth-i.clientWidth,document.body.removeChild(i),t},z=function(){w=new Swiper(h,{pagination:v,nextButton:m,prevButton:g,slidesPerView:1,paginationClickable:!0,onSlideChangeEnd:function(){R(),$(".swiper-slide-active").find("[data-src]").length&&b()}})},E=function(){C(),_(),n[0].obj=e},R=function(){var i=c.find(".swiper-slide"),t=i.find(".swiper-popup__video iframe");t.remove()},j=function(i,t,e){var n=0;n=c.width()/i>c.height()/t?c.height()/t:c.width()/i,n>=1?e.css({width:.85*i,height:.85*t}):e.css({width:n*i*.85,height:n*t*.85})},P=function(){$.each(f.find("img"),function(){j($(this).data("width"),$(this).data("height"),$(this))})},S=function(){o.css({overflow:"hidden",paddingRight:x()})};E()}}();
!function(){"use strict";$(function(){$(".validation-form").length&&new t($(".validation-form"))});var t=function(t){var n=this,a=t,o=a.find("#contact-us__note"),i=a.find("input, textarea"),s=a.find("[data-required]"),e=function(){u(),a[0].obj=n},l=function(){s.each(function(){var t=$(this);""===t.val()&&(t.addClass("not-touched"),f(t))})},u=function(){s.on({focus:function(){$(this).removeClass("not-touched")},focusout:function(){var t=$(this);f(t)},keyup:function(){var t=$(this);f(t)}}),i.on({focusout:function(){var t=0;i.each(function(){var n=$(this);n.val().length>0&&(t+=1)}),0===t&&(i.removeClass("not-valid"),o.removeClass("visible"))}}),a.on({submit:function(){return l(),0!==s.filter(".not-valid").length&&o.addClass("visible"),!s.hasClass("not-touched")&&!s.hasClass("not-valid")||(a.find(".not-touched:first").focus(),a.find(".not-valid:first").focus(),!1)}})},v=function(t){t.addClass("not-valid"),t.removeClass("valid")},c=function(t){t.removeClass("not-valid"),t.addClass("valid")},r=function(t){var n=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return n.test(t)},f=function(t){var n=t.attr("type"),a=t[0].tagName;return("email"!==n&&"text"!==n||""!==t.val())&&("email"!==n||r(t.val()))?"textarea"==a.toLocaleLowerCase()&&(""===t.val()||t.val().length<80)?(v(t),!1):(c(t),void(0===s.filter(".not-valid").length&&o.removeClass("visible"))):(v(t),!1)};n.checkValid=function(){var t=!0;return s.each(function(){$(this).removeClass("not-touched"),$(this).hasClass("not-valid")&&(t=!1)}),t},e()}}();
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,i,n=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,l=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),d=$('<span class="websters-select__item"></span>'),p=$('<div class="websters-select"></div>'),r=$(window),f=$("body"),u=!1,h=function(){var e="";o.css({opacity:0}),o.wrap(p),p=o.parent(),p.append('<div class="websters-select__arrow"></div>'),o.before(d),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),d.text(e)},v=function(){u=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),p.removeClass("websters-select_opened")},b=function(){o[0].obj=n,h(),g(),w()},w=function(){o.on("change",function(){d.text($(this).find("option:selected").text())}),1!=s||l||(p.on({click:function(e){e.stopPropagation(),u?v():m()}}),r.on({click:function(){u&&v()}}))},g=function(){!s||l?y():1==s&&_()},_=function(){p.addClass("websters-select_custom")},y=function(){p.addClass("websters-select_mobile")},m=function(){var e=$("select"),n=$("<ul></ul>"),s=(r.scrollTop(),p.offset()),l=0,d=o.find("option:selected").index(),h=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),u&&t.remove(),u=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+h+'"></div>'),o.find("option").each(function(e){var t=$(this);e==d?n.append('<li class="active">'+t.text()+"</li>"):n.append("<li>"+t.text()+"</li>")}),t.append(n),f.append(t),p.addClass("websters-select_opened"),t.css({width:p.outerWidth(),left:s.left,top:s.top+p.outerHeight()}),l=t.outerHeight(),l>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),i=t.niceScroll({horizrailenabled:!1})),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),v()}})};n.checkOpened=function(){return u},n.close=function(){v()},b()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

!function(){$(function(){$.each($(".partners"),function(){new n($(this))}),$.each($(".mobile-menu"),function(){new e($(this))})});var e=function(e){var n=e,i=$(".mobile-menu-btn"),s=function(){t()},t=function(){i.on("click",function(){$(this).hasClass("close")?c():o()})},o=function(){i.addClass("close"),n.addClass("visible")},c=function(){i.removeClass("close"),n.removeClass("visible")};s()},n=function(e){var n,i=e,s=i.find(".partners__swiper"),t=i.find(".partners__swiper-prev"),o=i.find(".partners__swiper-next"),c=function(){n=new Swiper(s,{autoplay:1e4,speed:500,effect:"slide",slidesPerView:"auto",loop:!0,loopedSlides:20,spaceBetween:80,nextButton:o,prevButton:t})},a=function(){c()};a()}}();
!function(){"use strict";$(function(){$.each($(".media-gallery"),function(){new i($(this))})});var i=function(i){var t=this,n=i,a=n.find(".media-gallery__wrap"),d=n.find(".media-gallery__inner"),o=n.find(".media-gallery__cover"),s=n.find(".media-gallery__check"),l=null,r=$(window),c=n.find(".media-gallery__more"),u=c.attr("href"),p=!1,h=new XMLHttpRequest,f=!0,m=null,v=d.find(".swiper-button-next"),w=d.find(".swiper-button-prev"),g=n.attr("data-loaded-type"),_=!1,y=!1,b=n.find(".preloader"),C=function(i){var e=i.has_items,t=(d.innerHeight(),null),o=null;$.each(i.items,function(i){t=void 0==this.video?this.href:this.video,o=$('<a href="'+t+'" title="'+this.title+'" class="media-gallery__item hidden swiper-slide" style="background-image: url('+this.dummy+');"><span class="media-gallery__item-title">'+this.title+"</span></a>"),this.video&&o.addClass("media-gallery__item_video"),a.append(o)});var s=a.find(".hidden");r.width()>=768&&setTimeout(function(){W(e,s)},50),r.width()<768?j():S(),n.attr("data-loaded-group",+n.attr("data-loaded-group")+1),b.removeClass("active")},T=function(){c.on({click:function(){return P(),!1}}),n.on("click",".media-gallery__item",function(){return e($(this),$(this).index()),!1}),s.on({click:function(){_=!0;var i=$(this);i.hasClass("active")?(i.removeClass("active"),n.attr("data-loaded-type","all"),g="all",r.width()<768?(m.update(),m.updateProgress(),m.slideTo(0)):(x(),S())):(s.removeClass("active"),i.addClass("active"),n.attr("data-loaded-type",i.data("type")),g=i.data("type"),r.width()<768?(m.update(),m.updateProgress(),m.slideTo(0)):(x(),S()))}}),r.on({resize:function(){r.width()<768&&!m?(x(),j()):r.width()>=768&&m?(m.destroy(),m=null,S()):r.width()>=748&&!m&&setTimeout(function(){},700)}})},x=function(){a.isotope("destroy"),p=!1},k=function(){var i=document.createElement("div"),e=null;return i.style.overflowY="scroll",i.style.width="50px",i.style.height="50px",i.style.visibility="hidden",document.body.appendChild(i),e=i.offsetWidth-i.clientWidth,document.body.removeChild(i),e},W=function(i,e){var t=500;f&&(t=1),o.animate({height:a.height()},{duration:t,complete:function(){o.css("height",""),e.each(function(i){B($(this),i)}),0==i&&R()}}),f&&setTimeout(function(){f=!1},500),_=!1},S=function(){var i=a.find(".media-gallery__item");a=n.find(".media-gallery__wrap"),l=".media-gallery__item",r.width()<1200&&r.width()>=768&&i.length<=2?a.isotope({itemSelector:l,masonry:{columnWidth:0,isFitWidth:!0}}):r.width()>=1200&&i.length<=4?a.isotope({itemSelector:l,masonry:{columnWidth:0,isFitWidth:!0}}):a.isotope({itemSelector:l,masonry:{columnWidth:0},layoutMode:"fitRows"}),p=!0},E=function(){P(),T(),n[0].obj=t},P=function(){var i;if(y){y=!1;var e=a.find(".media-gallery__item");e.css("left","auto")}i=n.hasClass("media-gallery_profile")?n.data("action"):u,b.addClass("active"),h.abort(),h=$.ajax({url:i,data:{loadedGroup:n.attr("data-loaded-group")},dataType:"json",timeout:2e4,type:"GET",success:function(i){r.width()+k()>=1e3&&o.height(o.height()),0!==n.attr("data-loaded-group")&&(r.width()>=768&&p?x():m&&(m.destroy(),m=null)),C(i)},error:function(i){"abort"!=i.statusText&&alert("Error!")}})},R=function(){c.css("opacity",0),setTimeout(function(){c.css("padding",0),c.animate({height:0},{duration:500,complete:function(){c.remove()}})},300)},j=function(){m=new Swiper(o,{autoplay:!1,speed:500,effect:"slide",slidesPerView:1,loop:!1,prevButton:w,nextButton:v,onSlideChangeStart:function(i){i.isEnd&&P()}}),m.update()},B=function(i,e){var t=100;f&&(t=1),setTimeout(function(){i.removeClass("hidden")},e*t)};E()},e=function(i,e){var t,n=this,a=i,d=$("body"),o=a.parent(),s=a.parents(".media-gallery"),l=$("html"),r=$(window),c=null,u=null,p=null,h=null,f=null,m=null,v=null,w=null,g=null,_=function(){r.on({resize:function(){R()}}),u.parent().on({click:function(){T()}}),u.on({click:function(i){i.stopPropagation()}}),p.on({click:function(){return T(),!1}})},y=function(){var i=s.attr("data-loaded-type");"all"==i?t=o.find(".media-gallery__item"):"photo"==i?t=o.find(".media-gallery__item:not(.media-gallery__item_video)"):"video"==i&&(t=o.find(".media-gallery__item_video")),c=$('<div class="swiper-popup">                                    <div class="swiper-container">                                        <div class="swiper-wrapper"></div>                                        <div class="swiper-pagination"></div>                                        <div class="swiper-button-next"></div>                                        <div class="swiper-button-prev"></div>                                    </div>                                </div>'),h=c.find(".swiper-wrapper"),f=c.find(".swiper-container"),m=c.find(".swiper-pagination"),v=c.find(".swiper-button-next"),w=c.find(".swiper-button-prev")},b=function(){var i=c.find(".swiper-slide-active"),e=i.find("[data-src]").data("src"),t=$('<iframe src="'+e+'"> frameborder="0" allowfullscreen></iframe>');$(".swiper-slide-active").find(".swiper-popup__video").prepend(t)},C=function(){y(),x(),W(),g.slideTo(e,0),c.addClass("active"),j(),g.onResize()},T=function(){c.removeClass("active"),setTimeout(function(){l.css({overflow:"",paddingRight:""}),c.remove()},300)},x=function(){$.each(t,function(){var i=null,e=null,t=null;$(this).hasClass("media-gallery__item_video")?(t='<i class="fa fa-spinner fa-spin"></i>',i='<div class="swiper-popup__video"/>',e='data-src="'+$(this).attr("href")+'"'):(t="",i='<img src="'+$(this).attr("href")+'">',e="");var n=$('<div class="swiper-slide">                                        <div class="swiper-popup__inner" '+e+'>                                            <a href="#" class="swiper-popup__close"></a>                                            '+t+"                                            "+i+'                                            <span class="swiper-slide__title">'+$(this).attr("title")+"</span>                                        </div>                                    </div>");h.append(n),n.find("img").on({load:function(){$(this).attr("data-width",this.width),$(this).attr("data-height",this.height),P(this.width,this.height,$(this))}})}),d.append(c),u=c.find(".swiper-popup__inner"),p=c.find(".swiper-popup__close")},k=function(){var i=document.createElement("div"),e=null;return document.body.appendChild(i),e=i.offsetWidth-i.clientWidth,document.body.removeChild(i),e},W=function(){g=new Swiper(f,{pagination:m,nextButton:v,prevButton:w,slidesPerView:1,paginationClickable:!0,onSlideChangeEnd:function(){E(),$(".swiper-slide-active").find("[data-src]").length&&b()}})},S=function(){C(),_(),a[0].obj=n},E=function(){var i=c.find(".swiper-slide"),e=i.find(".swiper-popup__video iframe");e.remove()},P=function(i,e,t){var n=0;n=c.width()/i>c.height()/e?c.height()/e:c.width()/i,n>=1?t.css({width:.85*i,height:.85*e}):t.css({width:n*i*.85,height:n*e*.85})},R=function(){$.each(h.find("img"),function(){P($(this).data("width"),$(this).data("height"),$(this))})},j=function(){l.css({overflow:"hidden",paddingRight:k()})};S()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
